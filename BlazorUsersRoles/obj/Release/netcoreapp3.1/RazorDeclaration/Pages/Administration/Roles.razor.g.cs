#pragma checksum "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\Pages\Administration\Roles.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1b971190772fd9c9803f6d5e9bd01fee81a4f924"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorUsersRoles.Pages.Administration
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using BlazorUsersRoles;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\_Imports.razor"
using BlazorUsersRoles.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\Pages\Administration\Roles.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\Pages\Administration\Roles.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/administration/roles")]
    public partial class Roles : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 107 "C:\Users\andre\source\repos\Sources\Offord-EDI\BlazorUserRoles\BlazorUsersRoles\Pages\Administration\Roles.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();

    // Property used to add or edit the currently selected user
    IdentityRole objRole= new IdentityRole();

    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";

    // Collection to display the existing users
    List<IdentityRole> ColRoles = new List<IdentityRole>();


    // To hold any possible errors
    string strError = "";

    // To enable showing the Popup
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        // get the roles
        GetRoles();
    }

    public void GetRoles()
    {
        // clear any error messages
        strError = "";

        // Collection to hold roles
        ColRoles = new List<IdentityRole>();

        // get roles from _RoleManager
        var role = _RoleManager.Roles.Select(x => new IdentityRole
        {
            Id = x.Id,
            Name = x.Name,
            NormalizedName = x.NormalizedName,
            ConcurrencyStamp = x.ConcurrencyStamp
        }) ;

        foreach (var item in role)
        {
            ColRoles.Add(item);
        }
    }
    void AddNewRole()
    {
        // Make new user
        objRole = new IdentityRole();

        // Set Id to blank so we know it is a new record
        objRole.Id = "";

        // Open the Popup
        ShowPopup = true;
    }


    async Task SaveRole()
    {
        try
        {
            // Is this an existing user?
            if (objRole.Id != "")
            {
                // Get the user
                var role = await _RoleManager.FindByIdAsync(objRole.Id);

                // Update Email
                role.Name= objRole.Name;

                // Update the user
                await _RoleManager.UpdateAsync(role);
            }
            else
            {
                // Insert new role

                var NewRole =
                    new IdentityRole
                    {
                        Name = objRole.Name,
                        NormalizedName = objRole.NormalizedName
                    };

                var CreateResult =
                    await _RoleManager
                    .CreateAsync(NewRole);

                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                        .Errors
                        .FirstOrDefault() != null)
                    {
                        strError =
                            CreateResult
                            .Errors
                            .FirstOrDefault()
                            .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }

                    // Keep the popup opened
                    return;
                }
            }

            // Close the Popup
            ShowPopup = false;

            // Refresh Users
            GetRoles();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditRole(IdentityRole _IdentityRole)
    {
        // Set the selected role
        // as the current role
        objRole = _IdentityRole;

        // Get the role
        var role = await _RoleManager.FindByIdAsync(objRole.Id);

        // Open the Popup
        ShowPopup = true;
    }


    async Task DeleteRole()
    {
        try
        {
            // Close the Popup
            ShowPopup = false;

            // Get the user
            var role = await _RoleManager.FindByIdAsync(objRole.Id);
            if (role != null)
            {
                // Delete the user
                await _RoleManager.DeleteAsync(role);
            }

            // Refresh Roles
            GetRoles();
        }
        catch (Exception ex)
        {

        }
    }

    async Task DeleteRole(IdentityRole _IdentityRole)
    {
        try
        {
            // Delete the role
            await _RoleManager.DeleteAsync(_IdentityRole);

            // Refresh Roles
            GetRoles();
        }
        catch (Exception ex)
        {

        }
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RoleManager<IdentityRole> _RoleManager { get; set; }
    }
}
#pragma warning restore 1591
