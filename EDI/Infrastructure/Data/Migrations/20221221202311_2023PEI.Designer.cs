// <auto-generated />
using System;
using EDI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDI.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20221221202311_2023PEI")]
    partial class _2023PEI
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChildNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ChildStatusId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Ediid")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LocalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PercentComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasComment("Year of the EDI implementation");

                    b.HasKey("Id");

                    b.HasIndex("ChildStatusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Children", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.ChildStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("French")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChildStatus", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6078),
                            English = "New",
                            French = "Nouveau",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6122),
                            Sequence = 1
                        },
                        new
                        {
                            Id = 1,
                            Code = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6125),
                            English = "In Progress",
                            French = "En cours",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6127),
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6129),
                            English = "Complete",
                            French = "Achevé",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6130),
                            Sequence = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6148),
                            English = "Locked",
                            French = "Fermé à clé",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 747, DateTimeKind.Local).AddTicks(6150),
                            Sequence = 4
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Coordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoordinatorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasComment("Year of the EDI implementation");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Coordinators", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("French")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ISO2CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ISO3CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Countries", "LUData");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.DateDimension", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("DOWInMonth")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.Property<short>("DayOfYear")
                        .HasColumnType("smallint");

                    b.Property<string>("DaySuffix")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime>("FirstDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextYear")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfYear")
                        .HasColumnType("date");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int");

                    b.Property<int>("FiscalYearMonth")
                        .HasColumnType("int");

                    b.Property<int>("FiscalYearMonthOrder")
                        .HasColumnType("int");

                    b.Property<string>("HolidayText")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<byte>("ISOWeekOfYear")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfYear")
                        .HasColumnType("date");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte>("Quarter")
                        .HasColumnType("tinyint");

                    b.Property<string>("QuarterName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<byte>("WeekOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<byte>("WeekOfYear")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Weekday")
                        .HasColumnType("tinyint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("YearMonth")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("DateDimension");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BritishColumbia")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAdministratorFaq")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCoordinatorFaq")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTeacherFaq")
                        .HasColumnType("bit");

                    b.Property<bool?>("Manitoba")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NewBrunswick")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewYork")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .HasColumnType("bit");

                    b.Property<bool?>("NorthwestTerritories")
                        .HasColumnType("bit");

                    b.Property<bool?>("NovaScotia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nunavut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ontario")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .HasColumnType("bit");

                    b.Property<bool?>("Quebec")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Saskatchewan")
                        .HasColumnType("bit");

                    b.Property<short>("Sequence")
                        .HasColumnType("smallint");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<bool?>("YukonTerritory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("FAQ", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.FileImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ChildDob")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ChildEdiid")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ChildPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CoordinatorEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CoordinatorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileImportStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LocalId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FileImportStatusId");

                    b.HasIndex("GenderId");

                    b.ToTable("FileImports", "Staging");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.FileImportStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("French")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileImportStatus", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3027),
                            English = "Imported",
                            French = "Importé",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3036),
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3044),
                            English = "Processed",
                            French = "Traité",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3046),
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3048),
                            English = "Duplicate",
                            French = "Dupliquer",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3049),
                            Sequence = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3051),
                            English = "Invalid Province",
                            French = "Province non valide",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3074),
                            Sequence = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3076),
                            English = "Invalid Questionnaire",
                            French = "Questionnaire non valide",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(3078),
                            Sequence = 5
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.FormConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FormName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormConfigurations");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("French")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Genders", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(6811),
                            English = "Male",
                            French = "Mâle",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(6820),
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(6824),
                            English = "Female",
                            French = "Femelle",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(6825),
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("French")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("InputTypes", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 14,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9662),
                            English = "Hidden",
                            French = "Hidden",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9671),
                            YearId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9674),
                            English = "NumberBoxDouble",
                            French = "NumberBoxDouble",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9675),
                            YearId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9677),
                            English = "Toggle",
                            French = "Toggle",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9679),
                            YearId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9680),
                            English = "GroupHeader",
                            French = "GroupHeader",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9688),
                            YearId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9719),
                            English = "QuestionHeader",
                            French = "QuestionHeader",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9721),
                            YearId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9723),
                            English = "Header",
                            French = "Header",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9725),
                            YearId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9727),
                            English = "TextBox",
                            French = "TextBox",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9728),
                            YearId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9731),
                            English = "SelectBox",
                            French = "SelectBox",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9732),
                            YearId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9734),
                            English = "CheckBox",
                            French = "CheckBox",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9736),
                            YearId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9738),
                            English = "DatePicker",
                            French = "DatePicker",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9740),
                            YearId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9741),
                            English = "NumberBox",
                            French = "NumberBox",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9743),
                            YearId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9744),
                            English = "RadioButtons",
                            French = "RadioButtons",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9746),
                            YearId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9748),
                            English = "RadioMatrix",
                            French = "RadioMatrix",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9750),
                            YearId = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9751),
                            English = "TextArea",
                            French = "TextArea",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 748, DateTimeKind.Local).AddTicks(9753),
                            YearId = 1
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .HasColumnType("bit");

                    b.Property<bool?>("BritishColumbia")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdminLink")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCoordinatorLink")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTeacherLink")
                        .HasColumnType("bit");

                    b.Property<bool?>("Manitoba")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("NewBrunswick")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewYork")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .HasColumnType("bit");

                    b.Property<bool?>("NorthwestTerritories")
                        .HasColumnType("bit");

                    b.Property<bool?>("NovaScotia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nunavut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ontario")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .HasColumnType("bit");

                    b.Property<bool?>("Quebec")
                        .HasColumnType("bit");

                    b.Property<bool?>("Saskatchewan")
                        .HasColumnType("bit");

                    b.Property<short>("Sequence")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<bool?>("YukonTerritory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Links", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.LookupSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("LookupSets", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4725),
                            LookupName = "YesNo",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4735),
                            YearId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4738),
                            LookupName = "YesNoDontKnow",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4740),
                            YearId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4742),
                            LookupName = "GoodAvgPoorDontKnow",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4743),
                            YearId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4745),
                            LookupName = "OftenSometimesNeverDontKnow",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4747),
                            YearId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4748),
                            LookupName = "ObservedDiagnosisBoth",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4750),
                            YearId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4752),
                            LookupName = "FullPartDontknowNO",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4754),
                            YearId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4756),
                            LookupName = "Status",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4757),
                            YearId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4759),
                            LookupName = "ClassAssignment",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4760),
                            YearId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4762),
                            LookupName = "ClassType",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4764),
                            YearId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4776),
                            LookupName = "Gender",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4778),
                            YearId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4780),
                            LookupName = "ConsideredESL",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4781),
                            YearId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4783),
                            LookupName = "EthnicStatus",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4784),
                            YearId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4786),
                            LookupName = "NWTLanguages",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4787),
                            YearId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4790),
                            LookupName = "LandAgreements",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4792),
                            YearId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4794),
                            LookupName = "Languages",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4795),
                            YearId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4797),
                            LookupName = "SpecialProblems",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4799),
                            YearId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4800),
                            LookupName = "MainCare",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4812),
                            YearId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4814),
                            LookupName = "MainCareJK",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4816),
                            YearId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4818),
                            LookupName = "Participation",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4828),
                            YearId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4830),
                            LookupName = "AgeRange",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4832),
                            YearId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4834),
                            LookupName = "TeacherGender",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4835),
                            YearId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4840),
                            LookupName = "VerySomewhatNot",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4842),
                            YearId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4843),
                            LookupName = "GuideUsefulness",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4845),
                            YearId = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4847),
                            LookupName = "ClassAssignmentNS",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4848),
                            YearId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4850),
                            LookupName = "ClassTypeNS",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4851),
                            YearId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4853),
                            LookupName = "StatusNS",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4855),
                            YearId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4856),
                            LookupName = "EFSL",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4858),
                            YearId = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4926),
                            LookupName = "CareArrangement",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4929),
                            YearId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4931),
                            LookupName = "Transportation",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4932),
                            YearId = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4934),
                            LookupName = "ClassAssignmentON",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4936),
                            YearId = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4938),
                            LookupName = "ClassTypeON",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4939),
                            YearId = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4941),
                            LookupName = "FullPartDontknow",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4942),
                            YearId = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4944),
                            LookupName = "RaceEthnicity",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4955),
                            YearId = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4956),
                            LookupName = "ClassTime",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4958),
                            YearId = 1
                        },
                        new
                        {
                            Id = 69,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4960),
                            LookupName = "Education",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4961),
                            YearId = 2
                        },
                        new
                        {
                            Id = 70,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4963),
                            LookupName = "YesNoWellBeing",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4964),
                            YearId = 2
                        },
                        new
                        {
                            Id = 71,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4966),
                            LookupName = "NegativePositive",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4968),
                            YearId = 2
                        },
                        new
                        {
                            Id = 72,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4970),
                            LookupName = "BetterWorse",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4972),
                            YearId = 2
                        },
                        new
                        {
                            Id = 73,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4973),
                            LookupName = "InstructionFormat",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4975),
                            YearId = 2
                        },
                        new
                        {
                            Id = 74,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4977),
                            LookupName = "OnlineChallenges",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4978),
                            YearId = 2
                        },
                        new
                        {
                            Id = 75,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4980),
                            LookupName = "ELL",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4981),
                            YearId = 2
                        },
                        new
                        {
                            Id = 119,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4983),
                            LookupName = "TimesCompleted",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4984),
                            YearId = 3
                        },
                        new
                        {
                            Id = 120,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4986),
                            LookupName = "YesNoDidntUse",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4988),
                            YearId = 3
                        },
                        new
                        {
                            Id = 121,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4989),
                            LookupName = "NFLDLanguageStatus",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4991),
                            YearId = 3
                        },
                        new
                        {
                            Id = 122,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4993),
                            LookupName = "LanguageImmersion",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(4994),
                            YearId = 3
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.LookupSetOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("French")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LookupSetId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Sequence")
                        .HasColumnType("smallint");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LookupSetId");

                    b.HasIndex("YearId");

                    b.ToTable("LookupSetOptions", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 281,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5532),
                            English = "Multiracial",
                            French = "Multiracial",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5539),
                            Sequence = (short)10,
                            Value = (short)1
                        },
                        new
                        {
                            Id = 282,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5541),
                            English = "American Indian/Alaskan Native",
                            French = "American Indian/Alaskan Native",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5542),
                            Sequence = (short)20,
                            Value = (short)2
                        },
                        new
                        {
                            Id = 283,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5544),
                            English = "African American/Black",
                            French = "African American/Black",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5546),
                            Sequence = (short)30,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 284,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5548),
                            English = "Asian",
                            French = "Asian",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5549),
                            Sequence = (short)40,
                            Value = (short)4
                        },
                        new
                        {
                            Id = 285,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5551),
                            English = "Native Hawaiian or other Pacific Islander",
                            French = "Native Hawaiian or other Pacific Islander",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5552),
                            Sequence = (short)50,
                            Value = (short)5
                        },
                        new
                        {
                            Id = 286,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5554),
                            English = "Hispanic, Latino/a",
                            French = "Hispanic, Latino/a",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5555),
                            Sequence = (short)60,
                            Value = (short)6
                        },
                        new
                        {
                            Id = 287,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5557),
                            English = "White",
                            French = "White",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5559),
                            Sequence = (short)70,
                            Value = (short)7
                        },
                        new
                        {
                            Id = 288,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5561),
                            English = "Other",
                            French = "Other",
                            LookupSetId = 33,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5563),
                            Sequence = (short)80,
                            Value = (short)8
                        },
                        new
                        {
                            Id = 289,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5564),
                            English = "AM",
                            French = "AM",
                            LookupSetId = 34,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5566),
                            Sequence = (short)10,
                            Value = (short)1
                        },
                        new
                        {
                            Id = 290,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5568),
                            English = "PM",
                            French = "PM",
                            LookupSetId = 34,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5569),
                            Sequence = (short)20,
                            Value = (short)2
                        },
                        new
                        {
                            Id = 291,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5571),
                            English = "All Day",
                            French = "All Day",
                            LookupSetId = 34,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5572),
                            Sequence = (short)30,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 292,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5574),
                            English = "Other",
                            French = "Other",
                            LookupSetId = 34,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5576),
                            Sequence = (short)40,
                            Value = (short)4
                        },
                        new
                        {
                            Id = 585,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5578),
                            English = "Some coursework towards a Bachelor's degree",
                            French = "Quelques cours en vue de l'obtention d'un baccalauréat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5579),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 586,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5581),
                            English = "Teaching certificate, diploma, or license",
                            French = "Un certi􀁼cat, un diplômeu une license d'enseignement",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5582),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 587,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5584),
                            English = "Bachelor's degree",
                            French = "Un baccalauréat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5585),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 588,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5587),
                            English = "Bachelor of Education degree",
                            French = "Un baccalauréat en éducation",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5589),
                            Sequence = (short)40,
                            Value = (short)4,
                            YearId = 2
                        },
                        new
                        {
                            Id = 589,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5591),
                            English = "Some post-baccalaureate coursework",
                            French = "Quelques cours après le baccalauréat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5592),
                            Sequence = (short)50,
                            Value = (short)5,
                            YearId = 2
                        },
                        new
                        {
                            Id = 590,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5594),
                            English = "Post-baccalaureate diploma or certificate",
                            French = "Un diplômeu un certi􀁼cat supérieur au baccalauréat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5595),
                            Sequence = (short)60,
                            Value = (short)6,
                            YearId = 2
                        },
                        new
                        {
                            Id = 591,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5597),
                            English = "Some coursework towards a Master's degree",
                            French = "Quelques cours en vue de l'obtention d'une maîtrise",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5598),
                            Sequence = (short)70,
                            Value = (short)7,
                            YearId = 2
                        },
                        new
                        {
                            Id = 592,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5601),
                            English = "Master's degree",
                            French = "Une maîtrise",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5602),
                            Sequence = (short)80,
                            Value = (short)8,
                            YearId = 2
                        },
                        new
                        {
                            Id = 593,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5604),
                            English = "Some coursework towards a Doctorate",
                            French = "Quelques cours en vue de l'obtention d'un doctorat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5606),
                            Sequence = (short)90,
                            Value = (short)9,
                            YearId = 2
                        },
                        new
                        {
                            Id = 594,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5608),
                            English = "Doctorate",
                            French = "Un doctorat",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5609),
                            Sequence = (short)100,
                            Value = (short)10,
                            YearId = 2
                        },
                        new
                        {
                            Id = 595,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5611),
                            English = "Other",
                            French = "Autre",
                            LookupSetId = 69,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5612),
                            Sequence = (short)110,
                            Value = (short)11,
                            YearId = 2
                        },
                        new
                        {
                            Id = 596,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5615),
                            English = "Yes",
                            French = "Oui",
                            LookupSetId = 70,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5616),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 597,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5629),
                            English = "No - my overall well-being was about the same",
                            French = "Non, mon bien-être général fut à peu près pareil",
                            LookupSetId = 70,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5631),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 598,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5633),
                            English = "Negatively",
                            French = "Négativement",
                            LookupSetId = 71,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5634),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 599,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5636),
                            English = "Somewhat negatively",
                            French = "Un peu négativement",
                            LookupSetId = 71,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5637),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 600,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5639),
                            English = "Both negatively and positively",
                            French = "Négativement et positivement",
                            LookupSetId = 71,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5641),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 601,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5643),
                            English = "Somewhat positively",
                            French = "Un peu positivement",
                            LookupSetId = 71,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5644),
                            Sequence = (short)40,
                            Value = (short)4,
                            YearId = 2
                        },
                        new
                        {
                            Id = 602,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5646),
                            English = "Positively",
                            French = "Positivement",
                            LookupSetId = 71,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5647),
                            Sequence = (short)50,
                            Value = (short)5,
                            YearId = 2
                        },
                        new
                        {
                            Id = 603,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5659),
                            English = "Much better than earlier cohorts",
                            French = "Beaucoup meilleures que les cohortes précédentes",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5660),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 604,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5662),
                            English = "Better than earlier cohorts",
                            French = "Meilleures que les cohortes précédentes",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5664),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 605,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5665),
                            English = "About the same",
                            French = "À peu près pareilles",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5667),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 606,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5669),
                            English = "Lower than earlier cohorts",
                            French = "Moins bonnes que les cohortes précédentes",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5670),
                            Sequence = (short)40,
                            Value = (short)4,
                            YearId = 2
                        },
                        new
                        {
                            Id = 607,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5672),
                            English = "Much lower than earlier cohorts",
                            French = "Beaucoup moins bonnes que les cohortes précédentes",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5673),
                            Sequence = (short)50,
                            Value = (short)5,
                            YearId = 2
                        },
                        new
                        {
                            Id = 608,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5675),
                            English = "Don't know ",
                            French = "Je ne le sais [as",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5677),
                            Sequence = (short)60,
                            Value = (short)6,
                            YearId = 2
                        },
                        new
                        {
                            Id = 609,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5679),
                            English = "Not applicable",
                            French = "Not applicable",
                            LookupSetId = 72,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5681),
                            Sequence = (short)70,
                            Value = (short)7,
                            YearId = 2
                        },
                        new
                        {
                            Id = 610,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5683),
                            English = "All in person, normal school hours",
                            French = "En présentiel avec un nombre d'heures de classe normal",
                            LookupSetId = 73,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5685),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 611,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5688),
                            English = "Hybrid instruction, some in person, some online instruction",
                            French = "Format hybride avec un certain montant d'enseignement en présentiel et d'autre en virtuel",
                            LookupSetId = 73,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5690),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 612,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5691),
                            English = "All online instruction, regular online meetings with students (daily or weekly)",
                            French = "Enseignement virtuel avec des rencontres quotidiennes ou hebdomadaires en ligne avec les élèves",
                            LookupSetId = 73,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5693),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 613,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5697),
                            English = "All online, independent study student/family paced, no regular virtual meetings",
                            French = "Enseignement virtuel asynchrone, au rythme de l'élève/la famille, aucune rencontre en ligne sur une base régulière",
                            LookupSetId = 73,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5699),
                            Sequence = (short)40,
                            Value = (short)4,
                            YearId = 2
                        },
                        new
                        {
                            Id = 614,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5701),
                            English = "Other",
                            French = "Autre",
                            LookupSetId = 73,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5702),
                            Sequence = (short)50,
                            Value = (short)5,
                            YearId = 2
                        },
                        new
                        {
                            Id = 615,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5704),
                            English = "Not applicable (no online learning took place or child opted out all together)",
                            French = "Not applicable (no online learning took place or child opted out all together)",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5705),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 616,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5707),
                            English = "Limited or no internet access",
                            French = "Limited or no internet access",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5709),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 617,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5710),
                            English = "Limited technology availability (computer/laptop/other devices not owned or being used by parent/siblings)",
                            French = "Limited technology availability (computer/laptop/other devices not owned or being used by parent/siblings)",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5712),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 618,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5714),
                            English = "No adult available to support the child during instruction time",
                            French = "No adult available to support the child during instruction time",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5715),
                            Sequence = (short)40,
                            Value = (short)4,
                            YearId = 2
                        },
                        new
                        {
                            Id = 619,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5717),
                            English = "Child uninterested in participating/short attention span",
                            French = "Child uninterested in participating/short attention span",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5718),
                            Sequence = (short)50,
                            Value = (short)5,
                            YearId = 2
                        },
                        new
                        {
                            Id = 620,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5721),
                            English = "Child did not have setting/space appropriate for learning",
                            French = "Child did not have setting/space appropriate for learning",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5722),
                            Sequence = (short)60,
                            Value = (short)6,
                            YearId = 2
                        },
                        new
                        {
                            Id = 621,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5725),
                            English = "Child did not have access to needed school supplies (other than technology) to fully participate in activities",
                            French = "Child did not have access to needed school supplies (other than technology) to fully participate in activities",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5726),
                            Sequence = (short)70,
                            Value = (short)7,
                            YearId = 2
                        },
                        new
                        {
                            Id = 622,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5728),
                            English = "Other",
                            French = "Autre",
                            LookupSetId = 74,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5729),
                            Sequence = (short)80,
                            Value = (short)8,
                            YearId = 2
                        },
                        new
                        {
                            Id = 623,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5731),
                            English = "ELL",
                            French = "ELL",
                            LookupSetId = 75,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5733),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 2
                        },
                        new
                        {
                            Id = 624,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5735),
                            English = "FLL",
                            French = "FLL",
                            LookupSetId = 75,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5736),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 2
                        },
                        new
                        {
                            Id = 625,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5738),
                            English = "No",
                            French = "No",
                            LookupSetId = 75,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5739),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 2
                        },
                        new
                        {
                            Id = 965,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5741),
                            English = "No previous experience",
                            French = " No previous experience",
                            LookupSetId = 119,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5742),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 3
                        },
                        new
                        {
                            Id = 966,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5744),
                            English = "1-2 times",
                            French = "1-2 times",
                            LookupSetId = 119,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5746),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 3
                        },
                        new
                        {
                            Id = 967,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5748),
                            English = "3 or more times",
                            French = "3 or more times",
                            LookupSetId = 119,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5749),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 3
                        },
                        new
                        {
                            Id = 968,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5751),
                            English = "Yes",
                            French = "Oui",
                            LookupSetId = 120,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5752),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 3
                        },
                        new
                        {
                            Id = 969,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5754),
                            English = "No",
                            French = "Non",
                            LookupSetId = 120,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5755),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 3
                        },
                        new
                        {
                            Id = 970,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5757),
                            English = "Didn't Use",
                            French = "Didn't Use",
                            LookupSetId = 120,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5759),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 3
                        },
                        new
                        {
                            Id = 971,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5761),
                            English = "ESL",
                            French = "ESL",
                            LookupSetId = 121,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5762),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 3
                        },
                        new
                        {
                            Id = 972,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5803),
                            English = "FSL",
                            French = "FSL",
                            LookupSetId = 121,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5805),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 3
                        },
                        new
                        {
                            Id = 973,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5807),
                            English = "No",
                            French = "Non",
                            LookupSetId = 121,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5809),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 3
                        },
                        new
                        {
                            Id = 974,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5810),
                            English = "French Immersion",
                            French = "French Immersion",
                            LookupSetId = 122,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5812),
                            Sequence = (short)10,
                            Value = (short)1,
                            YearId = 3
                        },
                        new
                        {
                            Id = 975,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5814),
                            English = "Other Immersion",
                            French = "Other Immersion",
                            LookupSetId = 122,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5815),
                            Sequence = (short)20,
                            Value = (short)2,
                            YearId = 3
                        },
                        new
                        {
                            Id = 976,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5817),
                            English = "No",
                            French = "Non",
                            LookupSetId = 122,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(5819),
                            Sequence = (short)30,
                            Value = (short)3,
                            YearId = 3
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.MenuConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("English")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("ForAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("ForCoordinator")
                        .HasColumnType("bit");

                    b.Property<bool>("ForTeacher")
                        .HasColumnType("bit");

                    b.Property<string>("French")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("HasChild")
                        .HasColumnType("bit");

                    b.Property<string>("IconCss")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NodeId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PID")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("URL")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuConfigurations");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.NewsFeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .HasColumnType("bit");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BritishColumbia")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Manitoba")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NewBrunswick")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewYork")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .HasColumnType("bit");

                    b.Property<bool?>("NorthwestTerritories")
                        .HasColumnType("bit");

                    b.Property<bool?>("NovaScotia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nunavut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ontario")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .HasColumnType("bit");

                    b.Property<bool?>("Quebec")
                        .HasColumnType("bit");

                    b.Property<bool?>("Saskatchewan")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<bool?>("YukonTerritory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("NewsFeed", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Orientation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("French")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Orientations", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(7583),
                            English = "Horizontal",
                            French = "Horizontal",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(7593),
                            YearId = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(7596),
                            English = "Vertical",
                            French = "Vertical",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 749, DateTimeKind.Local).AddTicks(7597),
                            YearId = 1
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("EDICode")
                        .HasColumnType("tinyint");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("French")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProvinceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("ProvinceTypeId");

                    b.HasIndex("YearId");

                    b.ToTable("Provinces", "LUData");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.ProvinceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProvinceType", "LUData");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .HasColumnType("bit");

                    b.Property<bool?>("BritishColumbia")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFrench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("French")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChildQuestionnaire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeacherQuestionnaire")
                        .HasColumnType("bit");

                    b.Property<bool?>("Manitoba")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NewBrunswick")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewYork")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .HasColumnType("bit");

                    b.Property<bool?>("NorthwestTerritories")
                        .HasColumnType("bit");

                    b.Property<bool?>("NovaScotia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nunavut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ontario")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .HasColumnType("bit");

                    b.Property<bool?>("Quebec")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionnaireName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestionsRequired")
                        .HasColumnType("int");

                    b.Property<bool?>("Saskatchewan")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool?>("ShowProgressBar")
                        .HasColumnType("bit")
                        .HasComment("Answered x of y Questions");

                    b.Property<bool?>("ShowQuestionNumbers")
                        .HasColumnType("bit");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<bool?>("YukonTerritory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires", "EDI");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1108),
                            DescriptionEnglish = "Teacher Feedback",
                            DescriptionFrench = "Teacher Feedback",
                            English = "Teacher Feedback",
                            EntityName = "Questionnaires.Data.TeacherProfile",
                            French = "Teacher Feedback",
                            IsChildQuestionnaire = false,
                            IsTeacherQuestionnaire = true,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1127),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true,
                            QuestionnaireName = "Teacher Feedback",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1136),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1138),
                            NorthwestTerritories = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1141),
                            DescriptionEnglish = "Section A",
                            DescriptionFrench = "Section A",
                            English = "Section A",
                            EntityName = "Questionnaires.Data.SectionA",
                            French = "Section A",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1143),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true,
                            QuestionnaireName = "Section A",
                            QuestionsRequired = 0,
                            Sequence = 20,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1146),
                            DescriptionEnglish = "Section B",
                            DescriptionFrench = "Section B",
                            English = "Section B",
                            EntityName = "Questionnaires.Data.SectionB",
                            French = "Section B",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1148),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true,
                            QuestionnaireName = "Section B",
                            QuestionsRequired = 0,
                            Sequence = 30,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1152),
                            DescriptionEnglish = "Section C",
                            DescriptionFrench = "Section C",
                            English = "Section C",
                            EntityName = "Questionnaires.Data.SectionC",
                            French = "Section C",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1153),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true,
                            QuestionnaireName = "Section C",
                            QuestionsRequired = 0,
                            Sequence = 40,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1197),
                            DescriptionEnglish = "Section D",
                            DescriptionFrench = "Section D",
                            English = "Section D",
                            EntityName = "Questionnaires.Data.SectionD",
                            French = "Section D",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1199),
                            NorthwestTerritories = true,
                            QuestionnaireName = "Section D",
                            QuestionsRequired = 0,
                            Sequence = 50,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1203),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1205),
                            NorthwestTerritories = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1208),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1209),
                            NovaScotia = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1213),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1214),
                            NovaScotia = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1217),
                            DescriptionEnglish = "Section D",
                            DescriptionFrench = "Section D",
                            English = "Section D",
                            EntityName = "Questionnaires.Data.SectionD",
                            French = "Section D",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1219),
                            NewYork = true,
                            NovaScotia = true,
                            Ontario = true,
                            QuestionnaireName = "Section D",
                            QuestionsRequired = 0,
                            Sequence = 50,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1223),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1224),
                            Ontario = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1227),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1229),
                            Ontario = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1232),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1233),
                            NewYork = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1236),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1238),
                            NewYork = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1274),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1276),
                            NewfoundlandandLabrador = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 2
                        },
                        new
                        {
                            Id = 30,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1280),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1281),
                            NewfoundlandandLabrador = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 2
                        },
                        new
                        {
                            Id = 31,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1284),
                            DescriptionEnglish = "Demographics",
                            DescriptionFrench = "Demographics",
                            English = "Demographics",
                            EntityName = "Questionnaires.Data.Demographics",
                            French = "Demographics",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1286),
                            PrinceEdwardIsland = true,
                            QuestionnaireName = "Demographics",
                            QuestionsRequired = 0,
                            Sequence = 10,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 2
                        },
                        new
                        {
                            Id = 32,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1289),
                            DescriptionEnglish = "Section E",
                            DescriptionFrench = "Section E",
                            English = "Section E",
                            EntityName = "Questionnaires.Data.SectionE",
                            French = "Section E",
                            IsChildQuestionnaire = true,
                            IsTeacherQuestionnaire = false,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 751, DateTimeKind.Local).AddTicks(1291),
                            PrinceEdwardIsland = true,
                            QuestionnaireName = "Section E",
                            QuestionsRequired = 0,
                            Sequence = 60,
                            ShowProgressBar = true,
                            ShowQuestionNumbers = true,
                            YearId = 2
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("BritishColumbia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("ColumnSpan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("Columns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((10))");

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('Renner')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityField")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("French")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasHelp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("HasLookupEntity")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasNotification")
                        .HasColumnType("bit");

                    b.Property<string>("HelpTextEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpTextFrench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCollapsible")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConditional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupEntity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LookupEntityId")
                        .HasColumnType("int");

                    b.Property<bool?>("Manitoba")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Mask")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<byte?>("MaxLength")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('Renner')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("NewBrunswick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("NewYork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("NorthwestTerritories")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationCondition")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NotificationFrench")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NovaScotia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NumberFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NumberStep")
                        .HasColumnType("float");

                    b.Property<bool?>("Nunavut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Ontario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("OrientationId")
                        .HasColumnType("int");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Quebec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QuestionNumber")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<bool?>("Saskatchewan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool>("ShowGroupName")
                        .HasColumnType("bit");

                    b.Property<string>("VariableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Variable Name for data dictionary");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.Property<bool?>("YukonTerritory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("InputTypeId");

                    b.HasIndex("LookupEntityId");

                    b.HasIndex("OrientationId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Configuration", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataDemographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("AboriginalStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AfricanDescent")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AttendedJk")
                        .HasColumnType("tinyint");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<bool?>("Chipewyan")
                        .HasColumnType("bit");

                    b.Property<byte?>("ClassAssignment")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ClassTime")
                        .HasColumnType("tinyint");

                    b.Property<string>("ClassTimeSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("ClassType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Communicates")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("ConsideredEsl")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Cree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("smalldatetime");

                    b.Property<byte?>("EFSL")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ELL")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("English")
                        .HasColumnType("bit");

                    b.Property<byte?>("EthnicStatus")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Ethnicity")
                        .HasColumnType("int");

                    b.Property<int?>("FirstLanguage1")
                        .HasColumnType("int");

                    b.Property<int?>("FirstLanguage2")
                        .HasColumnType("int");

                    b.Property<int?>("FirstLanguage3")
                        .HasColumnType("int");

                    b.Property<bool?>("French")
                        .HasColumnType("bit");

                    b.Property<byte?>("FrenchImmersion")
                        .HasColumnType("tinyint");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("Gifted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gwichin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IEP")
                        .HasColumnType("bit");

                    b.Property<bool?>("IPRC")
                        .HasColumnType("bit");

                    b.Property<byte?>("Immigrated")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IndigenousAncestry")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("InstructionFormat")
                        .HasColumnType("tinyint");

                    b.Property<string>("InstructionFormatSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inuinnaqtun")
                        .HasColumnType("bit");

                    b.Property<bool?>("Inuktitut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Inuvialuktun")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Jkteacher")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("LandAgreement")
                        .HasColumnType("tinyint");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte?>("LanguageImmersion")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("NorthSlavey")
                        .HasColumnType("bit");

                    b.Property<byte?>("OnlineChallenges")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("OnlineChallengesLimitedTech")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesNA")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesNoAdultSupport")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesNoInternet")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesNoLearningSpace")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesNoSupplies")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlineChallengesOther")
                        .HasColumnType("bit");

                    b.Property<string>("OnlineChallengesSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnlineChallengesUninterested")
                        .HasColumnType("bit");

                    b.Property<byte?>("OtherImmersion")
                        .HasColumnType("tinyint");

                    b.Property<int?>("OtherLanguage")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<bool?>("SouthSlavey")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpecialEducation")
                        .HasColumnType("bit");

                    b.Property<byte?>("SpecialNeeds")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialNeedsReferral")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("StudentStatus")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Tlicho")
                        .HasColumnType("bit");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("GenderId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.Demographics", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<byte?>("ClimbingStairs")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Coordinated")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("Energy")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HandPreference")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Holding")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Hungry")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte?>("Late")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Manipulating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("PhysicalDevelopment")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("Tired")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("UnderDressed")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WashroomHabits")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.SectionA", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("Articulates")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Bigger")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Books")
                        .HasColumnType("tinyint");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<byte?>("Communicates")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("ComplexWords")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Count20")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Effective")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("GroupReading")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Handles")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Imagines")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LanguageCompleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Letters10")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Listens")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Mathematics")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("NumberGames")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("OneToOne")
                        .HasColumnType("tinyint");

                    b.Property<string>("OtherSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<byte?>("Reading")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Recognize10")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Remembers")
                        .HasColumnType("tinyint");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("Rhyming")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Shapes")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SimpleSentences")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SimpleWords")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Sorting")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Sounds")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialArtSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialAthSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialLitSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialMusSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialNumSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialOthSkills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialPblskills")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Tells")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TimeConcepts")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Understands")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Voluntarily")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WriteSimpleSentences")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WriteSimpleWords")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WritesName")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Writing")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WritingDirections")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.SectionB", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("AnswersQuestions")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AssistOthers")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Bullies")
                        .HasColumnType("tinyint");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<byte?>("Comforting")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Cooperative")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Cries")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Curious")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Directions")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Disobedient")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Distactable")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EagerNewGame")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EagerNewToy")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EagerRead")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Fearful")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Fidgets")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Fights")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("FollowInstruction1Step")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HelpHurt")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HelpPickUpObjects")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("HelpSick")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Impulsive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Inattentive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IncludesOthers")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Independent")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("KicksHits")
                        .HasColumnType("tinyint");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte?>("LaughsAtOthers")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Listens")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Mediate")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MessCleanup")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Neat")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Nervous")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NoDecisions")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Peers")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Play")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("RespectsAdults")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RespectsChildren")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RespectsProperty")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Responsible")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Restless")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RoutineChanges")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Routines")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Rules")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SelfConfidence")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SelfControl")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Separation")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Settle")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Shy")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Social")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SolvesProblem")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SucksThumb")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Takes")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TakesCard")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TakingTurns")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Temper")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Tolerance")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Unhappy")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WorkOnTime")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Worried")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.SectionC", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssessSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Behavioural")
                        .HasColumnType("tinyint");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<byte?>("Chronic")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Dental")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Emotional")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Further")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Hearing")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Language")
                        .HasColumnType("tinyint");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte?>("Learning")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("NeedsAssess")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Other")
                        .HasColumnType("tinyint");

                    b.Property<string>("OtherSpecialProblem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Physical")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Problem")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("SpecialProblem1")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialProblem2")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpecialProblem3")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Speech")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Support")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Visual")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WaitList")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.SectionD", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("AttendedNature")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Birth1")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("CareArrangementAfter")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("CareArrangementBefore")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("CentreBased")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("CentreBasedCare")
                        .HasColumnType("bit");

                    b.Property<bool?>("CentreBasedCommunity")
                        .HasColumnType("bit");

                    b.Property<bool?>("CentreBasedSchool")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChildHomeNonRelative")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChildHomeRelative")
                        .HasColumnType("bit");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<byte?>("Clubs")
                        .HasColumnType("tinyint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("CommunityLearning")
                        .HasColumnType("tinyint");

                    b.Property<string>("CommunityLearningSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("Cultural")
                        .HasColumnType("tinyint");

                    b.Property<string>("DaycareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("DroppedOff")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EIBI")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("FamilyLiteracy")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("FamilyResource")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Four5")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("HomeBased")
                        .HasColumnType("bit");

                    b.Property<byte?>("HomeDaycare")
                        .HasColumnType("tinyint");

                    b.Property<string>("HomeDaycareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("HomeworkAssistance")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("InterventionProgram")
                        .HasColumnType("tinyint");

                    b.Property<string>("InterventionProgramSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("Langauges")
                        .HasColumnType("tinyint");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte?>("LibraryReading")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("MusicArts")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NSECDIS")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NSHS")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NonParentCareAfter")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NonParentCareBefore")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NonParentInHome")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NonParentalCare")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("One2")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("OneOnOneConference")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("OrganizedPreSchool")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Other")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("OtherCare")
                        .HasColumnType("bit");

                    b.Property<byte?>("OtherServices")
                        .HasColumnType("tinyint");

                    b.Property<string>("OtherServicesSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("ParentTeacherConference")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PickedUp")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("PrePrimary")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("PreSchool")
                        .HasColumnType("bit");

                    b.Property<byte?>("PriorArrangement")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<byte?>("Religion")
                        .HasColumnType("tinyint");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("Sports")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Three4")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Two3")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("US_CentreBased")
                        .HasColumnType("bit");

                    b.Property<bool?>("US_ChildHome")
                        .HasColumnType("bit");

                    b.Property<bool?>("US_DontKnow")
                        .HasColumnType("bit");

                    b.Property<bool?>("US_Other")
                        .HasColumnType("bit");

                    b.Property<bool?>("US_OtherHomeBased")
                        .HasColumnType("bit");

                    b.Property<string>("US_OtherSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Volunteered")
                        .HasColumnType("tinyint");

                    b.Property<string>("VolunteeredSpecify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Year1JK")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.SectionE", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataTeacherProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("AgeCategory")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompletedQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("EducationBachelorDegree")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationBachelorEducationDegree")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationMastersCourses")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationMastersDegree")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationOther")
                        .HasColumnType("tinyint");

                    b.Property<string>("EducationOtherComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("EducationPhd")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationPhdcourses")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationPostBachelorCertificate")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationPostBachelorCourses")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationSomeCoursesBachelors")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EducationTeachingCertificate")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ExperienceGradeInYears")
                        .HasColumnType("smallint");

                    b.Property<short?>("ExperienceInYears")
                        .HasColumnType("smallint");

                    b.Property<short?>("ExperienceSchoolInYears")
                        .HasColumnType("smallint");

                    b.Property<byte?>("FirstTimeCompletingEdi")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("GuideOtherComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("GuideUsefulness")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ImpactedWellBeing")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LanguageCompleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("('admin')");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("PreviouslyAttendedTeacherTraining")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuestions")
                        .HasColumnType("int");

                    b.Property<byte?>("SkillsAcademic")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SkillsOverall")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SkillsPhysical")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SkillsSocioEmotional")
                        .HasColumnType("tinyint");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<byte?>("TeacherTrainingForThisImplementation")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TeacherTrainingUsefulness")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TimesAttendedTeacherTraining")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TimesCompletedEdi")
                        .HasColumnType("tinyint");

                    b.Property<string>("TrainingOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("VideoUsefulness")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WellBeing")
                        .HasColumnType("tinyint");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearId");

                    b.ToTable("Questionnaires.Data.TeacherProfile", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SchoolNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasComment("Year of the EDI implementation");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SiteId");

                    b.HasIndex("YearId");

                    b.ToTable("Schools", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CoordinatorId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsTestSite")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SiteNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasComment("Year of the EDI implementation");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("YearId");

                    b.ToTable("Sites", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.SystemConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigurations", "dbo");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeacherNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("TeacherStatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Links to user in EDI.Identity database");

                    b.Property<int?>("YearId")
                        .HasColumnType("int")
                        .HasComment("Year of the EDI implementation");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherStatusId");

                    b.HasIndex("YearId");

                    b.ToTable("Teachers", "EDI");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.TeacherStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("French")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeacherStatus", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9217),
                            English = "New",
                            French = "Nouveau",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9237),
                            Sequence = 1
                        },
                        new
                        {
                            Id = 1,
                            Code = "2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9240),
                            English = "In Progress",
                            French = "En cours",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9242),
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9244),
                            English = "Complete",
                            French = "Achevé",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9245),
                            Sequence = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9247),
                            English = "Locked",
                            French = "Fermé à clé",
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 753, DateTimeKind.Local).AddTicks(9249),
                            Sequence = 4
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("French")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Translations", "LUData");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.UserSessions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte[]>("FieldObject")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FieldValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSessions", "dbo");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Alberta")
                        .HasColumnType("bit");

                    b.Property<bool?>("BritishColumbia")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short?>("Ediyear")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Manitoba")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NewBrunswick")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewYork")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewfoundlandandLabrador")
                        .HasColumnType("bit");

                    b.Property<bool?>("NorthwestTerritories")
                        .HasColumnType("bit");

                    b.Property<bool?>("NovaScotia")
                        .HasColumnType("bit");

                    b.Property<bool?>("Nunavut")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ontario")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrinceEdwardIsland")
                        .HasColumnType("bit");

                    b.Property<bool?>("Quebec")
                        .HasColumnType("bit");

                    b.Property<bool?>("Saskatchewan")
                        .HasColumnType("bit");

                    b.Property<bool?>("YukonTerritory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Ediyear" }, "IX_Years")
                        .IsUnique()
                        .HasFilter("[Ediyear] IS NOT NULL");

                    b.ToTable("Years", "LUData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 756, DateTimeKind.Local).AddTicks(1483),
                            Ediyear = (short)2021,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 756, DateTimeKind.Local).AddTicks(1495),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2022, 12, 21, 15, 23, 10, 756, DateTimeKind.Local).AddTicks(1568),
                            Ediyear = (short)2022,
                            ModifiedBy = "admin",
                            ModifiedDate = new DateTime(2022, 12, 21, 15, 23, 10, 756, DateTimeKind.Local).AddTicks(1570),
                            NewYork = true,
                            NorthwestTerritories = true,
                            NovaScotia = true,
                            Ontario = true
                        });
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Child", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.ChildStatus", "ChildStatus")
                        .WithMany("Children")
                        .HasForeignKey("ChildStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ChildStatus_Children");

                    b.HasOne("EDI.ApplicationCore.Entities.Gender", "Gender")
                        .WithMany("Children")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Gender_Children");

                    b.HasOne("EDI.ApplicationCore.Entities.Teacher", "Teacher")
                        .WithMany("Children")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_Children");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Children")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_Years_Children");

                    b.Navigation("ChildStatus");

                    b.Navigation("Gender");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Coordinator", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Coordinators")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_Years_Coordinators");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Country", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Countries")
                        .HasForeignKey("YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Faq", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Faqs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_FAQ");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.FileImport", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.FileImportStatus", "FileImportStatus")
                        .WithMany("FileImports")
                        .HasForeignKey("FileImportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_FileImportStatus_FileImports");

                    b.HasOne("EDI.ApplicationCore.Entities.Gender", "Gender")
                        .WithMany("FileImports")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Gender_FileImports");

                    b.Navigation("FileImportStatus");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Gender", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Genders")
                        .HasForeignKey("YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.InputType", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("InputTypes")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_InputTypes");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Link", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Links")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_Links");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.LookupSet", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("LookupSets")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_LookupSets");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.LookupSetOption", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.LookupSet", "LookupSet")
                        .WithMany("LookupSetOptions")
                        .HasForeignKey("LookupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LookupSet_Lookup ");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("LookupSetOptions")
                        .HasForeignKey("YearId");

                    b.Navigation("LookupSet");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.NewsFeed", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("NewsFeeds")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_NewsFeeds");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Orientation", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Orientations")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Years_Orientations");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Province", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Country_Provinces");

                    b.HasOne("EDI.ApplicationCore.Entities.ProvinceType", "ProvinceType")
                        .WithMany("Provinces")
                        .HasForeignKey("ProvinceTypeId")
                        .HasConstraintName("FK_ProvinceType_Provinces");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Provinces")
                        .HasForeignKey("YearId");

                    b.Navigation("Country");

                    b.Navigation("ProvinceType");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Questionnaire", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Questionnaires")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Years_Questionnaires");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesConfiguration", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.InputType", "InputType")
                        .WithMany("QuestionnairesConfigurations")
                        .HasForeignKey("InputTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_InputType_QuestionnairesConfigurations");

                    b.HasOne("EDI.ApplicationCore.Entities.LookupSet", "LookupSet")
                        .WithMany("QuestionnairesConfigurations")
                        .HasForeignKey("LookupEntityId")
                        .HasConstraintName("FK_LookupSet_QuestionnaireConfiguration");

                    b.HasOne("EDI.ApplicationCore.Entities.Orientation", "Orientation")
                        .WithMany("QuestionnairesConfigurations")
                        .HasForeignKey("OrientationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Orientation_QuestionnairesConfigurations");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesConfigurations")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaire_QuestionnairesConfigurations");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesConfigurations")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Configurations");

                    b.Navigation("InputType");

                    b.Navigation("LookupSet");

                    b.Navigation("Orientation");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataDemographic", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataDemographics")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.Demographics");

                    b.HasOne("EDI.ApplicationCore.Entities.Gender", "Gender")
                        .WithMany("QuestionnairesDataDemographics")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Gender_QuestionnaireDemographics");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataDemographics")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.Demographics");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataDemographics")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.Demographics");

                    b.Navigation("Child");

                    b.Navigation("Gender");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionA", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataSectionAs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.SectionAs");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataSectionAs")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.SectionAs");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataSectionAs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.SectionA");

                    b.Navigation("Child");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionB", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataSectionBs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.SectionBs");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataSectionBs")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.SectionBs");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataSectionBs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.SectionB");

                    b.Navigation("Child");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionC", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataSectionCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.SectionCs");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataSectionCs")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.SectionCs");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataSectionCs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.SectionC");

                    b.Navigation("Child");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionD", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataSectionDs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.SectionDs");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataSectionDs")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.SectionDs");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataSectionDs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.SectionD");

                    b.Navigation("Child");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataSectionE", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Child", "Child")
                        .WithMany("QuestionnairesDataSectionEs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Children_Questionnaires.Data.SectionEs");

                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataSectionEs")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.SectionEs");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataSectionEs")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.SectionE");

                    b.Navigation("Child");

                    b.Navigation("Questionnaire");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.QuestionnairesDataTeacherProfile", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Questionnaire", "Questionnaire")
                        .WithMany("QuestionnairesDataTeacherProfiles")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Questionnaires_Questionnaires.Data.TeacherProfiles");

                    b.HasOne("EDI.ApplicationCore.Entities.Teacher", "Teacher")
                        .WithMany("QuestionnairesDataTeacherProfiles")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Teachers_QuestionnairesDataTeacherProfiles");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("QuestionnairesDataTeacherProfiles")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Years_Questionnaires.Data.TeacherProfile");

                    b.Navigation("Questionnaire");

                    b.Navigation("Teacher");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.School", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Country", "Country")
                        .WithMany("Schools")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Country_Schools");

                    b.HasOne("EDI.ApplicationCore.Entities.Province", "Province")
                        .WithMany("Schools")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK_Schools_Provinces");

                    b.HasOne("EDI.ApplicationCore.Entities.Site", "Site")
                        .WithMany("Schools")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sites_Schools");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Schools")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_Years_Schools");

                    b.Navigation("Country");

                    b.Navigation("Province");

                    b.Navigation("Site");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Site", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Coordinator", "Coordinator")
                        .WithMany("Sites")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Coordinators_Sites");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Sites")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Years_Sites");

                    b.Navigation("Coordinator");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Teacher", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Schools_Teachers");

                    b.HasOne("EDI.ApplicationCore.Entities.TeacherStatus", "TeacherStatus")
                        .WithMany("Teachers")
                        .HasForeignKey("TeacherStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TeacherStatus_Children");

                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Teachers")
                        .HasForeignKey("YearId")
                        .HasConstraintName("FK_Years_Teachers");

                    b.Navigation("School");

                    b.Navigation("TeacherStatus");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Translation", b =>
                {
                    b.HasOne("EDI.ApplicationCore.Entities.Year", "Year")
                        .WithMany("Translations")
                        .HasForeignKey("YearId");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Child", b =>
                {
                    b.Navigation("QuestionnairesDataDemographics");

                    b.Navigation("QuestionnairesDataSectionAs");

                    b.Navigation("QuestionnairesDataSectionBs");

                    b.Navigation("QuestionnairesDataSectionCs");

                    b.Navigation("QuestionnairesDataSectionDs");

                    b.Navigation("QuestionnairesDataSectionEs");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.ChildStatus", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Coordinator", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Country", b =>
                {
                    b.Navigation("Provinces");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.FileImportStatus", b =>
                {
                    b.Navigation("FileImports");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Gender", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FileImports");

                    b.Navigation("QuestionnairesDataDemographics");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.InputType", b =>
                {
                    b.Navigation("QuestionnairesConfigurations");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.LookupSet", b =>
                {
                    b.Navigation("LookupSetOptions");

                    b.Navigation("QuestionnairesConfigurations");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Orientation", b =>
                {
                    b.Navigation("QuestionnairesConfigurations");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Province", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.ProvinceType", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Questionnaire", b =>
                {
                    b.Navigation("QuestionnairesConfigurations");

                    b.Navigation("QuestionnairesDataDemographics");

                    b.Navigation("QuestionnairesDataSectionAs");

                    b.Navigation("QuestionnairesDataSectionBs");

                    b.Navigation("QuestionnairesDataSectionCs");

                    b.Navigation("QuestionnairesDataSectionDs");

                    b.Navigation("QuestionnairesDataSectionEs");

                    b.Navigation("QuestionnairesDataTeacherProfiles");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.School", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Site", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Teacher", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("QuestionnairesDataTeacherProfiles");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.TeacherStatus", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EDI.ApplicationCore.Entities.Year", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Coordinators");

                    b.Navigation("Countries");

                    b.Navigation("Faqs");

                    b.Navigation("Genders");

                    b.Navigation("InputTypes");

                    b.Navigation("Links");

                    b.Navigation("LookupSetOptions");

                    b.Navigation("LookupSets");

                    b.Navigation("NewsFeeds");

                    b.Navigation("Orientations");

                    b.Navigation("Provinces");

                    b.Navigation("Questionnaires");

                    b.Navigation("QuestionnairesConfigurations");

                    b.Navigation("QuestionnairesDataDemographics");

                    b.Navigation("QuestionnairesDataSectionAs");

                    b.Navigation("QuestionnairesDataSectionBs");

                    b.Navigation("QuestionnairesDataSectionCs");

                    b.Navigation("QuestionnairesDataSectionDs");

                    b.Navigation("QuestionnairesDataSectionEs");

                    b.Navigation("QuestionnairesDataTeacherProfiles");

                    b.Navigation("Schools");

                    b.Navigation("Sites");

                    b.Navigation("Teachers");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
