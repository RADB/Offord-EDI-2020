@page "/SpecialProblems/index"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ISpecialProblemService specialProblemService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IModalService Modal

<div class="row">
    <div class="col-md-6">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>SpecialProblems Management</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (specialProblems == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridSpecialProblem" @ref="Grid" DataSource="@specialProblems" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "CsvExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="SpecialProblemItemViewModel"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(SpecialProblemItemViewModel.Code) HeaderText="Code" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(SpecialProblemItemViewModel.English) HeaderText="English" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(SpecialProblemItemViewModel.French) HeaderText="French" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(SpecialProblemItemViewModel.Sequence) HeaderText="Sequence" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    SfGrid<SpecialProblemItemViewModel> Grid;

    IEnumerable<SpecialProblemItemViewModel> specialProblems;

    private string username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!user.IsInRole("Administrator"))
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            username = user.Identity.Name;

            var allspecialProblems = await Task.FromResult(dbContext.SpecialProblems.OrderBy(p => p.Code).ToList());

            List<SpecialProblemItemViewModel> sivm = new List<SpecialProblemItemViewModel>();

            foreach (var specialProblem in allspecialProblems)
            {
                var aspecialProblem = new SpecialProblemItemViewModel();

                aspecialProblem.Id = specialProblem.Id;
                aspecialProblem.Code = specialProblem.Code;
                aspecialProblem.English = specialProblem.English;
                aspecialProblem.French = specialProblem.French;
                aspecialProblem.Sequence = specialProblem.Sequence;

                sivm.Add(aspecialProblem);
            }

            this.rowid = 0;

            specialProblems = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<SpecialProblemItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    SpecialProblemItemViewModel SpecialProblemModel { get; set; }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridSpecialProblem_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridSpecialProblem_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridSpecialProblem_csvexport")
        {
            this.Grid.CsvExport();
        }
        if (args.Item.Id == "GridSpecialProblem_add")
        {
            SpecialProblemModel = new SpecialProblemItemViewModel();
            parameters.Add("SpecialProblemModel", SpecialProblemModel);

            Modal.Show<SpecialProblemWindow>("New EDI SpecialProblem", parameters);
            Modal.OnClose += NewWindowModalClosed;
        }
        if (args.Item.Id == "GridSpecialProblem_edit")
        {
            SpecialProblemModel = new SpecialProblemItemViewModel();
            var rowdata = this.specialProblems.Where(t => t.Id == rowid).FirstOrDefault();

            if (rowdata != null)
            {
                SpecialProblemModel.Code = rowdata.Code;
                SpecialProblemModel.English = rowdata.English;
                SpecialProblemModel.French = rowdata.French;
                SpecialProblemModel.Sequence = rowdata.Sequence;
                SpecialProblemModel.Id = rowdata.Id;
                parameters.Add("SpecialProblemModel", SpecialProblemModel);

                Modal.Show<SpecialProblemWindow>("Edit EDI SpecialProblem", parameters);
                Modal.OnClose += ExistWindowModalClosed;
            }
        }
        if (args.Item.Id == "GridSpecialProblem_delete")
        {
            Modal.Show<ConfirmDelete>("Confirm Delete");
            Modal.OnClose += ConfirmDeleteModalClosed;
        }
    }


    async void NewWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is SpecialProblemItemViewModel)
        {
            SpecialProblemModel = (SpecialProblemItemViewModel)modalResult.Data;

            var allspecialProblems = await Task.FromResult(dbContext.SpecialProblems.OrderBy(p => p.Code).ToList());

            List<SpecialProblemItemViewModel> sivm = new List<SpecialProblemItemViewModel>();

            foreach (var specialProblem in allspecialProblems)
            {
                var aspecialProblem = new SpecialProblemItemViewModel();

                aspecialProblem.Id = specialProblem.Id;
                aspecialProblem.Code = specialProblem.Code;
                aspecialProblem.English = specialProblem.English;
                aspecialProblem.French = specialProblem.French;
                aspecialProblem.Sequence = specialProblem.Sequence;

                sivm.Add(aspecialProblem);
            }

            specialProblems = sivm;
        }
        Modal.OnClose -= NewWindowModalClosed;
        this.Grid.Refresh();

        StateHasChanged();
        this.rowid = 0;
    }

    void ExistWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is SpecialProblemItemViewModel)
        {
            SpecialProblemModel = (SpecialProblemItemViewModel)modalResult.Data;

            var tmp = new List<SpecialProblemItemViewModel>();

            foreach (var item in this.specialProblems)
            {
                if (item.Id == SpecialProblemModel.Id)
                {
                    item.Code = SpecialProblemModel.Code;
                    item.English = SpecialProblemModel.English;
                    item.French = SpecialProblemModel.French;
                    item.Sequence = SpecialProblemModel.Sequence;
                }
                tmp.Add(item);
            }

            this.specialProblems = tmp;
        }
        Modal.OnClose -= ExistWindowModalClosed;

        this.rowid = 0;
        this.Grid.Refresh();

        StateHasChanged();
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await specialProblemService.DeleteSpecialProblemAsync(this.rowid);

            var tmp = new List<SpecialProblemItemViewModel>();
            foreach (var item in specialProblems)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.specialProblems = tmp;
            this.rowid = 0;

            this.Grid.Refresh();
            StateHasChanged();
        }

        Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<SpecialProblemItemViewModel> args)
    {
        var parameters = new ModalParameters();
        SpecialProblemModel = new SpecialProblemItemViewModel();
        var rowdata = this.specialProblems.Where(t => t.Id == rowid).FirstOrDefault();

        if (rowdata != null)
        {
            SpecialProblemModel.Code = rowdata.Code;
            SpecialProblemModel.English = rowdata.English;
            SpecialProblemModel.French = rowdata.French;
            SpecialProblemModel.Sequence = rowdata.Sequence;
            SpecialProblemModel.Id = rowdata.Id;
            parameters.Add("SpecialProblemModel", SpecialProblemModel);

            Modal.Show<SpecialProblemWindow>("Edit EDI SpecialProblem", parameters);
            Modal.OnClose += ExistWindowModalClosed;
        }
    }
}
