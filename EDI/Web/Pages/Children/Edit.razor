@page "/children/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject IChildService childService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal;
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-6">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Child</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="addnewbutton" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <br />
            <div class="col-md-11">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Details" Expanded="true">
                            <ContentTemplate>
                                <ChildForm @ref="childform1" ChildModel="@ChildModel" HandleValidSubmit="HandleValidSubmit" />
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
            <br />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private ChildItemViewModel ChildModel { get; set; } = new ChildItemViewModel();

    ChildForm childform1 = new ChildForm();

    SfGrid<SchoolItemViewModel> Grid;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (user.IsInRole("Coordinator"))
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            ChildModel = await childService.GetChildItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(ChildModel.Ediid))
        {
            ErrorMessage = "Edi ID is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        var totalItems = await childService.GetDuplicateCount(childform1.ChildModel.Ediid, childform1.ChildModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The child with the same EDI ID has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await childService.UpdateChildAsync(childform1.ChildModel);

            Message = "Child updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./children/index");
    }

    private async void Reset()
    {
        ChildModel = await childService.GetChildItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./children/new");
    }
}