@page "/Children/index"
@using EDI.Web.Shared.Modals;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using EDI.Web.Data;
@using System.Linq.Dynamic.Core;
@using Syncfusion.Blazor.Navigations;

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject IChildService childService;
@inject ISharedService sharedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IMathService mathService;
@inject UserSettings UserSettings;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

    <style>
        .e-grid .e-altrow {
            background-color:lightgray;
        }
    </style>
    
<div class="row">
        <div class="col-md-12">
            <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
                <div class="card-header">
                    <div class="row cardHeader">
                        <strong>@Translate(@Header)</strong>
                        <div class="pull-right">
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (children == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {                        
 @*                       var Tool = (new List<string>() { "Search" });

<SfGrid DataSource="@Orders" Toolbar=@Tool>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>*@
                        //<SfGrid ID="GridChild" @ref="Grid" DataSource="@children" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { @Translate("Add"), @Translate("Edit"), @Translate("Delete"), "ExcelExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                        <SfGrid ID="GridChild" @ref="Grid" DataSource="@children" AllowPaging="true" AllowSorting="true"  AllowFiltering="true" AllowGrouping="false" AllowResizing="true" ShowColumnMenu="true" Toolbar="@Toolbaritems" AllowExcelExport="true" AllowPdfExport="true" EnableAltRow="true">
                            <GridEditSettings AllowAdding="true" AllowEditing="@AllowEdit" AllowDeleting="@AllowDelete" ShowDeleteConfirmDialog="false"></GridEditSettings>
                            <GridEvents ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="ChildItemViewModel"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                            <GridSortSettings>
                                <GridSortColumns>
                                    <GridSortColumn Field="Ediid" Direction="SortDirection.Ascending"></GridSortColumn>
                                </GridSortColumns>
                            </GridSortSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(ChildItemViewModel.Ediid) HeaderText=@Translate("EDI_ID") TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.LocalId) HeaderText=@Translate("Child's Local ID") Width="30"></GridColumn>
                                @*<GridColumn Field=@nameof(ChildItemViewModel.Ediyear) Type="ColumnType.Number" HeaderText=@Translate("Year") Width="15"></GridColumn>*@
                                <GridColumn Field=@nameof(ChildItemViewModel.TeacherName) HeaderText=@Translate("Teacher") Width="30"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.Gender) HeaderText=@Translate("Gender") Width="30"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.Dob) Format="yyyy-MM-dd" Type="ColumnType.Date" HeaderText=@Translate("Date of Birth") Width="30"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.PostalCode) HeaderText=@Translate("Postal/Zip") Width="30"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.ChildStatus) HeaderText=@Translate("Status") Width="20">
                                    <Template>
                                        @{
                                            var comm = (context as ChildItemViewModel);
                                            if (UserSettings.IsAdmin && comm.ChildStatusId == (int)Enumerations.ChildStatus.Locked)
                                            {
                                                <div>@comm.ChildStatus <button data-toggle="tooltip" data-placement="bottom" title="Unlock" @onclick="@(() => Unlock(comm.Id))" style="border:none;background-color:transparent;"><i class="fas fa-lock-open fa-2x" style="color:darkgreen; margin-top: -8px;"></i></button></div>

                                            }
                                            else if (comm.ChildStatusId == (int)Enumerations.ChildStatus.Locked)
                                            {
                                                <div>@comm.ChildStatus <i class="fas fa-lock fa-2x" style="color:darkgreen;"></i></div>
                                            }
                                            else
                                            {
                                                <div>@comm.ChildStatus</div>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.PercentComplete) HeaderText=@Translate("% Complete") Width="25">
                                    <Template>
                                        @{
                                            var comm = (context as ChildItemViewModel);
                                            if (comm.ChildStatusId != (int)Enumerations.ChildStatus.Locked)
                                            {
                                                if (comm.PercentComplete < 100)  // red bar
                                                {
                                                    <div id="myProgress" class="pbar">
                                                        <div id="myBar" style="width:@comm.PercentComplete%" class="bar">
                                                            <div id="label" class="barlabel">@comm.PercentComplete % </div>
                                                        </div>
                                                    </div>
                                                }
                                                else // green bar
                                                {
                                                    <div id="myProgressGreen" class="pbar">
                                                        <div id="myBar" style="width:@comm.PercentComplete%" class="barGreen">
                                                            <div id="label" class="barlabel">@comm.PercentComplete % </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn HeaderText="" Width="20">
                                    <Template>
                                        @{
                                            var comm = (context as ChildItemViewModel);
                                            if (UserSettings.IsAdmin || comm.ChildStatusId != (int)Enumerations.ChildStatus.Locked)
                                            {
                                                <button data-toggle="tooltip" data-placement="bottom" title="Questionnaire" @onclick="@(() => GotoQuestionnaire(comm.Id))" style="border:none;background-color:transparent;"><img src="./images/arrow-right-chrome.gif" style="width: 30px; height: 30px; margin-top: -8px;"><b style="font-size:18px;">@Translate("EDI")</b><img src="./images/arrow-left-chrome.gif" style="width: 30px; height: 30px; margin-top: -8px;"></button>

                                            }
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
        </div>
    </div>

@code {

    // public List<Order> Orders { get; set; }



    //public class Order {
    //    public int? OrderID { get; set; }
    //    public string CustomerID { get; set; }
    //    public DateTime? OrderDate { get; set; }
    //    public double? Freight { get; set; }
    //}
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int TeacherID { get; set; } = 0;
    [Parameter]
    public string Header { get; set; } = "Class Management";
    [Parameter]
    public bool AllowDelete { get; set; } = true;
    [Parameter]
    public bool AllowEdit { get; set; } = true;

    private string Message { get; set; }
    private string ErrorMessage { get; set; }
    private string predicate { get; set; } = string.Empty;

    private List<String> Toolbaritems = new List<String>();

    SfGrid<ChildItemViewModel> Grid;

    IEnumerable<ChildItemViewModel> children;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

    }

    protected override Task OnParametersSetAsync()
    {
        //getChildren();
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            if (UserSettings.IsCoordinator)
            {
                NavigationManager.NavigateTo("./dashboard/index");
            }

            else if (UserSettings.IsAdmin)
            {
                //   var teacher = dbContext.Teachers.Where(t => t.UserId == UserSettings.UserID).FirstOrDefault();
                //   TeacherID = teacher.Id;
                AllowEdit = true;
                AllowDelete = true;
                Toolbaritems = new List<string>() { Translate("Add"), Translate("Edit"), Translate("Delete"), "ExcelExport", "Search" };

                //Toolbaritems.Clear();
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Add"), TooltipText = Translate("Add"), Id = "Add" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Edit"), TooltipText = Translate("Edit"), Id = "Edit" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Delete"), TooltipText = Translate("Delete"), Id = "Delete" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("ExcelExport"), TooltipText = Translate("ExcelExport"), Id = "ExcelExport" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Search"), TooltipText = Translate("Search"), Id = "Search" });

                //     Orders = Enumerable.Range(1, 75).Select(x => new Order()
                //    {   
                //    OrderID = 1000 + x,
                //    CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                //    Freight = 2.1 * x,
                //    OrderDate = DateTime.Now.AddDays(-x),
                //}).ToList();
            }
            else if (UserSettings.IsTeacher)
            {
                //   var teacher = dbContext.Teachers.Where(t => t.UserId == UserSettings.UserID).FirstOrDefault();
                //   TeacherID = teacher.Id;
                AllowEdit = true;
                AllowDelete = false;

                Toolbaritems = new List<string>() { Translate("Add"), Translate("Edit"), "ExcelExport", "Search" };
                //Toolbaritems.Clear();
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Add"), TooltipText = Translate("Add"), Id = "Add" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Edit"), TooltipText = Translate("Edit"), Id = "Edit" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("ExcelExport"), TooltipText = Translate("ExcelExport"), Id = "ExcelExport" });
                //Toolbaritems.Add(new ItemModel() { Text = Translate("Search"), TooltipText = Translate("Search"), Id = "Search" });
            }

        }
        getChildren();
    }

    private void getChildren()
    {
        List<Child> allchildren;

        if (TeacherID > 0)
        {
            predicate = "p => p.TeacherId == " + TeacherID + " && p.YearId == " + UserSettings.YearId;
        }
        else
        {
            if (UserSettings.TeacherId > 0)
            {
                // SchoolId specified - get all teachers at school
                //allchildren = await Task.FromResult(dbContext.Children.Where(p => p.TeacherId == UserSettings.TeacherId && p.YearId == UserSettings.YearId).OrderBy(p => p.Ediid).ToList());
                predicate = "p => p.TeacherId == " + UserSettings.TeacherId + " && p.YearId == " + UserSettings.YearId;
            }
            else
            {
                // SchoolId specified - get all teachers at school
                //allchildren = await Task.FromResult(dbContext.Children.Where(p => p.YearId == UserSettings.YearId).OrderBy(p => p.Ediid).ToList());
                predicate = "p => p.YearId ==" + UserSettings.YearId;
            }
        }


        allchildren = dbContext.Children.Where(predicate)
                    .Include(c => c.Teacher)
                     .ThenInclude(t => t.School)
                     .ThenInclude(ts => ts.Province)
                    .Include(t => t.Year)
                    .Include(g => g.Gender)
                    .Include(cs => cs.ChildStatus)
                    .ToList();

        List<ChildItemViewModel> sivm = new List<ChildItemViewModel>();

        foreach (var child in allchildren)
        {
            var achild = new ChildItemViewModel();

            achild.Id = child.Id;
            achild.Ediid = child.Ediid;
            achild.LocalId = child.LocalId;
            achild.Dob = child.Dob;
            achild.PostalCode = child.PostalCode;
            achild.YearId = child.YearId;
            achild.Ediyear = child.Year.Ediyear;

            achild.GenderId = child.GenderId;


            achild.TeacherId = child.TeacherId;
            achild.TeacherName = child.Teacher.TeacherName;

            achild.ChildStatusId = child.ChildStatusId;

            //if (string.IsNullOrEmpty(child.Gender.English))
            //    achild.Gender = string.Empty;

                achild.Gender = (child.Gender != null) ? (UserSettings.Language == "French") ? child.Gender.French : achild.Gender = child.Gender.English : string.Empty;
               
                achild.ChildStatus = (UserSettings.Language == "French") ? child.ChildStatus.French : achild.ChildStatus = child.ChildStatus.English;
                achild.PercentComplete = child.PercentComplete;

                //achild.Progress = 0;
                //achild.Progress = percentComplete;

                sivm.Add(achild);
            }

            this.rowid = 0;
            children = sivm;

        }

        private string Translate(string word)
        {
            return sharedService.GetTranslate(word);
        }

        private int rowid { get; set; }

        private void RowSelect(RowSelectEventArgs<ChildItemViewModel> args)
        {
            rowid = args.Data.Id;
        }

        public void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<ChildItemViewModel> args)
        {
            if (args.Column.Field == "ChildStatus")
            {
                args.Cell.Value = args.Data.ChildStatus;
            }
            else if (args.Column.Field == "PercentComplete")
            {
                args.Cell.Value = args.Data.PercentComplete + "%";
            }
        }

        public async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
        {
            if (args.Item.Id == "GridChild_pdfexport")
            {
                this.Grid.PdfExport();
            }
            if (args.Item.Id == "GridChild_excelexport")
            {
                //this.Grid.ExcelExport();

                ExcelExportProperties exportProperties = new ExcelExportProperties();
                exportProperties.IncludeTemplateColumn = true;
                await Grid.ExcelExport(exportProperties);

            }
            if (args.Item.Id == "GridChild_csvexport")
            {
                this.Grid.CsvExport();
            }
            if (args.Item.Id == "GridChild_add" || args.Item.Id == "GridChild_Ajouter")
            {
                NavigationManager.NavigateTo("./children/new/" + TeacherID);
                //NewInvoice();
            }
            if (args.Item.Id == "GridChild_edit" || args.Item.Id == "GridChild_Éditer")
            {
                NavigationManager.NavigateTo("./children/edit/" + this.rowid);
            }
            if (args.Item.Id == "GridChild_delete" || args.Item.Id == "GridChild_Supprimer")
            {
                var modal = ModalService.Show<ConfirmDelete>("Confirm Delete");
                var result = await modal.Result;

                ConfirmDeleteModalClosed(result);
            }
        }

        async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
        {
            if (!modalResult.Cancelled)
            {
                await childService.DeleteChildAsync(this.rowid);

                var tmp = new List<ChildItemViewModel>();
                foreach (var item in children)
                {
                    if (item.Id != rowid)
                        tmp.Add(item);
                }
                this.children = tmp;
                this.rowid = 0;

                //this.Grid.Refresh();
                StateHasChanged();
            }

            //*Modal.OnClose -= ConfirmDeleteModalClosed;
        }

        private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<ChildItemViewModel> args)
        {
            NavigationManager.NavigateTo("./children/edit/" + this.rowid);
        }

        private void GotoQuestionnaire(int id)
        {
            // need to forceload 2021-12-14
            NavigationManager.NavigateTo("./EDIQuestionnaires/Demographics/" + id, true);
        }

        private async void Unlock(int id)
        {
            await childService.UnlockChildAsync(id);

            toastService.ShowSuccess("Child unlocked successfully.");

            var tmp = new List<ChildItemViewModel>();
            foreach (var item in children)
            {
                if (item.Id == id)
                {
                    var childstatus = dbContext.ChildStatuses.Where(p => p.English == "In Progress").FirstOrDefault();
                    item.ChildStatusId = childstatus.Id;
                    item.ChildStatus = "In Progress";
                }
                tmp.Add(item);
            }
            this.children = tmp;
            this.rowid = 0;

            this.Grid.Refresh();
            StateHasChanged();
        }
    }
