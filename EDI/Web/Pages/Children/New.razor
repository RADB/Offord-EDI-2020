@page "/Children/New/{TeacherID:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject IChildService ChildService

@inject NavigationManager NavigationManager
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject UserSettings UserSettings;
@inject ISharedService sharedService;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}

<br />

<div class="row">
    <div class="col-md-6">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>@Translate("New Child")</strong>
                <div class="pull-right">
                    @*<button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>*@
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title=@Translate("Exit") @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> @Translate("Exit")</button>
                </div>
            </div>
            <ChildForm @ref="childform1" ChildModel="@ChildModel" HandleValidSubmit="HandleValidSubmit" />
        </div>

    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }
    [Parameter]
    public int TeacherID { get; set; } = 0;

    private ChildItemViewModel ChildModel { get; set; } = new ChildItemViewModel();

    ChildForm childform1 = new ChildForm();

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (UserSettings.IsCoordinator)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else if (UserSettings.IsTeacher)
        {
            var teacher = dbContext.Teachers.Where(t => t.UserId == UserSettings.UserID).FirstOrDefault();
            ChildModel.TeacherId = teacher.Id;
            ChildModel.IsAdmin = false;
        }
        else
        {
            ChildModel.IsAdmin = true;

            if(TeacherID > 0)
            {
                ChildModel.TeacherId = TeacherID;
            }
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(ChildModel.Ediid))
        {
            ErrorMessage = "Edi ID is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        var totalItems = await ChildService.GetDuplicateCount(ChildModel.Ediid, UserSettings.YearId);

        if (totalItems > 0)
        {
            ErrorMessage = "The child with the same EDI ID has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            var childstatus = dbContext.ChildStatuses.Where(p => p.English == "New").FirstOrDefault();
            childform1.ChildModel.ChildStatusId = childstatus.Id;

            int id = await ChildService.CreateChildAsync(childform1.ChildModel);

            Message = "New Child added successfully.";
            toastService.ShowSuccess(Message);
            ChildModel = new ChildItemViewModel();
            //NavigationManager.NavigateTo("./Children/edit/" + id);
            NavigationManager.NavigateTo("./Children/index");
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./Children/index");
    }

    private async void Reset()
    {
        ChildModel = new ChildItemViewModel();
        if (TeacherID > 0)
        {
            ChildModel.TeacherId = TeacherID;
        }
        StateHasChanged();
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }
}
