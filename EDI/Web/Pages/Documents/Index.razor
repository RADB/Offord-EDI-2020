@page "/documents/index/{message}"
@using Microsoft.AspNetCore.Http
@using Syncfusion.Blazor.FileManager;
@using System.Collections.Generic;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@inject ISharedService sharedService;
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor httpContextAccessor
@inject IWebHostEnvironment hostingEnvironment
@inject ServiceContext dbContext
@inject IToastService toastService;


<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <div class="row cardHeader">
                    <strong>@Translate("Document Management")</strong>
                    <div class="pull-right">

                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (UserSettings.IsAdmin)
                {
                    <SfFileManager TValue="FileManagerDirectoryContent">
                        <FileManagerToolbarSettings Items="@items"></FileManagerToolbarSettings>
                        <FileManagerContextMenuSettings Visible="@showcontext"></FileManagerContextMenuSettings>
                        <FileManagerAjaxSettings Url="/api/FileManager/FileOperations"
                                                 GetImageUrl="/api/FileManager/GetImage"
                                                 UploadUrl="/api/FileManager/Upload"
                                                 DownloadUrl="/api/FileManager/Download">
                        </FileManagerAjaxSettings>
                    </SfFileManager>
                }
                else
                {
                    <SfFileManager TValue="FileManagerDirectoryContent" AllowDragAndDrop="false" @onkeydown="KeyValueChange">
                        <FileManagerEvents TValue="FileManagerDirectoryContent" OnSend="send"></FileManagerEvents>
                        <FileManagerToolbarSettings Items="@items"></FileManagerToolbarSettings>
                        <FileManagerUploadSettings AutoUpload="false"></FileManagerUploadSettings>
                        <FileManagerContextMenuSettings Visible="@showcontext"></FileManagerContextMenuSettings>
                        <FileManagerAjaxSettings Url="/api/FileManager/FileOperations"
                                                 GetImageUrl="/api/FileManager/GetImage"
                                                 DownloadUrl="/api/FileManager/Download">
                        </FileManagerAjaxSettings>
                    </SfFileManager>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public string message { get; set; } = string.Empty;
    private string[] items { get; set; }
    private bool showcontext { get; set; }

    private void KeyValueChange(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        if (e.Code == "Delete")
        {
            if (!UserSettings.IsAdmin)
            {
                int index = NavigationManager.Uri.LastIndexOf("/");
                var path = NavigationManager.Uri.Substring(0, index) + @"/Nopermission";
                NavigationManager.NavigateTo(path, true);
            }
        }
    }

    public void send(Syncfusion.Blazor.FileManager.BeforeSendEventArgs args)
    {
        Dictionary<string, object> data = new Dictionary<string, object>();
        data.Add("User_name", UserSettings.UserName);
        args.CustomData = data;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            string basePath = hostingEnvironment.ContentRootPath;

            string newPath = string.Empty;

            if (message == "Nopermission")
                toastService.ShowError("You do not have permission to delete file");

            if (UserSettings.IsAdmin)
            {
                string folderName = @"Data\Files\";
                newPath = Path.Combine(basePath, folderName);

                items = new string[] { "New folder", "Upload", "Delete", "Rename", "Sort By", "Refresh", "View", "Details" };
                showcontext = false;
            }
            else if (UserSettings.IsTeacher)
            {
                items = new string[] { "Sort By", "Refresh", "View", "Details" };
                showcontext = false;

                string folderName = @"Data\Files\" + UserSettings.Province;

                if (string.IsNullOrEmpty(UserSettings.Province))
                    folderName = @"Data\Files\Others";

                newPath = Path.Combine(basePath, folderName);
            }
            else if (UserSettings.IsCoordinator)
            {
                string folderName = @"Data\Files\";
                newPath = Path.Combine(basePath, folderName);

                items = new string[] { "Sort By", "Refresh" };
                showcontext = false;
            }

            if (!Directory.Exists(newPath))
            {
                Directory.CreateDirectory(newPath);
            }

            string[] filesindirectory = Directory.GetDirectories(newPath);
            if (UserSettings.IsAdmin)
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                }
            }
            else if (UserSettings.IsCoordinator)
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;
                }

                // get all provinces
                List<string> provinces = new List<string>();

                var coordinator = dbContext.Coordinators.Where(c => c.UserId == UserSettings.UserID)
                         .Include(s => s.Sites)
                         .ThenInclude(s => s.Schools)
                         .ThenInclude(sp => sp.Province).Single();


                foreach (var site in coordinator.Sites.ToList())
                {
                    foreach (var school in site.Schools.ToList())
                    {
                        provinces.Add(school.Province.English.Replace(" ", ""));
                    }
                }

                var distinctprovinces = provinces.Distinct();

                foreach (var province in distinctprovinces)
                {
                    string folderName = @"Data\Files\" + province;
                    string subfolder = Path.Combine(basePath, folderName);

                    if (!Directory.Exists(subfolder))
                    {
                        Directory.CreateDirectory(subfolder);
                    }
                    else
                    {
                        DirectoryInfo di = new DirectoryInfo(subfolder);
                        di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                    }
                }
            }
            hostingEnvironment.WebRootPath = newPath;
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }
}

<style>
    #file .e-empty-inner-content {
        display: none;
    }
</style>
