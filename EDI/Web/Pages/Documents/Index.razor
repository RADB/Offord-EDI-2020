@page "/documents/index"
@using Microsoft.AspNetCore.Http
@using Syncfusion.Blazor.FileManager;
@using System.Collections.Generic;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@inject ISharedService sharedService;
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor httpContextAccessor
@inject IWebHostEnvironment hostingEnvironment
@inject ServiceContext _dbContext
@inject AppIdentityDbContext _identityContext

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <div class="row cardHeader">
                    <strong>@Translate("Document Management")</strong>
                    <div class="pull-right">

                    </div>
                </div>
            </div>
            <div class="card-body">
                <SfFileManager TValue="FileManagerDirectoryContent">
                    <FileManagerToolbarSettings Items="@items"></FileManagerToolbarSettings>
                    <FileManagerContextMenuSettings Visible="@showcontext"></FileManagerContextMenuSettings>
                    <FileManagerAjaxSettings Url="/api/FileManager/FileOperations"
                                             GetImageUrl="/api/FileManager/GetImage"
                                             UploadUrl="/api/FileManager/Upload"
                                             DownloadUrl="/api/FileManager/Download">
                    </FileManagerAjaxSettings>
                </SfFileManager>
            </div>

        </div>
    </div>
</div>

@code {
    private string[] items { get; set; }
    private bool showcontext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            string basePath = hostingEnvironment.ContentRootPath;

            string newPath = string.Empty;

            if (UserSettings.IsAdmin || UserSettings.IsCoordinator)
            {
                string folderName = @"Data\Files\";
                newPath = Path.Combine(basePath, folderName);

                items = new string[] { "New folder", "Upload", "Sort By", "Refresh" };
                showcontext = false;
            }
            else if (UserSettings.IsTeacher)
            {
                items = new string[] { "Sort By", "Refresh" };
                showcontext = false;

                string folderName = @"Data\Files\" + UserSettings.Province;

                if (string.IsNullOrEmpty(UserSettings.Province))
                    folderName = @"Data\Files\Others";

                newPath = Path.Combine(basePath, folderName);
            }

            if (!Directory.Exists(newPath))
            {
                Directory.CreateDirectory(newPath);
            }

            string[] filesindirectory = Directory.GetDirectories(newPath);
            if (UserSettings.IsAdmin || UserSettings.IsCoordinator)
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                }
            }
            else if (UserSettings.IsTeacher)
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;
                }

                List<int> provinces = new List<int>();

                var coordinate = _dbContext.Coordinators.Where(c => c.UserId == UserSettings.TeacherId.ToString()).FirstOrDefault();

                if (coordinate != null)
                {
                    var sites = _dbContext.Sites.Where(s => s.CoordinatorId == coordinate.Id).ToList();

                    foreach (var site in sites)
                    {
                        var provinceids = _dbContext.Schools.Where(s => s.SiteId == site.Id).Select(s => s.ProvinceId).ToList();

                        foreach (var pid in provinceids)
                        {
                            provinces.Add(pid);
                        }
                    }

                    var distinctprovinces = provinces.Distinct();

                    foreach (var pid in distinctprovinces)
                    {
                        var province = _dbContext.Provinces.Where(p => p.Id == pid).FirstOrDefault();

                        string folderName = @"Data\Files\" + province.English;
                        string subfolder = Path.Combine(basePath, folderName);

                        if (!Directory.Exists(subfolder))
                        {
                            Directory.CreateDirectory(subfolder);
                        }
                        else
                        {
                            DirectoryInfo di = new DirectoryInfo(subfolder);
                            di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                        }
                    }
                }
            }


            hostingEnvironment.WebRootPath = newPath;
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }
}
