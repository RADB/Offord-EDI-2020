@page "/documents/index"
@using Microsoft.AspNetCore.Http
@using Syncfusion.Blazor.FileManager;
@using System.Collections.Generic;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@inject ISharedService sharedService;
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor httpContextAccessor
@inject IHostingEnvironment hostingEnvironment
@inject ServiceContext _dbContext
@inject AppIdentityDbContext _identityContext

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <div class="row cardHeader">
                    <strong>@Translate("Document Management")</strong>
                    <div class="pull-right">

                    </div>
                </div>
            </div>
            <div class="card-body">
                <SfFileManager TValue="FileManagerDirectoryContent">
                    <FileManagerAjaxSettings Url="/api/FileManager/FileOperations"
                                             GetImageUrl="/api/FileManager/GetImage"
                                             UploadUrl="/api/FileManager/Upload"
                                             DownloadUrl="/api/FileManager/Download">
                    </FileManagerAjaxSettings>
                </SfFileManager>
            </div>

        </div>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            var username = httpContextAccessor.HttpContext.User.Identity.Name;

            string basePath = hostingEnvironment.ContentRootPath;

            var user = _identityContext.Users.Where(p => p.UserName == username).FirstOrDefault();

            var roleid = _identityContext.UserRoles.Where(p => p.UserId == user.Id).First().RoleId;

            var role = _identityContext.Roles.Where(p => p.Id == roleid).FirstOrDefault();

            var rolename = role.Name;

            string newPath = string.Empty;

            if (rolename == "Administrator" || rolename == "Coordinator")
            {
                string folderName = @"Data\Files\";
                newPath = Path.Combine(basePath, folderName);
            }
            else if (rolename == "Teacher")
            {
                var teacher = _dbContext.Teachers.Where(c => c.UserId == user.Id).FirstOrDefault();

                if (teacher != null)
                {
                    var school = _dbContext.Schools.Where(c => c.Id == teacher.SchoolId).FirstOrDefault();

                    var province = _dbContext.Provinces.Where(p => p.Id == school.ProvinceId).FirstOrDefault();

                    string folderName = @"Data\Files\" + province.English;
                    newPath = Path.Combine(basePath, folderName);
                }
                else
                {
                    if (user.ProvinceID.HasValue)
                    {
                        var province = _dbContext.Provinces.Where(p => p.Id == user.ProvinceID).FirstOrDefault();

                        string folderName = @"Data\Files\" + province.English;
                        newPath = Path.Combine(basePath, folderName);
                    }
                    else
                    {
                        string folderName = @"Data\Files\Others";
                        newPath = Path.Combine(basePath, folderName);
                    }
                }
            }

            if (!Directory.Exists(newPath))
            {
                Directory.CreateDirectory(newPath);
            }

            string[] filesindirectory = Directory.GetDirectories(newPath);
            if (rolename == "Administrator")
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                }
            }
            else if (rolename == "Coordinator")
            {
                foreach (string subdir in filesindirectory)
                {
                    DirectoryInfo di = new DirectoryInfo(subdir);
                    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;
                }

                List<int> provinces = new List<int>();
                var coordinate = _dbContext.Coordinators.Where(c => c.UserId == user.Id).FirstOrDefault();

                if (coordinate != null)
                {
                    var sites = _dbContext.Sites.Where(s => s.CoordinatorId == coordinate.Id).ToList();

                    foreach (var site in sites)
                    {
                        var provinceids = _dbContext.Schools.Where(s => s.SiteId == site.Id).Select(s => s.ProvinceId).ToList();

                        foreach (var pid in provinceids)
                        {
                            provinces.Add(pid);
                        }
                    }

                    var distinctprovinces = provinces.Distinct();

                    foreach (var pid in distinctprovinces)
                    {
                        var province = _dbContext.Provinces.Where(p => p.Id == pid).FirstOrDefault();

                        string folderName = @"Data\Files\" + province.English;
                        string subfolder = Path.Combine(basePath, folderName);

                        if (!Directory.Exists(subfolder))
                        {
                            Directory.CreateDirectory(subfolder);
                        }
                        else
                        {
                            DirectoryInfo di = new DirectoryInfo(subfolder);
                            di.Attributes = FileAttributes.Directory | FileAttributes.Normal;
                        }
                    }
                }
            }


            hostingEnvironment.WebRootPath = newPath;
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }
}
