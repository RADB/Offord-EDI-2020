@page "/TeacherProfile/index/{TeacherId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@inject StateContainer StateContainer
@implements IDisposable

            @*<div class="row">
                <div class="col-md-12">
                    <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">*@

                        <EditForm Model="@teacherData" OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data" class="form-horizontal">
                            @*<div class="card-body">*@
                                <DataAnnotationsValidator />
                                <div class="text-danger"><ValidationSummary /></div>

                                <QuestionnaireHeader teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@province QuestionnaireId=@QuestionnaireId marginTop="95px"></QuestionnaireHeader>

                            @*</div>*@
                            <div class="card-footer">
                                <button type="submit" class="savebutton"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
                            </div>
                        </EditForm>
                    @*</div>

                </div>
            </div>*@


            @code {

                [Parameter]
                public int TeacherId { get; set; }

                //private TeacherProfileItemViewModel teacherprofileitemviewmodel { get; set; }
                private List<QuestionnairesConfiguration> headers;
                //private QuestionnairesDataDemographic data;
                private Teacher teacherData;
                private Boolean IsReadOnly;
                private string predicate;
                private string province;
                private int QuestionnaireId = 1;

                protected override async Task OnInitializedAsync()
                {
                    try
                    {
                        if (!UserSettings.IsAuthenticated)
                        {
                            NavigationManager.NavigateTo("./login");
                        }
                        else
                        {
                            if (UserSettings.IsTeacher)
                            {
                                // if the teacher tries to navigate to another teachers profile - send them back to dashboard
                                if (TeacherId != UserSettings.TeacherId)
                                    NavigationManager.NavigateTo("./Dashboard/index");
                            }
                        }

                        //teacherprofileitemviewmodel = new TeacherProfileItemViewModel();
                        // get the data if use that has access
                        getData();
                        StateContainer.OnChange += StateHasChanged;
                    }
                    catch (Exception ex)
                    {
                        NavigationManager.NavigateTo("./Dashboard/index");
                    }

                }

                private void getData()
                {
                    // get the data object for the teacher
                    //pred = "t=>t.Id == " + TeacherId;
                    teacherData = dbContext.Teachers.Where(t => t.Id == TeacherId)
                            .Include(c => c.QuestionnairesDataTeacherProfiles)
                            .Include(s => s.School)
                            .ThenInclude(ts => ts.Province)
                            .Single();

                    if (UserSettings.IsAdmin)
                    {
                        IsReadOnly = true;

                        province = teacherData.School.Province.English.Replace(" ", "");
                    }
                    else if (UserSettings.IsTeacher)
                    {
                        IsReadOnly = false;
                        province = UserSettings.Province;
                    }
                    else
                    {
                        IsReadOnly = true;
                        province = teacherData.School.Province.English.Replace(" ", "");
                    }
                }

                private string Translate(string word)
                {
                    return sharedService.GetTranslate(word);
                }

                private async void Save()
                {
                    //StateContainer.SetTeacher(teacherData);
                    //dbContext.Teachers.Update(StateContainer.TeacherData);
                    await dbContext.SaveChangesAsync();

                    getData();

                    StateHasChanged();
                }

                private void HandleValidSubmit()
                {
                    Save();
                }

                public void Dispose()
                {
                    StateContainer.OnChange -= StateHasChanged;
                }

            }
