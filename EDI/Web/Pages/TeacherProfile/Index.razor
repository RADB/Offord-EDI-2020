@page "/TeacherProfile/index/{TeacherId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;

<QuestionnaireHeader teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@province QuestionnaireId=@QuestionnaireId marginTop="95px"></QuestionnaireHeader>

<!--Convert this to a component with readonly parameter-->
@if (!IsReadOnly)
{
    <div class="card-footer">
       <button class="savebutton" @onclick="Save"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
    </div>
}

@code {

    [Parameter]
    public int TeacherId { get; set; }

    private List<QuestionnairesConfiguration> headers;
    //private QuestionnairesDataDemographic data;
    private Teacher teacherData;
    private Boolean IsReadOnly;
    private string predicate;
    private string province;
    private int QuestionnaireId = 1;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            getData();
        }
    }

    private void getData()
    {
        // get the data object for the teacher
        //pred = "t=>t.Id == " + TeacherId;
        teacherData = dbContext.Teachers.Where(t => t.Id == TeacherId)
                .Include(c => c.QuestionnairesDataTeacherProfiles)
                .Include(s => s.School)
                .ThenInclude(ts => ts.Province)
                .Single();

        if (UserSettings.IsAdmin)
        {
            IsReadOnly = true;

            //get the teachers province
            /*var teacher = dbContext.Teachers.Where(s => s.Id == TeacherId)
                              .Include(s => s.School)
                              .ThenInclude(ts => ts.Province).Single();*/

            province = teacherData.School.Province.English.Replace(" ", "");


        }
        else if (UserSettings.IsTeacher)
        {
            IsReadOnly = false;
            province = UserSettings.Province;
        }
        else
        {
            IsReadOnly= true;
            province = teacherData.School.Province.English.Replace(" ", "");
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private async void Save()
    {
        await dbContext.SaveChangesAsync();

        getData();

        StateHasChanged();
    }

}