@page "/TeacherProfile/index/{TeacherId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using EDI.Web.Data 
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@inject IToastService toastService;
@inject StateContainer StateContainer;
@inject IMathService mathService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@implements IDisposable
@*<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">*@

<EditForm Model="@teacherData" OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data" class="form-horizontal">
    @*<div class="card-body">*@
    <DataAnnotationsValidator />
    <div class="text-danger"><ValidationSummary /></div>

    <QuestionnaireHeader teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@province QuestionnaireId=@QuestionnaireId marginTop="95px"></QuestionnaireHeader>

    @*</div>*@
    <AuthorizeView Roles="Teacher">
        <Authorized Context="AuthContext">
            <div class="card-footer">
                <div class="row d-flex align-items-center">
                    <div class="col-1"><button type="submit" class="btn btn-success"><i class="fa fa-save bg whiteiconcolor"></i> Save</button></div>
                    <div class="col-1"><SfSwitch CssClass="handle-text" OnLabel="Validation-On" OffLabel="Validation-Off" @bind-Checked="@Validation" ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e) =>OnValidationChange(e))"></SfSwitch></div>
                    <div class="col-2"><button class="btn btn-warning" @onclick="@checkCompleteNess" type="button"><i class="fas fa-search"></i> Check Completeness</button></div>
                    <div class="col-4">
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated @barColor" style="width:@percentComplete%">@percentComplete%</div>
                        </div>
                    </div>
                    <div class="col-2" hidden="@true">
                        Completed= @completed
                        <br />
                        Required= @required
                        <br />
                        %Done= @percentComplete
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</EditForm>
@*</div>

        </div>
    </div>*@




@code {
    private int completed { get; set; }
    private int required { get; set; }
    private int percentComplete { get; set; }
    private string barColor { get; set; }



    [Parameter]
    public int TeacherId { get; set; }

    //private TeacherProfileItemViewModel teacherprofileitemviewmodel { get; set; }
    private List<QuestionnairesConfiguration> headers;
    //private QuestionnairesDataDemographic data;
    private Teacher teacherData;
    private Boolean IsReadOnly;
    private Boolean Validation { get; set; }
    private string predicate;
    private string province;
    private int QuestionnaireId = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!UserSettings.IsAuthenticated)
            {
                NavigationManager.NavigateTo("./login");
            }
            else
            {
                if (UserSettings.IsTeacher)
                {
                    // if the teacher tries to navigate to another teachers profile - send them back to dashboard
                    if (TeacherId != UserSettings.TeacherId)
                        NavigationManager.NavigateTo("./Dashboard/index");
                }
            }

            //teacherprofileitemviewmodel = new TeacherProfileItemViewModel();
            // get the data if use that has access
            InitializeCounts();

            if (UserSettings.Validation.HasValue)
                Validation = UserSettings.Validation.Value;
            else
            {
                var validation = dbContext.UserSessions.Where(p => p.UserID == UserSettings.UserID && p.FieldName == "Validation").Select(p => p.FieldValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(validation))
                {
                    Validation = bool.Parse(validation);
                }
                else
                {
                    Validation = false;
                }
                UserSettings.Validation = Validation;
            }

            getData();
            StateContainer.OnChange += StateHasChanged;
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("./Dashboard/index");
        }

    }
    private void checkCompleteNess()
    {
        completed = UserSettings.QuestionsCompleted;
        required = UserSettings.QuestionsRequired;
        percentComplete = mathService.GetPercent(completed, required);

        if (percentComplete > 100)
            percentComplete = 100;

        switch (percentComplete)
        {
            case < 30:
                barColor = "bg-danger";
                break;
            case < 50:
                barColor = "bg-warning";
                break;
            case < 75:
                barColor = "bg-secondary";
                break;
            case < 99:
                barColor = "bg-info";
                break;
            case 100:
                barColor = "bg-success";
                break;
        }
        //StateHasChanged();
    }
    protected void InitializeCounts()
    {
        UserSettings.QuestionsCompleted = 0;
        UserSettings.QuestionsRequired = 0;
        UserSettings.QuestionsTotal = 0;
    }

    private void getData()
    {
        // get the data object for the teacher
        //pred = "t=>t.Id == " + TeacherId;
        teacherData = dbContext.Teachers.Where(t => t.Id == TeacherId)
                .Include(c => c.QuestionnairesDataTeacherProfiles)
                .Include(s => s.School)
                .ThenInclude(ts => ts.Province)
                .Single();

        if (UserSettings.IsAdmin)
        {
            IsReadOnly = true;

            province = teacherData.School.Province.English.Replace(" ", "");
        }
        else if (UserSettings.IsTeacher)
        {
            IsReadOnly = false;
            province = UserSettings.Province;
        }
        else
        {
            IsReadOnly = true;
            province = teacherData.School.Province.English.Replace(" ", "");
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private async void Save()
    {
        checkCompleteNess();

        //var currentStatus = int.Parse(reflectionService.GetFieldValue(teacherData, "Teacher", "TeacherStatusId"));
        var currentStatus = teacherData.TeacherStatusId;
        if ((Enumerations.TeacherStatus)currentStatus != Enumerations.TeacherStatus.Complete)
        {
            if(percentComplete == 100)
            {
                //reflectionService.SetFieldValue(teacherData, "Teacher", "TeacherStatusId", ((int)Enumerations.TeacherStatus.Complete).ToString());
                teacherData.TeacherStatusId = (int)Enumerations.TeacherStatus.Complete;
                teacherData.QuestionnairesDataTeacherProfiles.Single().IsComplete = true;
            }
            else
            {
                //reflectionService.SetFieldValue(teacherData, "Teacher", "TeacherStatusId", ((int)Enumerations.TeacherStatus.InProgress).ToString());
                teacherData.TeacherStatusId = (int)Enumerations.TeacherStatus.InProgress;
                teacherData.QuestionnairesDataTeacherProfiles.Single().IsComplete = false;
            }
        }
        //StateContainer.SetTeacher(teacherData);
        //dbContext.Teachers.Update(StateContainer.TeacherData);
        await dbContext.SaveChangesAsync();

        toastService.ShowSuccess("Data saved successfully.");

        getData();

        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Save();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    private async void OnValidationChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e)
    {
        if (e.Checked)
        {
            Validation = true;
        }
        else
            Validation = false;

        UserSettings.Validation = Validation;

        await sharedService.SaveUserSessions("Validation", Validation.ToString(), UserSettings.UserID);

        StateHasChanged();

        BounceBack(false);
    }

    private async void BounceBack(Boolean UseSession)
    {
        var url = NavigationManager.Uri;
        string navigateTo;

        if (UseSession)
        {
            await sessionStorage.SetItemAsync<string>("CurrentUrl", url);
            //await sessionStorage.SetItemAsync<bool>("RequiredNaviBack", true);
            //await sessionStorage.SetItemAsync<bool>("RadioLabels", RadioLabels);
            navigateTo = "./EDIQuestionnaires/SectionZ";
        }
        else
        {
            UserSettings.CurrentURL = url;
            UserSettings.RequiredNaviBack = true;
            navigateTo = "./TeacherProfile/ProfileX";
        }

        Save();
        NavigationManager.NavigateTo(navigateTo);
        //NavigationManager.NavigateTo(url,Force);
        //await InvokeAsync(() => StateHasChanged());

    }
}
