@page "/TeacherProfile/index/{TeacherId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <QuestionnaireBuilder configs=@configs data=@data IsReadonly="false"></QuestionnaireBuilder>

            <div class="card-footer">
                <button class="savebutton" @onclick="Save"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int TeacherId { get; set; }

    private int SelectedTab = 0;

    // look to move this to a session variable and carry throughout the session
    private bool IsAdmin { get; set; }
    private bool IsTeacher { get; set; }
    private bool IsCoordinator { get; set; }
    private List<QuestionnairesConfiguration> configs;
    //private QuestionnairesDataDemographic data;
    private Teacher data;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            @if (UserSettings.IsAdmin)
            {
                IsAdmin = true;
                //var configs = await Task.FromResult(dbContext.QuestionnairesConfigurations.Where(t => t.QuestionnaireId == 1).ToList());
                var pred = "t => t.QuestionnaireId == 1";
                configs = dbContext.QuestionnairesConfigurations.Where(pred).OrderBy(q => q.Sequence).ToList();

                // get the data object for the teacher
                pred = "t=>t.Id == " + TeacherId;
                //data = dbContext.QuestionnairesDataDemographics.Where(pred).Single();
                data = dbContext.Teachers.Where(pred)
                        .Include(c => c.QuestionnairesDataTeacherProfiles)
                        .Single();
            }
            else if (UserSettings.IsTeacher)
            {
                IsTeacher = true;
                // Add filter for province
                //var predicate = "p => p.IsTeacherFaq.Value && p." + UserSettings.Province + ".Value";
                //allfaqs = await Task.FromResult(dbContext.Faqs.Where(predicate).OrderBy(p => p.Sequence).ToList());
                var pred = "t => t.QuestionnaireId == 1 && " + UserSettings.Province + "==true";
                configs = dbContext.QuestionnairesConfigurations.Where(pred).OrderBy(q => q.Sequence).ToList();

                // get the data object for the teacher
                //pred = "t=>t.Id == " + TeacherId;
                data = dbContext.Teachers.Where(t => t.Id == TeacherId)
                        .Include(c => c.QuestionnairesDataTeacherProfiles)
                        .Single();
            }

            else
            {
                IsCoordinator = true;
            }
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private async void Save()
    {
        await dbContext.SaveChangesAsync();

        @if (UserSettings.IsAdmin)
        {
            IsAdmin = true;
            //var configs = await Task.FromResult(dbContext.QuestionnairesConfigurations.Where(t => t.QuestionnaireId == 1).ToList());
            var pred = "t => t.QuestionnaireId == 1";
            configs = dbContext.QuestionnairesConfigurations.Where(pred).ToList();

            // get the data object for the Teacher
            //pred = "t=>t.Id == " + TeacherId;
            data = dbContext.Teachers.Where(t => t.Id == TeacherId).Single();

        }
        else if (UserSettings.IsTeacher)
        {
            IsTeacher = true;
            // Add filter for province
            //var predicate = "p => p.IsTeacherFaq.Value && p." + UserSettings.Province + ".Value";
            //allfaqs = await Task.FromResult(dbContext.Faqs.Where(predicate).OrderBy(p => p.Sequence).ToList());
            var pred = "t => t.QuestionnaireId == 1 && " + UserSettings.Province + "==true";
            configs = dbContext.QuestionnairesConfigurations.Where(pred).ToList();

            // get the data object for the teacher
            //pred = "t=>t.Id == " + TeacherId;
            data = dbContext.Teachers.Where(t => t.Id == TeacherId).Single();
        }
        else
        {
            IsCoordinator = true;
        }

        StateHasChanged();
    }

}