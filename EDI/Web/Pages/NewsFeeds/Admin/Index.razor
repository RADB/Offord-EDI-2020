@page "/NewsFeeds/Admin"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Linq.Dynamic.Core
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject INewsFeedService newsFeedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;

@inject UserSettings UserSettings;
@inject ISharedService sharedService;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">     
                <div class="row cardHeader">
                    <strong>@Translate("News Feed")</strong>
                </div>
            </div>
            <div class="card-body">
                <div class="container-fluid">
                    <AuthorizeView Roles="Administrator, Teacher, Coordinator">
                        <Authorized>
                            @foreach (var newsFeed in newsFeeds)
                            {
                                <EDI.Web.Shared.NewsDetails newsobj="@newsFeed" ShowActions="false" OnDeleteClick="(e => Delete(newsFeed.Id))" OnEditClick="(e => Edit(newsFeed.Id))"></EDI.Web.Shared.NewsDetails>
                            }
                        </Authorized>
                        <NotAuthorized>
                            Nothing to see here!
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }
    private string predicate { get; set; }

    IEnumerable<NewsFeedItemViewModel> newsFeeds;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            DateTime currentDate = DateTime.Today;
            if (UserSettings.IsAdmin)
            {
                predicate = $"YearId == {UserSettings.YearId} AND ValidFrom <= \"{currentDate}\" AND ValidTo >= \"{currentDate}\"";
            }
            else if (UserSettings.IsTeacher)
            {
                predicate = $"YearId == {UserSettings.YearId} AND ValidFrom <= \"{currentDate}\" AND ValidTo >= \"{currentDate}\" AND {UserSettings.Province}.Value";
            }
            else if (UserSettings.IsCoordinator)
            {
                // TODO modify for coordinators
                predicate = $"YearId == {UserSettings.YearId} AND ValidFrom <= \"{currentDate}\" AND ValidTo >= \"{currentDate}\"";
            }
            var allnewsFeeds = dbContext.NewsFeeds.Where(predicate)
                        .Include(y => y.Year)
                        .OrderBy(n => n.Title).ToList();

            List<NewsFeedItemViewModel> sivm = new List<NewsFeedItemViewModel>();

            foreach (var newsFeed in allnewsFeeds)
            {
                var anewsFeed = new NewsFeedItemViewModel();

                anewsFeed.Id = newsFeed.Id;
                anewsFeed.Title = newsFeed.Title;
                anewsFeed.Text = newsFeed.Text;
                anewsFeed.Summary = newsFeed.Summary;
                anewsFeed.Author = newsFeed.Author;
                anewsFeed.ValidFrom = newsFeed.ValidFrom;
                anewsFeed.ValidTo = newsFeed.ValidTo;
                anewsFeed.YearId = newsFeed.YearId;
                anewsFeed.BritishColumbia = newsFeed.BritishColumbia.HasValue ? newsFeed.BritishColumbia.Value : false;
                anewsFeed.Ediyear = newsFeed.Year.Ediyear;

                sivm.Add(anewsFeed);                
            }

            newsFeeds = sivm;
        }
    }

    private void Add()
    {

    }

    private void Edit(int id)
    {

    }
    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private int newsid { get; set; }

    private void Delete(int id)
    {

    }
}