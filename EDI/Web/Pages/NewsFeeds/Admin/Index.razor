@page "/NewsFeeds/Admin"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Linq.Dynamic.Core
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject INewsFeedService newsFeedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;

@inject UserSettings UserSettings;
@inject ISharedService sharedService;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">     
                <div class="row cardHeader">
                    <strong>@Translate("News Feed")</strong>
                </div>
            </div>
            <div class="card-body">
                <div class="container-fluid">
                    <AuthorizeView Roles="Administrator, Teacher, Coordinator">
                        <Authorized>
                            @foreach (var newsFeed in newsFeeds)
                            {
                                <EDI.Web.Shared.News newsobj="@newsFeed" ShowActions="false" OnDeleteClick="(e => Delete(newsFeed.Id))" OnEditClick="(e => Edit(newsFeed.Id))"></EDI.Web.Shared.News>
                            }
                        </Authorized>
                        <NotAuthorized>
                            Nothing to see here!
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    IEnumerable<NewsFeedItemViewModel> newsFeeds;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            var predicate = "p => p.YearId == " + UserSettings.YearId;
            var allnewsFeeds = await Task.FromResult(dbContext.NewsFeeds.Where(predicate).OrderBy(p => p.Title).ToList());

            if (!UserSettings.IsAdmin)
            {
                predicate = "p => p." + UserSettings.Province + ".Value && p.YearId == " + UserSettings.YearId;
                allnewsFeeds = await Task.FromResult(dbContext.NewsFeeds.Where(predicate).OrderBy(p => p.Title).ToList());
            }

            List<NewsFeedItemViewModel> sivm = new List<NewsFeedItemViewModel>();

            foreach (var newsFeed in allnewsFeeds)
            {
                var anewsFeed = new NewsFeedItemViewModel();

                anewsFeed.Id = newsFeed.Id;
                anewsFeed.Title = newsFeed.Title;
                anewsFeed.Text = newsFeed.Text;
                anewsFeed.Summary = newsFeed.Summary;
                anewsFeed.Author = newsFeed.Author;
                anewsFeed.ValidFrom = newsFeed.ValidFrom;
                anewsFeed.ValidTo = newsFeed.ValidTo;
                anewsFeed.YearId = newsFeed.YearId;
                anewsFeed.BritishColumbia = newsFeed.BritishColumbia.HasValue ? newsFeed.BritishColumbia.Value : false;

                var year = dbContext.Years.Where(p => p.Id == newsFeed.YearId).FirstOrDefault();
                anewsFeed.Ediyear = year != null ? year.Ediyear : null;

                if (UserSettings.IsAdmin)
                {
                    sivm.Add(anewsFeed);
                }
                else
                {
                    if (DateTime.Now >= anewsFeed.ValidFrom.Value && DateTime.Now <= anewsFeed.ValidTo.Value)
                    {
                        if (UserSettings.IsTeacher)
                        {
                            var teacher = dbContext.Teachers.Where(p => p.UserId == UserSettings.UserID).FirstOrDefault();

                            if (teacher != null)
                            {
                                //var school = dbContext.Schools.Where(c => c.Id == teacher.SchoolId).FirstOrDefault();

                                //var province = dbContext.Provinces.Where(p => p.Id == school.ProvinceId).FirstOrDefault();

                                //if (anewsFeed.GetType().GetProperty((province.English).Replace(" ", "")).GetValue(anewsFeed, null) != null)
                                if (anewsFeed.GetType().GetProperty(UserSettings.Province).GetValue(anewsFeed, null) != null)
                                {
                                    //var property = anewsFeed.GetType().GetProperty((province.English).Replace(" ", "")).GetValue(anewsFeed, null);

                                    //if (property.Equals(true))
                                    if (anewsFeed.GetType().GetProperty(UserSettings.Province).GetValue(anewsFeed, null).Equals(true))
                                    {
                                        sivm.Add(anewsFeed);
                                    }
                                }
                            }
                        }
                        else
                        {
                            var coordinator = dbContext.Coordinators.Where(p => p.UserId == UserSettings.UserID).FirstOrDefault();

                            if (coordinator != null)
                            {
                                var site = dbContext.Sites.Where(c => c.CoordinatorId == coordinator.Id).FirstOrDefault();
                                var school = dbContext.Schools.Where(c => c.SiteId == site.Id).FirstOrDefault();

                                var province = dbContext.Provinces.Where(p => p.Id == school.ProvinceId).FirstOrDefault();

                                if (anewsFeed.GetType().GetProperty(UserSettings.Province).GetValue(anewsFeed, null) != null)
                                {
                                    var property = anewsFeed.GetType().GetProperty(UserSettings.Province).GetValue(anewsFeed, null);

                                    if (property.Equals(true))
                                    {
                                        sivm.Add(anewsFeed);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            newsFeeds = sivm;
        }
    }

    private void Add()
    {

    }

    private void Edit(int id)
    {

    }
    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private int newsid { get; set; }

    private void Delete(int id)
    {

    }
}