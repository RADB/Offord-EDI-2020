@page "/newsFeeds/view/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject INewsFeedService newsFeedService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject UserSettings UserSettings;

@inject ServiceContext dbContext;
@inject UserSettings UserSettings;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-8">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>@NewsFeedModel.Title</strong>
                <div class="pull-right">
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <br />
            <div class="col-md-10" style="margin-left: 24px;">
                <NewsForm @ref="newsFeedform1" NewsFeedModel="@NewsFeedModel" IsViewOnly="true" HandleValidSubmit="HandleValidSubmit" />
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Sender { get; set; }

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private NewsFeedItemViewModel NewsFeedModel { get; set; } = new NewsFeedItemViewModel();

    NewsForm newsFeedform1 = new NewsForm();

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            NewsFeedModel = await newsFeedService.GetNewsFeedItem(Id);

            UserSettings.BackURL = UserSettings.CurrentURL;

            UserSettings.CurrentURL = NavigationManager.Uri;
        }
    }

    private async void HandleValidSubmit()
    {

    }

    private void Exit()
    {
        NavigationManager.NavigateTo(UserSettings.BackURL);
    }
}