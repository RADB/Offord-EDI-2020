@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;

<QuestionnaireNavigationPart  teacherData="@teacherData" ProvinceName=@province IsReadOnly=@IsReadOnly QuestionnaireId=@QuestionnaireId></QuestionnaireNavigationPart>

    @if (!IsReadOnly)
    {
        <div class="card-footer">
            <button class="savebutton" @onclick="Save"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
        </div>
    }


@code {

    [Parameter]
    public int ChildID { get; set; }

    private int SelectedTab = 0;

    //private QuestionnairesDataDemographic data;
    private Teacher teacherData;
    private Boolean IsReadOnly;
    private string predicate;
    private string province;
    private int QuestionnaireId;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            QuestionnaireId = dbContext.Questionnaires.Where(q => q.QuestionnaireName == "Demographics" && q.YearId == 1).Select(q => q.Id).Single();
            getData();
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private async void Save()
    {
        await dbContext.SaveChangesAsync();

        getData();

        StateHasChanged();
    }

    private void getData()
    {
        // get the data object for the child
        predicate = "t=>t.Id == " + ChildID;
        //data = dbContext.QuestionnairesDataDemographics.Where(pred).Single();
        teacherData = dbContext.Children.Where(predicate)
                .Include(c => c.QuestionnairesDataDemographics)
                .Include(c => c.QuestionnairesDataSectionAs)
                .Include(c => c.QuestionnairesDataSectionBs)
                .Include(c => c.QuestionnairesDataSectionCs)
                .Include(c => c.QuestionnairesDataSectionDs)
                .Include(c => c.QuestionnairesDataSectionEs)
                .Include(c => c.Gender)
                .Include(c => c.Teacher)
                .ThenInclude(t => t.School)
                .ThenInclude(ts => ts.Province)
                .Single().Teacher;
        @if (UserSettings.IsAdmin)
        {
            IsReadOnly = true;
            province = teacherData.School.Province.English.Replace(" ", "");
        }
        else if (UserSettings.IsTeacher)
        {
            IsReadOnly = false;
            province = UserSettings.Province;
        }

        else
        {
            IsReadOnly = true;
        }
    }
}