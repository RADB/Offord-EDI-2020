@page "/EDIQuestionnaires/Demographics/{ChildId:int}"
@page "/EDIQuestionnaires/Demographics/"
@page "/EDIQuestionnaires/{ChildId:int}"
@page "/EDIQuestionnaires/"
@inherits SectionBase;
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@inject IMathService mathService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@*<QuestionnaireNavigation QuestionnaireId=@QuestionnaireId ChildId=@ChildId IsReadOnly=@IsReadOnly></QuestionnaireNavigation>*@

<QuestionnaireHeader teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@province QuestionnaireId=@QuestionnaireId marginTop="15px"></QuestionnaireHeader>


@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.Demographics.IsComplete", teacherData.Children.Single().QuestionnairesDataDemographics.Single().IsComplete);
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionA.IsComplete", teacherData.Children.Single().QuestionnairesDataSectionAs.Single().IsComplete);
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionB.IsComplete", teacherData.Children.Single().QuestionnairesDataSectionBs.Single().IsComplete);
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionC.IsComplete", teacherData.Children.Single().QuestionnairesDataSectionCs.Single().IsComplete);
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionD.IsComplete", teacherData.Children.Single().QuestionnairesDataSectionDs.Single().IsComplete);        
        //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionE.IsComplete", teacherData.Children.Single().QuestionnairesDataSectionEs.Single().IsComplete);

        //var teacherJson = await sessionStorage.GetItemAsync<string>("Teacher");
        //return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {
        initializeCounts();
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            try
            {
                //                initializeCounts();

                checkChildId();
                getData();

                if (UserSettings.IsTeacher)
                {
                    //check if child is not it teachers class
                    predicate = "Id = " + ChildId + " AND TeacherId = " + UserSettings.TeacherId;
                    if (!dbContext.Children.Where(predicate).Any())
                        NavigationManager.NavigateTo("./children/index");
                }

                predicate = "p => p." + province + ".Value && p.YearId == " + UserSettings.YearId + " && p.QuestionnaireName == \"Demographics\"";
                QuestionnaireId = dbContext.Questionnaires.Where(predicate).Select(q => q.Id).Single();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                NavigationManager.NavigateTo("./children/index");
            }
        }
    }



}