@page "/EDIQuestionnaires/SectionD/{ChildId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;

<QuestionnaireNavigation QuestionnaireId=@QuestionnaireId ChildId=@ChildId IsReadOnly=@IsReadOnly></QuestionnaireNavigation>

<QuestionnaireHeader teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@province QuestionnaireId=@QuestionnaireId marginTop="0px"></QuestionnaireHeader>

<!--Convert this to a component with readonly parameter
@if (!IsReadOnly)
{
    <div class="card-footer">
        <button class="savebutton" @onclick="Save"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
    </div>
}
    -->
@code {

    [Parameter]
    public int ChildId { get; set; }

    private List<QuestionnairesConfiguration> headers;
    //private QuestionnairesDataDemographic data;
    private Teacher teacherData;
    private Boolean IsReadOnly;
    private string predicate;
    private string province;
    private int QuestionnaireId;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            try
            {
                if (UserSettings.IsTeacher)
                {
                    //check if child is not it teachers class    
                    predicate = "Id = " + ChildId + " AND TeacherId = " + UserSettings.TeacherId;
                    if (!dbContext.Children.Where(predicate).Any())
                        NavigationManager.NavigateTo("./children/index");
                }
                QuestionnaireId = dbContext.Questionnaires.Where(q => q.QuestionnaireName == "Section B" && q.YearId == UserSettings.YearId).Select(q => q.Id).Single();
                getData();
            }
            catch (Exception ex)
            {
                NavigationManager.NavigateTo("./children/index");
            }
        }
    }

    private void getData()
    {
        predicate = "t=>t.Id == " + ChildId;
        //data = dbContext.QuestionnairesDataDemographics.Where(pred).Single();
        teacherData = dbContext.Children.Where(predicate)
                .Include(c => c.QuestionnairesDataDemographics)
                .Include(c => c.QuestionnairesDataSectionAs)
                .Include(c => c.QuestionnairesDataSectionBs)
                .Include(c => c.QuestionnairesDataSectionCs)
                .Include(c => c.QuestionnairesDataSectionDs)
                .Include(c => c.QuestionnairesDataSectionEs)
                .Include(c => c.Teacher)
                .ThenInclude(t => t.School)
                .ThenInclude(ts => ts.Province)
                .Single().Teacher;

        if (UserSettings.IsAdmin)
        {
            IsReadOnly = true;

            //get the teachers province
            /*var teacher = dbContext.Teachers.Where(s => s.Id == TeacherId)
                              .Include(s => s.School)
                              .ThenInclude(ts => ts.Province).Single();*/

            province = teacherData.School.Province.English.Replace(" ", "");


        }
        else if (UserSettings.IsTeacher)
        {
            IsReadOnly = false;
            province = UserSettings.Province;
        }
        else
        {
            IsReadOnly = true;
            province = teacherData.School.Province.English.Replace(" ", "");
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    /* private async void Save()
     {
         await dbContext.SaveChangesAsync();

         getData();

         StateHasChanged();
     }*/

}