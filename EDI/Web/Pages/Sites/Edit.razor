@page "/sites"
@page "/sites/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ISiteService siteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal;
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Site</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="addnewbutton" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <br />
            <div class="col-md-7" style="margin-left: 24px;">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Details" Expanded="true">
                            <ContentTemplate>
                                <SiteForm @ref="siteform1" SiteModel="@SiteModel" HandleValidSubmit="HandleValidSubmit" />
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
            <div class="col-md-12">
                <EDI.Web.Pages.Schools.Index SiteID=@Id Header="Schools at Site" AllowDelete=false AllowEdit=false></EDI.Web.Pages.Schools.Index>
            </div>            
            <br />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private SiteItemViewModel SiteModel { get; set; } = new SiteItemViewModel();

    SiteForm siteform1 = new SiteForm();

    SfGrid<SchoolItemViewModel> Grid;

    IEnumerable<SchoolItemViewModel> schools;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!user.IsInRole("Administrator"))
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            SiteModel = await siteService.GetSiteItem(Id);

            var allschools = await Task.FromResult(dbContext.Schools.Where(p => p.SiteId == Id).OrderBy(p => p.SchoolNumber).ToList());

            List<SchoolItemViewModel> sivm = new List<SchoolItemViewModel>();

            foreach (var school in allschools)
            {
                var aschool = new SchoolItemViewModel();

                aschool.Id = school.Id;
                aschool.SchoolName = school.SchoolName;
                aschool.SchoolNumber = school.SchoolNumber;
                aschool.Description = school.Description;

                var site = dbContext.Sites.Where(p => p.Id == school.SiteId).FirstOrDefault();
                aschool.SiteNumber = site.SiteNumber;

                aschool.CountryId = school.CountryId;
                var country = dbContext.Countries.Where(p => p.Id == school.CountryId).FirstOrDefault();
                aschool.Country = country.English;

                aschool.ProvinceId = school.ProvinceId;
                var province = dbContext.Provinces.Where(p => p.Id == school.ProvinceId).FirstOrDefault();
                aschool.Province = province.English;

                aschool.City = school.City;
                //aschool.Elpschool = school.Elpschool;
                //aschool.ElpschoolValue = school.Elpschool.HasValue && school.Elpschool.Value ? "Yes" : "No";

                sivm.Add(aschool);
            }

            schools = sivm;
        }
    }

    private async void HandleValidSubmit()
    {
        //Console.WriteLine("OnValidSubmit");
        var totalItems = await siteService.GetDuplicateCount(SiteModel.SiteNumber, siteform1.SiteModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The same Site has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await siteService.UpdateSiteAsync(siteform1.SiteModel);

            Message = "Site updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./sites/index");
    }

    private async void Reset()
    {
        SiteModel = await siteService.GetSiteItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./sites/new");
    }
}