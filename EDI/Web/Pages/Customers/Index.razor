@page "/Customers/index"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ICustomerService customerService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@inject IModalService Modal

<div class="row">
    <div class="col-md-12">
        <div class="card" style="width:1200px;box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Customers Management</strong>
                <div class="pull-right">
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Import Data" @onclick="UploadFile"><i class="fa fa-file-excel fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (customers == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridCustomer" @ref="Grid" DataSource="@customers" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "CsvExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="CustomerAccess"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="ModifiedDate" Direction="SortDirection.Descending"></GridSortColumn>
                                <GridSortColumn Field="Name" Direction="SortDirection.Ascending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(CustomerAccess.ModifiedDate) HeaderText="Modified Date" Format="yyyy-MM-dd" Type="ColumnType.Date" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="15" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Name) HeaderText="Customer" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width="40"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Contact) HeaderText="Contact" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="25"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Email) HeaderText="Email" Width="25"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Phone) HeaderText="Phone" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.AccountNumber) HeaderText="Account #" Width="30" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Fax) HeaderText="Fax" Width="30" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.Mobile) HeaderText="Mobile" Width="30" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(CustomerAccess.TollFree) HeaderText="Toll Free" Width="30" Visible="false"></GridColumn>
                            <GridColumn HeaderText="Website" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30" Visible="false">
                                <Template>
                                    @{
                                        var customer = (context as CustomerAccess);
                                        if (!string.IsNullOrEmpty(customer.Website))
                                        {
                                            <a target="_blank" href="@customer.Website">@customer.Website</a>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    SfGrid<CustomerAccess> Grid;

    IEnumerable<CustomerAccess> customers;

    private string username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            username = user.Identity.Name;

            customers = await Task.FromResult(dbContext.CustomerAccess.ToList());

            this.rowid = 0;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<CustomerAccess> args)
    {
        rowid = args.Data.Id;
    }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridCustomer_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridCustomer_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridCustomer_csvexport")
        {
            this.Grid.CsvExport();
        }
        if (args.Item.Id == "GridCustomer_add")
        {
            NavigationManager.NavigateTo("./customers/new");
            //NewInvoice();
        }
        if (args.Item.Id == "GridCustomer_edit")
        {
            NavigationManager.NavigateTo("./customers/edit/" + this.rowid);
        }
        if (args.Item.Id == "GridCustomer_delete")
        {
            Modal.Show<ConfirmDelete>("Confirm Delete");
            Modal.OnClose += ConfirmDeleteModalClosed;
        }
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await customerService.DeleteCustomerAsync(this.rowid);

            var tmp = new List<CustomerAccess>();
            foreach (var item in customers)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.customers = tmp;
            this.rowid = 0;

            this.Grid.Refresh();
            StateHasChanged();
        }

        Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<CustomerAccess> args)
    {
        NavigationManager.NavigateTo("./customers/edit/" + this.rowid);
    }

    private void UploadFile()
    {
        var parameters = new ModalParameters();

        parameters.Add("DataName", "Customers");

        Modal.Show<UploadFileWindow>("Upload Customers data: ", parameters);
        Modal.OnClose += UploadWindowModalClosed;
    }

    private async void UploadWindowModalClosed(ModalResult modalResult)
    {
        if (modalResult.Data is ErrorViewModel)
        {
            var result = (ErrorViewModel)modalResult.Data;

            if (!string.IsNullOrEmpty(result.message))
            {
                toastService.ShowSuccess(result.message);
            }
            else if(!string.IsNullOrEmpty(result.errormessage))
            {
                toastService.ShowError(result.errormessage);
            }

            customers = await Task.FromResult(dbContext.CustomerAccess.ToList());

            this.Grid.Refresh();
            StateHasChanged();
        }
        Modal.OnClose -= UploadWindowModalClosed;

        StateHasChanged();
    }
}
