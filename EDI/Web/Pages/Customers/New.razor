@page "/Customers/New"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ICustomerService customerService
@inject IModalService Modal
@inject NavigationManager NavigationManager

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}

<br />

<div class="row">
    <div class="col-md-6">
        <div class="card" style="width:700px;box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 20px;margin-left:50px;">
            <div class="card-header">
                <strong>New Customer</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="addnewbutton" data-toggle="tooltip" data-placement="bottom" title="Form Config" @onclick="Config"><i class="fa fa-cog fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <CustomerForm @ref="customerform1" CustomerModel="@CustomerModel" HandleValidSubmit="HandleValidSubmit" />
        </div>

    </div>
</div>

@code {
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private CustomerItemViewModel CustomerModel { get; set; } = new CustomerItemViewModel();

    CustomerForm customerform1 = new CustomerForm();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
    }

    private async void HandleValidSubmit()
    {
        //Console.WriteLine("OnValidSubmit");
        var totalItems = await customerService.GetDuplicateCount(CustomerModel.Name);

        if (totalItems > 0)
        {
            ErrorMessage = "The same customer has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else if (customerform1.FormEmail.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Email))
        {
            toastService.ShowError("Email is required.");
        }
        else if (customerform1.FormPhone.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Phone))
        {
            toastService.ShowError("Phone is required.");
        }
        else if (customerform1.FormContact.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Contact1))
        {
            toastService.ShowError("Contact is required.");
        }
        else if (customerform1.FormContact2.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Contact2))
        {
            toastService.ShowError("Contact is required.");
        }
        else if (customerform1.FormCurrency.IsRequired && (!customerform1.CustomerModel.CurrencyID.HasValue || customerform1.CustomerModel.CurrencyID.Value == 0))
        {
            toastService.ShowError("Currency is required.");
        }
        else if (customerform1.FormAddress1.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.BillingAddress1))
        {
            toastService.ShowError("Address line 1 is required.");
        }
        else if (customerform1.FormAddress2.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.BillingAddress2))
        {
            toastService.ShowError("Address line 2 is required.");
        }
        else if (customerform1.FormCity.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.BillingCity))
        {
            toastService.ShowError("City is required.");
        }
        else if (customerform1.FormPostal.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.BillingPostal))
        {
            toastService.ShowError("Postal is required.");
        }
        else if (customerform1.FormCountry.IsRequired && (!customerform1.CustomerModel.BillingCountryID.HasValue || customerform1.CustomerModel.BillingCountryID.Value == 0))
        {
            toastService.ShowError("Country is required.");
        }
        else if (customerform1.FormProvince.IsRequired && (!customerform1.CustomerModel.BillingProvinceID.HasValue || customerform1.CustomerModel.BillingProvinceID.Value == 0))
        {
            toastService.ShowError("Province is required.");
        }
        else if (customerform1.FormHasShippingAddress.IsRequired && !customerform1.CustomerModel.HasShippingAddress.HasValue)
        {
            toastService.ShowError("Has Shipping Address is required.");
        }
        else if (customerform1.FormShippingContact.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingContact))
        {
            toastService.ShowError("Ship to contact is required.");
        }
        else if (customerform1.FormShippingCountry.IsRequired && (!customerform1.CustomerModel.ShippingCountryID.HasValue || customerform1.CustomerModel.ShippingCountryID.Value == 0))
        {
            toastService.ShowError("Shipping Country is required.");
        }
        else if (customerform1.FormShippingProvince.IsRequired && (!customerform1.CustomerModel.ShippingProvinceID.HasValue || customerform1.CustomerModel.ShippingProvinceID.Value == 0))
        {
            toastService.ShowError("Shipping Province is required.");
        }
        else if (customerform1.FormShippingAddress1.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingAddress1))
        {
            toastService.ShowError("Shipping Address line 1 is required.");
        }
        else if (customerform1.FormShippingAddress2.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingAddress2))
        {
            toastService.ShowError("Shipping Address line 2 is required.");
        }
        else if (customerform1.FormShippingCity.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingCity))
        {
            toastService.ShowError("Shipping City is required.");
        }
        else if (customerform1.FormShippingPostal.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingPostal))
        {
            toastService.ShowError("Shipping Postal is required.");
        }
        else if (customerform1.FormShippingPhone.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.ShippingPhone))
        {
            toastService.ShowError("Shipping Phone is required.");
        }
        else if (customerform1.FormDeliveryInstructions.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.DeliveryInstructions))
        {
            toastService.ShowError("Delivery Instructions is required.");
        }
        else if (customerform1.FormAccountNumber.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.AccountNumber))
        {
            toastService.ShowError("Account Number is required.");
        }
        else if (customerform1.FormFax.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Fax))
        {
            toastService.ShowError("Fax is required.");
        }
        else if (customerform1.FormMobile.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Mobile))
        {
            toastService.ShowError("Mobile is required.");
        }
        else if (customerform1.FormTollFree.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.TollFree))
        {
            toastService.ShowError("TollFree is required.");
        }
        else if (customerform1.FormWebsite.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.Website))
        {
            toastService.ShowError("Website is required.");
        }
        else if (customerform1.FormInternalNotes.IsRequired && string.IsNullOrEmpty(customerform1.CustomerModel.InternalNotes))
        {
            toastService.ShowError("Internal Notes is required.");
        }
        else
        {
            await customerService.CreateCustomerAsync(customerform1.CustomerModel);

            Message = "New customer added successfully.";
            toastService.ShowSuccess(Message);
            CustomerModel = new CustomerItemViewModel();
            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./customers/index");
    }

    private async void Reset()
    {
        CustomerModel = new CustomerItemViewModel();
        StateHasChanged();
    }

    private void Config()
    {
        NavigationManager.NavigateTo("./customers/FormConfig/0");
    }
}
