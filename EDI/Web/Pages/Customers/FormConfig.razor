@page "/customers/formconfig/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Buttons
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject IFormService formService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-6">
        <div class="card" style="width:700px;box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 20px;margin-left:50px;">
            <div class="card-header">
                <strong>Customer Form Config</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Name">Customer: </label>
                    <div class="input-group col-md-2">
                        <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="true" Disabled="true"></SfCheckBox>
                    </div>
                    <div class="input-group col-md-2">
                        <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="true" Disabled="true"></SfCheckBox>
                    </div>
                    <div class="input-group col-md-2">
                        <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="true" Disabled="true"></SfCheckBox>
                    </div>
                </div>
                @if (FormEmail != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Email">Email: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormEmail.IsRequired" @onchange="IsRequiredEmailChange"></SfCheckBox>
                        </div>
                        @if (FormEmail.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormEmail.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormEmail.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormEmail.IsVisible" @onchange="IsVisibleEmailChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormEmail.IsEnabled" @onchange="IsEnabledEmailChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormPhone != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Phone">Phone: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormPhone.IsRequired" @onchange="IsRequiredPhoneChange"></SfCheckBox>
                        </div>
                        @if (FormPhone.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormPhone.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormPhone.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormPhone.IsVisible" @onchange="IsVisiblePhoneChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormPhone.IsEnabled" @onchange="IsEnabledPhoneChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormContact != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact">Contact: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormContact.IsRequired" @onchange="IsRequiredContactChange"></SfCheckBox>
                        </div>
                        @if (FormContact.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormContact.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormContact.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormContact.IsVisible" @onchange="IsVisibleContactChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormContact.IsEnabled" @onchange="IsEnabledContactChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormContact2 != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact2">Contact2: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormContact2.IsRequired" @onchange="IsRequiredContact2Change"></SfCheckBox>
                        </div>
                        @if (FormContact2.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormContact2.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormContact2.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormContact2.IsVisible" @onchange="IsVisibleContact2Change"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormContact2.IsEnabled" @onchange="IsEnabledContact2Change"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormCurrency != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Currency">Currency: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormCurrency.IsRequired" @onchange="IsRequiredCurrencyChange"></SfCheckBox>
                        </div>
                        @if (FormCurrency.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCurrency.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCurrency.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCurrency.IsVisible" @onchange="IsVisibleCurrencyChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCurrency.IsEnabled" @onchange="IsEnabledCurrencyChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormAddress1 != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address1">Address Line 1: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormAddress1.IsRequired" @onchange="IsRequiredAddress1Change"></SfCheckBox>
                        </div>
                        @if (FormAddress1.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAddress1.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAddress1.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAddress1.IsVisible" @onchange="IsVisibleAddress1Change"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAddress1.IsEnabled" @onchange="IsEnabledAddress1Change"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormAddress2 != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address2">Address Line 2: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormAddress2.IsRequired" @onchange="IsRequiredAddress2Change"></SfCheckBox>
                        </div>
                        @if (FormAddress2.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAddress2.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAddress2.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAddress2.IsVisible" @onchange="IsVisibleAddress2Change"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAddress2.IsEnabled" @onchange="IsEnabledAddress2Change"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormCity != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="City">City: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormCity.IsRequired" @onchange="IsRequiredCityChange"></SfCheckBox>
                        </div>
                        @if (FormCity.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCity.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCity.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCity.IsVisible" @onchange="IsVisibleCityChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCity.IsEnabled" @onchange="IsEnabledCityChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormPostal != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Postal">Postal/Zip: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormPostal.IsRequired" @onchange="IsRequiredPostalChange"></SfCheckBox>
                        </div>
                        @if (FormPostal.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormPostal.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormPostal.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormPostal.IsVisible" @onchange="IsVisiblePostalChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormPostal.IsEnabled" @onchange="IsEnabledPostalChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormCountry != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Country">Country: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormCountry.IsRequired" @onchange="IsRequiredCountryChange"></SfCheckBox>
                        </div>
                        @if (FormCountry.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCountry.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCountry.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormCountry.IsVisible" @onchange="IsVisibleCountryChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormCountry.IsEnabled" @onchange="IsEnabledCountryChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormProvince != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Province">Province: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormProvince.IsRequired" @onchange="IsRequiredProvinceChange"></SfCheckBox>
                        </div>
                        @if (FormProvince.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormProvince.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormProvince.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormProvince.IsVisible" @onchange="IsVisibleProvinceChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormProvince.IsEnabled" @onchange="IsEnabledProvinceChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormHasShippingAddress != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="HasShippingAddress">Has Shipping Address: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormHasShippingAddress.IsRequired" @onchange="IsRequiredHasShippingAddressChange"></SfCheckBox>
                        </div>
                        @if (FormHasShippingAddress.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormHasShippingAddress.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormHasShippingAddress.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormHasShippingAddress.IsVisible" @onchange="IsVisibleHasShippingAddressChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormHasShippingAddress.IsEnabled" @onchange="IsEnabledHasShippingAddressChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingContact != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingContact">Contact: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingContact.IsRequired" @onchange="IsRequiredShippingContactChange"></SfCheckBox>
                        </div>
                        @if (FormShippingContact.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingContact.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingContact.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingContact.IsVisible" @onchange="IsVisibleShippingContactChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingContact.IsEnabled" @onchange="IsEnabledShippingContactChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingCountry != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingCountry">Country: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingCountry.IsRequired" @onchange="IsRequiredShippingCountryChange"></SfCheckBox>
                        </div>
                        @if (FormShippingCountry.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingCountry.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingCountry.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingCountry.IsVisible" @onchange="IsVisibleShippingCountryChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingCountry.IsEnabled" @onchange="IsEnabledShippingCountryChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingProvince != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingProvince">Province: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingProvince.IsRequired" @onchange="IsRequiredShippingProvinceChange"></SfCheckBox>
                        </div>
                        @if (FormShippingProvince.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingProvince.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingProvince.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingProvince.IsVisible" @onchange="IsVisibleShippingProvinceChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingProvince.IsEnabled" @onchange="IsEnabledShippingProvinceChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingAddress1 != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingAddress1">Address1: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress1.IsRequired" @onchange="IsRequiredShippingAddress1Change"></SfCheckBox>
                        </div>
                        @if (FormShippingAddress1.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress1.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress1.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress1.IsVisible" @onchange="IsVisibleShippingAddress1Change"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress1.IsEnabled" @onchange="IsEnabledShippingAddress1Change"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingAddress2 != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingAddress2">Address2: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress2.IsRequired" @onchange="IsRequiredShippingAddress2Change"></SfCheckBox>
                        </div>
                        @if (FormShippingAddress2.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress2.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress2.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress2.IsVisible" @onchange="IsVisibleShippingAddress2Change"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingAddress2.IsEnabled" @onchange="IsEnabledShippingAddress2Change"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingCity != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingCity">City: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingCity.IsRequired" @onchange="IsRequiredShippingCityChange"></SfCheckBox>
                        </div>
                        @if (FormShippingCity.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingCity.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingCity.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingCity.IsVisible" @onchange="IsVisibleShippingCityChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingCity.IsEnabled" @onchange="IsEnabledShippingCityChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingPostal != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingPostal">Postal/Zip: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingPostal.IsRequired" @onchange="IsRequiredShippingPostalChange"></SfCheckBox>
                        </div>
                        @if (FormShippingPostal.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingPostal.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingPostal.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingPostal.IsVisible" @onchange="IsVisibleShippingPostalChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingPostal.IsEnabled" @onchange="IsEnabledShippingPostalChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormShippingPhone != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingPhone">Phone: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormShippingPhone.IsRequired" @onchange="IsRequiredShippingPhoneChange"></SfCheckBox>
                        </div>
                        @if (FormShippingPhone.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingPhone.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingPhone.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormShippingPhone.IsVisible" @onchange="IsVisibleShippingPhoneChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormShippingPhone.IsEnabled" @onchange="IsEnabledShippingPhoneChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormDeliveryInstructions != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="DeliveryInstructions">Delivery Instructions: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormDeliveryInstructions.IsRequired" @onchange="IsRequiredDeliveryInstructionsChange"></SfCheckBox>
                        </div>
                        @if (FormDeliveryInstructions.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormDeliveryInstructions.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormDeliveryInstructions.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormDeliveryInstructions.IsVisible" @onchange="IsVisibleDeliveryInstructionsChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormDeliveryInstructions.IsEnabled" @onchange="IsEnabledDeliveryInstructionsChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormAccountNumber != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="AccountNumber">Account Number: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormAccountNumber.IsRequired" @onchange="IsRequiredAccountNumberChange"></SfCheckBox>
                        </div>
                        @if (FormAccountNumber.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAccountNumber.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAccountNumber.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormAccountNumber.IsVisible" @onchange="IsVisibleAccountNumberChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormAccountNumber.IsEnabled" @onchange="IsEnabledAccountNumberChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormFax != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Fax">Fax: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormFax.IsRequired" @onchange="IsRequiredFaxChange"></SfCheckBox>
                        </div>
                        @if (FormFax.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormFax.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormFax.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormFax.IsVisible" @onchange="IsVisibleFaxChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormFax.IsEnabled" @onchange="IsEnabledFaxChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormMobile != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Mobile">Mobile: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormMobile.IsRequired" @onchange="IsRequiredMobileChange"></SfCheckBox>
                        </div>
                        @if (FormMobile.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormMobile.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormMobile.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormMobile.IsVisible" @onchange="IsVisibleMobileChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormMobile.IsEnabled" @onchange="IsEnabledMobileChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormTollFree != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="TollFree">TollFree: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormTollFree.IsRequired" @onchange="IsRequiredTollFreeChange"></SfCheckBox>
                        </div>
                        @if (FormTollFree.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormTollFree.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormTollFree.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormTollFree.IsVisible" @onchange="IsVisibleTollFreeChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormTollFree.IsEnabled" @onchange="IsEnabledTollFreeChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormWebsite != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Website">Website: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormWebsite.IsRequired" @onchange="IsRequiredWebsiteChange"></SfCheckBox>
                        </div>
                        @if (FormWebsite.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormWebsite.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormWebsite.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormWebsite.IsVisible" @onchange="IsVisibleWebsiteChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormWebsite.IsEnabled" @onchange="IsEnabledWebsiteChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
                @if (FormInternalNotes != null)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="InternalNotes">Internal Notes: </label>
                        <div class="input-group col-md-2">
                            <SfCheckBox Label="Required" LabelPosition="LabelPosition.After" Checked="@FormInternalNotes.IsRequired" @onchange="IsRequiredInternalNotesChange"></SfCheckBox>
                        </div>
                        @if (FormInternalNotes.IsRequired)
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormInternalNotes.IsVisible" Disabled="true"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormInternalNotes.IsEnabled" Disabled="true"></SfCheckBox>
                            </div>
                        }
                        else
                        {
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Visible" LabelPosition="LabelPosition.After" Checked="@FormInternalNotes.IsVisible" @onchange="IsVisibleInternalNotesChange"></SfCheckBox>
                            </div>
                            <div class="input-group col-md-2">
                                <SfCheckBox Label="Enabled" LabelPosition="LabelPosition.After" Checked="@FormInternalNotes.IsEnabled" @onchange="IsEnabledInternalNotesChange"></SfCheckBox>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="card-footer">
                <button class="savebutton" @onclick="Save"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    public FormItemViewModel FormEmail { get; set; }
    public FormItemViewModel FormPhone { get; set; }
    public FormItemViewModel FormContact { get; set; }
    public FormItemViewModel FormContact2 { get; set; }
    public FormItemViewModel FormCurrency { get; set; }
    public FormItemViewModel FormAddress1 { get; set; }
    public FormItemViewModel FormAddress2 { get; set; }
    public FormItemViewModel FormCity { get; set; }
    public FormItemViewModel FormPostal { get; set; }
    public FormItemViewModel FormCountry { get; set; }
    public FormItemViewModel FormProvince { get; set; }
    public FormItemViewModel FormHasShippingAddress { get; set; }
    public FormItemViewModel FormShippingContact { get; set; }
    public FormItemViewModel FormShippingCountry { get; set; }
    public FormItemViewModel FormShippingProvince { get; set; }
    public FormItemViewModel FormShippingAddress1 { get; set; }
    public FormItemViewModel FormShippingAddress2 { get; set; }
    public FormItemViewModel FormShippingCity { get; set; }
    public FormItemViewModel FormShippingPostal { get; set; }
    public FormItemViewModel FormShippingPhone { get; set; }
    public FormItemViewModel FormDeliveryInstructions { get; set; }
    public FormItemViewModel FormAccountNumber { get; set; }
    public FormItemViewModel FormFax { get; set; }
    public FormItemViewModel FormMobile { get; set; }
    public FormItemViewModel FormTollFree { get; set; }
    public FormItemViewModel FormWebsite { get; set; }
    public FormItemViewModel FormInternalNotes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            FormEmail = await formService.GetFormItem("CustomerForm", "Email", 1);
            if (FormEmail.Id == 0)
            {
                FormEmail.FormName = "CustomerForm";
                FormEmail.FieldName = "Email";
                FormEmail.Order = 1;
            }

            FormPhone = await formService.GetFormItem("CustomerForm", "Phone", 2);
            if (FormPhone.Id == 0)
            {
                FormPhone.FormName = "CustomerForm";
                FormPhone.FieldName = "Phone";
                FormPhone.Order = 2;
            }

            FormContact = await formService.GetFormItem("CustomerForm", "Contact", 3);
            if (FormContact.Id == 0)
            {
                FormContact.FormName = "CustomerForm";
                FormContact.FieldName = "Contact";
                FormContact.Order = 3;
            }

            FormContact2 = await formService.GetFormItem("CustomerForm", "Contact2", 4);
            if (FormContact2.Id == 0)
            {
                FormContact2.FormName = "CustomerForm";
                FormContact2.FieldName = "Contact2";
                FormContact2.Order = 4;
            }

            FormCurrency = await formService.GetFormItem("CustomerForm", "Currency", 5);
            if (FormCurrency.Id == 0)
            {
                FormCurrency.FormName = "CustomerForm";
                FormCurrency.FieldName = "Currency";
                FormCurrency.Order = 5;
            }

            FormAddress1 = await formService.GetFormItem("CustomerForm", "Address1", 6);
            if (FormAddress1.Id == 0)
            {
                FormAddress1.FormName = "CustomerForm";
                FormAddress1.FieldName = "Address1";
                FormAddress1.Order = 6;
            }

            FormAddress2 = await formService.GetFormItem("CustomerForm", "Address2", 7);
            if (FormAddress2.Id == 0)
            {
                FormAddress2.FormName = "CustomerForm";
                FormAddress2.FieldName = "Address2";
                FormAddress2.Order = 7;
            }

            FormCity = await formService.GetFormItem("CustomerForm", "City", 8);
            if (FormCity.Id == 0)
            {
                FormCity.FormName = "CustomerForm";
                FormCity.FieldName = "City";
                FormCity.Order = 8;
            }

            FormPostal = await formService.GetFormItem("CustomerForm", "Postal", 9);
            if (FormPostal.Id == 0)
            {
                FormPostal.FormName = "CustomerForm";
                FormPostal.FieldName = "Postal";
                FormPostal.Order = 9;
            }

            FormCountry = await formService.GetFormItem("CustomerForm", "Country", 10);
            if (FormCountry.Id == 0)
            {
                FormCountry.FormName = "CustomerForm";
                FormCountry.FieldName = "Country";
                FormCountry.Order = 10;
            }

            FormProvince = await formService.GetFormItem("CustomerForm", "Province", 11);
            if (FormProvince.Id == 0)
            {
                FormProvince.FormName = "CustomerForm";
                FormProvince.FieldName = "Province";
                FormProvince.Order = 11;
            }

            FormHasShippingAddress = await formService.GetFormItem("CustomerForm", "HasShippingAddress", 12);
            if (FormHasShippingAddress.Id == 0)
            {
                FormHasShippingAddress.FormName = "CustomerForm";
                FormHasShippingAddress.FieldName = "HasShippingAddress";
                FormHasShippingAddress.Order = 12;
            }

            FormShippingContact = await formService.GetFormItem("CustomerForm", "ShippingContact", 13);
            if (FormShippingContact.Id == 0)
            {
                FormShippingContact.FormName = "CustomerForm";
                FormShippingContact.FieldName = "ShippingContact";
                FormShippingContact.Order = 13;
            }

            FormShippingCountry = await formService.GetFormItem("CustomerForm", "ShippingCountry", 14);
            if (FormShippingCountry.Id == 0)
            {
                FormShippingCountry.FormName = "CustomerForm";
                FormShippingCountry.FieldName = "ShippingCountry";
                FormShippingCountry.Order = 14;
            }

            FormShippingProvince = await formService.GetFormItem("CustomerForm", "ShippingProvince", 15);
            if (FormShippingProvince.Id == 0)
            {
                FormShippingProvince.FormName = "CustomerForm";
                FormShippingProvince.FieldName = "ShippingProvince";
                FormShippingProvince.Order = 15;
            }

            FormShippingAddress1 = await formService.GetFormItem("CustomerForm", "ShippingAddress1", 16);
            if (FormShippingAddress1.Id == 0)
            {
                FormShippingAddress1.FormName = "CustomerForm";
                FormShippingAddress1.FieldName = "ShippingAddress1";
                FormShippingAddress1.Order = 16;
            }

            FormShippingAddress2 = await formService.GetFormItem("CustomerForm", "ShippingAddress2", 17);
            if (FormShippingAddress2.Id == 0)
            {
                FormShippingAddress2.FormName = "CustomerForm";
                FormShippingAddress2.FieldName = "ShippingAddress2";
                FormShippingAddress2.Order = 17;
            }

            FormShippingCity = await formService.GetFormItem("CustomerForm", "ShippingCity", 18);
            if (FormShippingCity.Id == 0)
            {
                FormShippingCity.FormName = "CustomerForm";
                FormShippingCity.FieldName = "ShippingCity";
                FormShippingCity.Order = 18;
            }

            FormShippingPostal = await formService.GetFormItem("CustomerForm", "ShippingPostal", 19);
            if (FormShippingPostal.Id == 0)
            {
                FormShippingPostal.FormName = "CustomerForm";
                FormShippingPostal.FieldName = "ShippingPostal";
                FormShippingPostal.Order = 19;
            }

            FormShippingPhone = await formService.GetFormItem("CustomerForm", "ShippingPhone", 20);
            if (FormShippingPhone.Id == 0)
            {
                FormShippingPhone.FormName = "CustomerForm";
                FormShippingPhone.FieldName = "ShippingPhone";
                FormShippingPhone.Order = 20;
            }

            FormDeliveryInstructions = await formService.GetFormItem("CustomerForm", "DeliveryInstructions", 21);
            if (FormDeliveryInstructions.Id == 0)
            {
                FormDeliveryInstructions.FormName = "CustomerForm";
                FormDeliveryInstructions.FieldName = "DeliveryInstructions";
                FormDeliveryInstructions.Order = 21;
            }

            FormAccountNumber = await formService.GetFormItem("CustomerForm", "AccountNumber", 22);
            if (FormAccountNumber.Id == 0)
            {
                FormAccountNumber.FormName = "CustomerForm";
                FormAccountNumber.FieldName = "AccountNumber";
                FormAccountNumber.Order = 22;
            }

            FormFax = await formService.GetFormItem("CustomerForm", "Fax", 23);
            if (FormFax.Id == 0)
            {
                FormFax.FormName = "CustomerForm";
                FormFax.FieldName = "Fax";
                FormFax.Order = 23;
            }

            FormMobile = await formService.GetFormItem("CustomerForm", "Mobile", 24);
            if (FormMobile.Id == 0)
            {
                FormMobile.FormName = "CustomerForm";
                FormMobile.FieldName = "Mobile";
                FormMobile.Order = 24;
            }

            FormTollFree = await formService.GetFormItem("CustomerForm", "TollFree", 25);
            if (FormTollFree.Id == 0)
            {
                FormTollFree.FormName = "CustomerForm";
                FormTollFree.FieldName = "TollFree";
                FormTollFree.Order = 25;
            }

            FormWebsite = await formService.GetFormItem("CustomerForm", "Website", 26);
            if (FormWebsite.Id == 0)
            {
                FormWebsite.FormName = "CustomerForm";
                FormWebsite.FieldName = "Website";
                FormWebsite.Order = 26;
            }

            FormInternalNotes = await formService.GetFormItem("CustomerForm", "InternalNotes", 27);
            if (FormInternalNotes.Id == 0)
            {
                FormInternalNotes.FormName = "CustomerForm";
                FormInternalNotes.FieldName = "InternalNotes";
                FormInternalNotes.Order = 27;
            }
        }
    }

    private async void Save()
    {
        if (FormEmail.Id == 0)
            await formService.CreateFormAsync(FormEmail);
        else
            await formService.UpdateFormAsync(FormEmail);

        if (FormPhone.Id == 0)
            await formService.CreateFormAsync(FormPhone);
        else
            await formService.UpdateFormAsync(FormPhone);

        if (FormContact.Id == 0)
            await formService.CreateFormAsync(FormContact);
        else
            await formService.UpdateFormAsync(FormContact);

        if (FormContact2.Id == 0)
            await formService.CreateFormAsync(FormContact2);
        else
            await formService.UpdateFormAsync(FormContact2);

        if (FormCurrency.Id == 0)
            await formService.CreateFormAsync(FormCurrency);
        else
            await formService.UpdateFormAsync(FormCurrency);

        if (FormAddress1.Id == 0)
            await formService.CreateFormAsync(FormAddress1);
        else
            await formService.UpdateFormAsync(FormAddress1);

        if (FormAddress2.Id == 0)
            await formService.CreateFormAsync(FormAddress2);
        else
            await formService.UpdateFormAsync(FormAddress2);

        if (FormCity.Id == 0)
            await formService.CreateFormAsync(FormCity);
        else
            await formService.UpdateFormAsync(FormCity);

        if (FormPostal.Id == 0)
            await formService.CreateFormAsync(FormPostal);
        else
            await formService.UpdateFormAsync(FormPostal);

        if (FormCountry.Id == 0)
            await formService.CreateFormAsync(FormCountry);
        else
            await formService.UpdateFormAsync(FormCountry);

        if (FormProvince.Id == 0)
            await formService.CreateFormAsync(FormProvince);
        else
            await formService.UpdateFormAsync(FormProvince);

        if (FormHasShippingAddress.Id == 0)
            await formService.CreateFormAsync(FormHasShippingAddress);
        else
            await formService.UpdateFormAsync(FormHasShippingAddress);

        if (FormShippingContact.Id == 0)
            await formService.CreateFormAsync(FormShippingContact);
        else
            await formService.UpdateFormAsync(FormShippingContact);

        if (FormShippingCountry.Id == 0)
            await formService.CreateFormAsync(FormShippingCountry);
        else
            await formService.UpdateFormAsync(FormShippingCountry);

        if (FormShippingProvince.Id == 0)
            await formService.CreateFormAsync(FormShippingProvince);
        else
            await formService.UpdateFormAsync(FormShippingProvince);

        if (FormShippingAddress1.Id == 0)
            await formService.CreateFormAsync(FormShippingAddress1);
        else
            await formService.UpdateFormAsync(FormShippingAddress1);

        if (FormShippingAddress2.Id == 0)
            await formService.CreateFormAsync(FormShippingAddress2);
        else
            await formService.UpdateFormAsync(FormShippingAddress2);

        if (FormShippingCity.Id == 0)
            await formService.CreateFormAsync(FormShippingCity);
        else
            await formService.UpdateFormAsync(FormShippingCity);

        if (FormShippingPostal.Id == 0)
            await formService.CreateFormAsync(FormShippingPostal);
        else
            await formService.UpdateFormAsync(FormShippingPostal);

        if (FormShippingPhone.Id == 0)
            await formService.CreateFormAsync(FormShippingPhone);
        else
            await formService.UpdateFormAsync(FormShippingPhone);

        if (FormDeliveryInstructions.Id == 0)
            await formService.CreateFormAsync(FormDeliveryInstructions);
        else
            await formService.UpdateFormAsync(FormDeliveryInstructions);

        if (FormAccountNumber.Id == 0)
            await formService.CreateFormAsync(FormAccountNumber);
        else
            await formService.UpdateFormAsync(FormAccountNumber);

        if (FormFax.Id == 0)
            await formService.CreateFormAsync(FormFax);
        else
            await formService.UpdateFormAsync(FormFax);

        if (FormMobile.Id == 0)
            await formService.CreateFormAsync(FormMobile);
        else
            await formService.UpdateFormAsync(FormMobile);

        if (FormTollFree.Id == 0)
            await formService.CreateFormAsync(FormTollFree);
        else
            await formService.UpdateFormAsync(FormTollFree);

        if (FormWebsite.Id == 0)
            await formService.CreateFormAsync(FormWebsite);
        else
            await formService.UpdateFormAsync(FormWebsite);

        if (FormInternalNotes.Id == 0)
            await formService.CreateFormAsync(FormInternalNotes);
        else
            await formService.UpdateFormAsync(FormInternalNotes);

        Message = "Form Configuration updated successfully.";

        toastService.ShowSuccess(Message);

        StateHasChanged();
    }

    private void Exit()
    {
        if (this.Id > 0)
            NavigationManager.NavigateTo("./customers/edit/" + this.Id);
        else
            NavigationManager.NavigateTo("./customers/new");
    }

    private async void Reset()
    {
        FormEmail = await formService.GetFormItem("CustomerForm", "Email", 1);
        if (FormEmail.Id == 0)
        {
            FormEmail.FormName = "CustomerForm";
            FormEmail.FieldName = "Email";
            FormEmail.Order = 1;
        }

        FormPhone = await formService.GetFormItem("CustomerForm", "Phone", 2);
        if (FormPhone.Id == 0)
        {
            FormPhone.FormName = "CustomerForm";
            FormPhone.FieldName = "Phone";
            FormPhone.Order = 2;
        }

        FormContact = await formService.GetFormItem("CustomerForm", "Contact", 3);
        if (FormContact.Id == 0)
        {
            FormContact.FormName = "CustomerForm";
            FormContact.FieldName = "Contact";
            FormContact.Order = 3;
        }

        FormContact2 = await formService.GetFormItem("CustomerForm", "Contact2", 4);
        if (FormContact2.Id == 0)
        {
            FormContact2.FormName = "CustomerForm";
            FormContact2.FieldName = "Contact2";
            FormContact2.Order = 4;
        }

        FormCurrency = await formService.GetFormItem("CustomerForm", "Currency", 5);
        if (FormCurrency.Id == 0)
        {
            FormCurrency.FormName = "CustomerForm";
            FormCurrency.FieldName = "Currency";
            FormCurrency.Order = 5;
        }

        FormAddress1 = await formService.GetFormItem("CustomerForm", "Address1", 6);
        if (FormAddress1.Id == 0)
        {
            FormAddress1.FormName = "CustomerForm";
            FormAddress1.FieldName = "Address1";
            FormAddress1.Order = 6;
        }

        FormAddress2 = await formService.GetFormItem("CustomerForm", "Address2", 7);
        if (FormAddress2.Id == 0)
        {
            FormAddress2.FormName = "CustomerForm";
            FormAddress2.FieldName = "Address2";
            FormAddress2.Order = 7;
        }

        FormCity = await formService.GetFormItem("CustomerForm", "City", 8);
        if (FormCity.Id == 0)
        {
            FormCity.FormName = "CustomerForm";
            FormCity.FieldName = "City";
            FormCity.Order = 8;
        }

        FormPostal = await formService.GetFormItem("CustomerForm", "Postal", 9);
        if (FormPostal.Id == 0)
        {
            FormPostal.FormName = "CustomerForm";
            FormPostal.FieldName = "Postal";
            FormPostal.Order = 9;
        }

        FormCountry = await formService.GetFormItem("CustomerForm", "Country", 10);
        if (FormCountry.Id == 0)
        {
            FormCountry.FormName = "CustomerForm";
            FormCountry.FieldName = "Country";
            FormCountry.Order = 10;
        }

        FormProvince = await formService.GetFormItem("CustomerForm", "Province", 11);
        if (FormProvince.Id == 0)
        {
            FormProvince.FormName = "CustomerForm";
            FormProvince.FieldName = "Province";
            FormProvince.Order = 11;
        }

        FormHasShippingAddress = await formService.GetFormItem("CustomerForm", "HasShippingAddress", 12);
        if (FormHasShippingAddress.Id == 0)
        {
            FormHasShippingAddress.FormName = "CustomerForm";
            FormHasShippingAddress.FieldName = "HasShippingAddress";
            FormHasShippingAddress.Order = 12;
        }

        FormShippingContact = await formService.GetFormItem("CustomerForm", "ShippingContact", 13);
        if (FormShippingContact.Id == 0)
        {
            FormShippingContact.FormName = "CustomerForm";
            FormShippingContact.FieldName = "ShippingContact";
            FormShippingContact.Order = 13;
        }

        FormShippingCountry = await formService.GetFormItem("CustomerForm", "ShippingCountry", 14);
        if (FormShippingCountry.Id == 0)
        {
            FormShippingCountry.FormName = "CustomerForm";
            FormShippingCountry.FieldName = "ShippingCountry";
            FormShippingCountry.Order = 14;
        }

        FormShippingProvince = await formService.GetFormItem("CustomerForm", "ShippingProvince", 15);
        if (FormShippingProvince.Id == 0)
        {
            FormShippingProvince.FormName = "CustomerForm";
            FormShippingProvince.FieldName = "ShippingProvince";
            FormShippingProvince.Order = 15;
        }

        FormShippingAddress1 = await formService.GetFormItem("CustomerForm", "ShippingAddress1", 16);
        if (FormShippingAddress1.Id == 0)
        {
            FormShippingAddress1.FormName = "CustomerForm";
            FormShippingAddress1.FieldName = "ShippingAddress1";
            FormShippingAddress1.Order = 16;
        }

        FormShippingAddress2 = await formService.GetFormItem("CustomerForm", "ShippingAddress2", 17);
        if (FormShippingAddress2.Id == 0)
        {
            FormShippingAddress2.FormName = "CustomerForm";
            FormShippingAddress2.FieldName = "ShippingAddress2";
            FormShippingAddress2.Order = 17;
        }

        FormShippingCity = await formService.GetFormItem("CustomerForm", "ShippingCity", 18);
        if (FormShippingCity.Id == 0)
        {
            FormShippingCity.FormName = "CustomerForm";
            FormShippingCity.FieldName = "ShippingCity";
            FormShippingCity.Order = 18;
        }

        FormShippingPostal = await formService.GetFormItem("CustomerForm", "ShippingPostal", 19);
        if (FormShippingPostal.Id == 0)
        {
            FormShippingPostal.FormName = "CustomerForm";
            FormShippingPostal.FieldName = "ShippingPostal";
            FormShippingPostal.Order = 19;
        }

        FormShippingPhone = await formService.GetFormItem("CustomerForm", "ShippingPhone", 20);
        if (FormShippingPhone.Id == 0)
        {
            FormShippingPhone.FormName = "CustomerForm";
            FormShippingPhone.FieldName = "ShippingPhone";
            FormShippingPhone.Order = 20;
        }

        FormDeliveryInstructions = await formService.GetFormItem("CustomerForm", "DeliveryInstructions", 21);
        if (FormDeliveryInstructions.Id == 0)
        {
            FormDeliveryInstructions.FormName = "CustomerForm";
            FormDeliveryInstructions.FieldName = "DeliveryInstructions";
            FormDeliveryInstructions.Order = 21;
        }

        FormAccountNumber = await formService.GetFormItem("CustomerForm", "AccountNumber", 22);
        if (FormAccountNumber.Id == 0)
        {
            FormAccountNumber.FormName = "CustomerForm";
            FormAccountNumber.FieldName = "AccountNumber";
            FormAccountNumber.Order = 22;
        }

        FormFax = await formService.GetFormItem("CustomerForm", "Fax", 23);
        if (FormFax.Id == 0)
        {
            FormFax.FormName = "CustomerForm";
            FormFax.FieldName = "Fax";
            FormFax.Order = 23;
        }

        FormMobile = await formService.GetFormItem("CustomerForm", "Mobile", 24);
        if (FormMobile.Id == 0)
        {
            FormMobile.FormName = "CustomerForm";
            FormMobile.FieldName = "Mobile";
            FormMobile.Order = 24;
        }

        FormTollFree = await formService.GetFormItem("CustomerForm", "TollFree", 25);
        if (FormTollFree.Id == 0)
        {
            FormTollFree.FormName = "CustomerForm";
            FormTollFree.FieldName = "TollFree";
            FormTollFree.Order = 25;
        }

        FormWebsite = await formService.GetFormItem("CustomerForm", "Website", 26);
        if (FormWebsite.Id == 0)
        {
            FormWebsite.FormName = "CustomerForm";
            FormWebsite.FieldName = "Website";
            FormWebsite.Order = 26;
        }

        FormInternalNotes = await formService.GetFormItem("CustomerForm", "InternalNotes", 27);
        if (FormInternalNotes.Id == 0)
        {
            FormInternalNotes.FormName = "CustomerForm";
            FormInternalNotes.FieldName = "InternalNotes";
            FormInternalNotes.Order = 27;
        }

        StateHasChanged();
    }

    private void IsRequiredEmailChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormEmail.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormEmail.IsRequired = isrequired;

            if (FormEmail.IsRequired)
            {
                FormEmail.IsVisible = true;
                FormEmail.IsEnabled = true;
            }
        }
    }

    private void IsVisibleEmailChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormEmail.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormEmail.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledEmailChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormEmail.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormEmail.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredPhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPhone.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormPhone.IsRequired = isrequired;

            if (FormPhone.IsRequired)
            {
                FormPhone.IsVisible = true;
                FormPhone.IsEnabled = true;
            }
        }
    }

    private void IsVisiblePhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPhone.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormPhone.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledPhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPhone.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormPhone.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormContact.IsRequired = isrequired;

            if (FormContact.IsRequired)
            {
                FormContact.IsVisible = true;
                FormContact.IsEnabled = true;
            }
        }
    }

    private void IsVisibleContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormContact.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormContact.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredContact2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact2.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormContact2.IsRequired = isrequired;

            if (FormContact2.IsRequired)


                FormContact2.IsVisible = true;
            FormContact2.IsEnabled = true;
        }
    }
    private void IsVisibleContact2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact2.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormContact2.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledContact2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormContact2.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormContact2.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredCurrencyChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCurrency.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormCurrency.IsRequired = isrequired;

            if (FormCurrency.IsRequired)
            {
                FormCurrency.IsVisible = true;
                FormCurrency.IsEnabled = true;
            }
        }
    }

    private void IsVisibleCurrencyChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCurrency.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCurrency.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledCurrencyChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCurrency.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCurrency.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress1.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormAddress1.IsRequired = isrequired;

            if (FormAddress1.IsRequired)
            {
                FormAddress1.IsVisible = true;
                FormAddress1.IsEnabled = true;
            }
        }
    }

    private void IsVisibleAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress1.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAddress1.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress1.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAddress1.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress2.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormAddress2.IsRequired = isrequired;

            if (FormAddress2.IsRequired)
            {
                FormAddress2.IsVisible = true;
                FormAddress2.IsEnabled = true;
            }
        }
    }

    private void IsVisibleAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress2.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAddress2.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAddress2.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAddress2.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCity.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormCity.IsRequired = isrequired;

            if (FormCity.IsRequired)
            {
                FormCity.IsVisible = true;
                FormCity.IsEnabled = true;
            }
        }
    }

    private void IsVisibleCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCity.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCity.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCity.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCity.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredPostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPostal.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormPostal.IsRequired = isrequired;

            if (FormPostal.IsRequired)
            {
                FormPostal.IsVisible = true;
                FormPostal.IsEnabled = true;
            }
        }
    }

    private void IsVisiblePostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPostal.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormPostal.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledPostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormPostal.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormPostal.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCountry.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormCountry.IsRequired = isrequired;

            if (FormCountry.IsRequired)
            {
                FormCountry.IsVisible = true;
                FormCountry.IsEnabled = true;
            }
        }
    }

    private void IsVisibleCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCountry.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCountry.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormCountry.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormCountry.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormProvince.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormProvince.IsRequired = isrequired;

            if (FormProvince.IsRequired)
            {
                FormProvince.IsVisible = true;
                FormProvince.IsEnabled = true;
            }
        }
    }

    private void IsVisibleProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormProvince.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormProvince.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormProvince.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormProvince.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredHasShippingAddressChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormHasShippingAddress.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormHasShippingAddress.IsRequired = isrequired;

            if (FormHasShippingAddress.IsRequired)
            {
                FormHasShippingAddress.IsVisible = true;
                FormHasShippingAddress.IsEnabled = true;
            }
        }
    }

    private void IsVisibleHasShippingAddressChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormHasShippingAddress.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormHasShippingAddress.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledHasShippingAddressChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormHasShippingAddress.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormHasShippingAddress.IsEnabled = checkedvalue;
        }
    }

    private void IsRequiredShippingContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingContact.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingContact.IsRequired = isrequired;

            if (FormShippingContact.IsRequired)
            {
                FormShippingContact.IsVisible = true;
                FormShippingContact.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingContact.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingContact.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingContactChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingContact.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingContact.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCountry.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingCountry.IsRequired = isrequired;

            if (FormShippingCountry.IsRequired)
            {
                FormShippingCountry.IsVisible = true;
                FormShippingCountry.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCountry.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingCountry.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingCountryChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCountry.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingCountry.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingProvince.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingProvince.IsRequired = isrequired;

            if (FormShippingProvince.IsRequired)
            {
                FormShippingProvince.IsVisible = true;
                FormShippingProvince.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingProvince.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingProvince.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingProvinceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingProvince.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingProvince.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress1.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingAddress1.IsRequired = isrequired;

            if (FormShippingAddress1.IsRequired)
            {
                FormShippingAddress1.IsVisible = true;
                FormShippingAddress1.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress1.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingAddress1.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingAddress1Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress1.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingAddress1.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress2.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingAddress2.IsRequired = isrequired;

            if (FormShippingAddress2.IsRequired)
            {
                FormShippingAddress2.IsVisible = true;
                FormShippingAddress2.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress2.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingAddress2.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingAddress2Change(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingAddress2.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingAddress2.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCity.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingCity.IsRequired = isrequired;

            if (FormShippingCity.IsRequired)
            {
                FormShippingCity.IsVisible = true;
                FormShippingCity.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCity.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingCity.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingCityChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingCity.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingCity.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingPostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPostal.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingPostal.IsRequired = isrequired;

            if (FormShippingPostal.IsRequired)
            {
                FormShippingPostal.IsVisible = true;
                FormShippingPostal.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingPostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPostal.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingPostal.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingPostalChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPostal.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingPostal.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredShippingPhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPhone.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormShippingPhone.IsRequired = isrequired;

            if (FormShippingPhone.IsRequired)
            {
                FormShippingPhone.IsVisible = true;
                FormShippingPhone.IsEnabled = true;
            }
        }
    }

    private void IsVisibleShippingPhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPhone.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingPhone.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledShippingPhoneChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormShippingPhone.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormShippingPhone.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredDeliveryInstructionsChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormDeliveryInstructions.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormDeliveryInstructions.IsRequired = isrequired;

            if (FormDeliveryInstructions.IsRequired)
            {
                FormDeliveryInstructions.IsVisible = true;
                FormDeliveryInstructions.IsEnabled = true;
            }
        }
    }

    private void IsVisibleDeliveryInstructionsChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormDeliveryInstructions.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormDeliveryInstructions.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledDeliveryInstructionsChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormDeliveryInstructions.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormDeliveryInstructions.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredAccountNumberChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAccountNumber.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormAccountNumber.IsRequired = isrequired;

            if (FormAccountNumber.IsRequired)
            {
                FormAccountNumber.IsVisible = true;
                FormAccountNumber.IsEnabled = true;
            }
        }
    }

    private void IsVisibleAccountNumberChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAccountNumber.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAccountNumber.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledAccountNumberChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormAccountNumber.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormAccountNumber.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredFaxChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormFax.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormFax.IsRequired = isrequired;

            if (FormFax.IsRequired)
            {
                FormFax.IsVisible = true;
                FormFax.IsEnabled = true;
            }
        }
    }

    private void IsVisibleFaxChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormFax.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormFax.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledFaxChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormFax.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormFax.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredMobileChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormMobile.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormMobile.IsRequired = isrequired;

            if (FormMobile.IsRequired)
            {
                FormMobile.IsVisible = true;
                FormMobile.IsEnabled = true;
            }
        }
    }

    private void IsVisibleMobileChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormMobile.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormMobile.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledMobileChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormMobile.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormMobile.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredTollFreeChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormTollFree.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormTollFree.IsRequired = isrequired;

            if (FormTollFree.IsRequired)
            {
                FormTollFree.IsVisible = true;
                FormTollFree.IsEnabled = true;
            }
        }
    }

    private void IsVisibleTollFreeChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormTollFree.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormTollFree.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledTollFreeChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormTollFree.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormTollFree.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredWebsiteChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormWebsite.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormWebsite.IsRequired = isrequired;

            if (FormWebsite.IsRequired)
            {
                FormWebsite.IsVisible = true;
                FormWebsite.IsEnabled = true;
            }
        }
    }

    private void IsVisibleWebsiteChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormWebsite.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormWebsite.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledWebsiteChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormWebsite.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormWebsite.IsEnabled = checkedvalue;
        }
    }
    private void IsRequiredInternalNotesChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormInternalNotes.IsRequired = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FormInternalNotes.IsRequired = isrequired;

            if (FormInternalNotes.IsRequired)
            {
                FormInternalNotes.IsVisible = true;
                FormInternalNotes.IsEnabled = true;
            }
        }
    }

    private void IsVisibleInternalNotesChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormInternalNotes.IsVisible = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormInternalNotes.IsVisible = checkedvalue;
        }
    }

    private void IsEnabledInternalNotesChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FormInternalNotes.IsEnabled = false;

        if (bool.TryParse(selectedString, out bool checkedvalue))
        {
            FormInternalNotes.IsEnabled = checkedvalue;
        }
    }
}
