@page "/Years/index"
@using EDI.Web.Shared.Modals;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject IYearService yearService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;

@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Years Management</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (years == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridYear" @ref="Grid" DataSource="@years" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="Toolbaritems" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="YearItemViewModel"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(YearItemViewModel.Ediyear) HeaderText="Year" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Alberta) HeaderText="AB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.BritishColumbia) HeaderText="BC" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.FirstNations) HeaderText="FN" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Manitoba) HeaderText="MB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.NewBrunswick) HeaderText="NB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.NewfoundlandandLabrador) HeaderText="NL" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.NewYork) HeaderText="NY" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.NovaScotia) HeaderText="NS" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Nunavut) HeaderText="NU" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.NorthwestTerritories) HeaderText="NT" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Ontario) HeaderText="ON" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.PrinceEdwardIsland) HeaderText="PE" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Quebec) HeaderText="QC" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.Saskatchewan) HeaderText="SK" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(YearItemViewModel.YukonTerritory) HeaderText="YT" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>


                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    SfGrid<YearItemViewModel> Grid;

    IEnumerable<YearItemViewModel> years;

    private List<Object> Toolbaritems = new List<Object>() { new ItemModel() { Text = "Add", TooltipText = "Add New", PrefixIcon = "e-add", Id = "Add" }, new ItemModel() { Text = "Edit", TooltipText = "Edit", PrefixIcon = "e-edit", Id = "Edit" }, "Delete", "ExcelExport", "Search" };

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            var allyears = await Task.FromResult(dbContext.Years.OrderBy(p => p.Ediyear).ToList());

            List<YearItemViewModel> sivm = new List<YearItemViewModel>();

            foreach (var year in allyears)
            {
                var ayear = new YearItemViewModel();
                
                ayear.Id = year.Id;
                ayear.Ediyear = year.Ediyear;
                ayear.Alberta = year.Alberta.HasValue ? year.Alberta.Value : false;
                ayear.BritishColumbia = year.BritishColumbia.HasValue ? year.BritishColumbia.Value : false;
                ayear.FirstNations = year.FirstNations.HasValue ? year.FirstNations.Value : false;
                ayear.Manitoba = year.Manitoba.HasValue ? year.Manitoba.Value : false;
                ayear.NewBrunswick = year.NewBrunswick.HasValue ? year.NewBrunswick.Value : false;
                ayear.NewfoundlandandLabrador = year.NewfoundlandandLabrador.HasValue ? year.NewfoundlandandLabrador.Value : false;
                ayear.NewYork = year.NewYork.HasValue ? year.NewYork.Value : false;                
                ayear.NovaScotia = year.NovaScotia.HasValue ? year.NovaScotia.Value : false;
                ayear.Nunavut = year.Nunavut.HasValue ? year.Nunavut.Value : false;
                ayear.Ontario = year.Ontario.HasValue ? year.Ontario.Value : false;
                ayear.PrinceEdwardIsland = year.PrinceEdwardIsland.HasValue ? year.PrinceEdwardIsland.Value : false;
                ayear.Quebec = year.Quebec.HasValue ? year.Quebec.Value : false;
                ayear.Saskatchewan = year.Saskatchewan.HasValue ? year.Saskatchewan.Value : false;
                ayear.YukonTerritory = year.YukonTerritory.HasValue ? year.YukonTerritory.Value : false;
                ayear.NorthwestTerritories = year.NorthwestTerritories.HasValue ? year.NorthwestTerritories.Value : false;

                sivm.Add(ayear);
            }

            this.rowid = 0;

            years = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<YearItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    YearItemViewModel YearModel { get; set; }

    public async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridYear_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridYear_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridYear_csvexport")
        {
            this.Grid.CsvExport();
        }
        if (args.Item.Id == "Add")
        {
            YearModel = new YearItemViewModel();
            parameters.Add("YearModel", YearModel);

            var modal = ModalService.Show<YearWindow>("New EDI Year", parameters);
            var result = await modal.Result;
            NewWindowModalClosed(result);
            //Modal.OnClose += NewWindowModalClosed;
        }
        if (args.Item.Id == "Edit")
        {
            YearModel = new YearItemViewModel();
            var rowdata = this.years.Where(t => t.Id == rowid).FirstOrDefault();

            if (rowdata != null)
            {
                YearModel.Ediyear = rowdata.Ediyear;
                YearModel.Id = rowdata.Id;
                YearModel.Alberta = rowdata.Alberta;
                YearModel.BritishColumbia = rowdata.BritishColumbia;
                YearModel.FirstNations = rowdata.FirstNations;
                YearModel.Manitoba = rowdata.Manitoba;
                YearModel.NewBrunswick = rowdata.NewBrunswick;
                YearModel.NewfoundlandandLabrador = rowdata.NewfoundlandandLabrador;
                YearModel.NewYork = rowdata.NewYork;
                YearModel.NovaScotia = rowdata.NovaScotia;
                YearModel.Nunavut = rowdata.Nunavut;
                YearModel.Ontario = rowdata.Ontario;
                YearModel.PrinceEdwardIsland = rowdata.PrinceEdwardIsland;
                YearModel.Quebec = rowdata.Quebec;
                YearModel.Saskatchewan = rowdata.Saskatchewan;
                YearModel.YukonTerritory = rowdata.YukonTerritory;
                YearModel.NorthwestTerritories = rowdata.NorthwestTerritories;
                parameters.Add("YearModel", YearModel);

                var modal = ModalService.Show<YearWindow>("Edit EDI Year", parameters);
                var result = await modal.Result;
                ExistWindowModalClosed(result);
                //*Modal.OnClose += ExistWindowModalClosed;
            }
        }
        if (args.Item.Id == "GridYear_delete")
        {
            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete");
            var result = await modal.Result;

            ConfirmDeleteModalClosed(result);
        }
    }


    async void NewWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is YearItemViewModel)
        {
            YearModel = (YearItemViewModel)modalResult.Data;

            var allyears = await Task.FromResult(dbContext.Years.OrderBy(p => p.Ediyear).ToList());

            List<YearItemViewModel> sivm = new List<YearItemViewModel>();

            foreach (var year in allyears)
            {
                var ayear = new YearItemViewModel();

                ayear.Id = year.Id;
                ayear.Ediyear = year.Ediyear;
                ayear.Alberta = year.Alberta.HasValue ? year.Alberta.Value : false;
                ayear.BritishColumbia = year.BritishColumbia.HasValue ? year.BritishColumbia.Value : false;
                ayear.FirstNations = year.FirstNations.HasValue ? year.FirstNations.Value : false;
                ayear.Manitoba = year.Manitoba.HasValue ? year.Manitoba.Value : false;
                ayear.NewBrunswick = year.NewBrunswick.HasValue ? year.NewBrunswick.Value : false;
                ayear.NewfoundlandandLabrador = year.NewfoundlandandLabrador.HasValue ? year.NewfoundlandandLabrador.Value : false;
                ayear.NewYork = year.NewYork.HasValue ? year.NewYork.Value : false;
                ayear.NovaScotia = year.NovaScotia.HasValue ? year.NovaScotia.Value : false;
                ayear.Nunavut = year.Nunavut.HasValue ? year.Nunavut.Value : false;
                ayear.Ontario = year.Ontario.HasValue ? year.Ontario.Value : false;
                ayear.PrinceEdwardIsland = year.PrinceEdwardIsland.HasValue ? year.PrinceEdwardIsland.Value : false;
                ayear.Quebec = year.Quebec.HasValue ? year.Quebec.Value : false;
                ayear.Saskatchewan = year.Saskatchewan.HasValue ? year.Saskatchewan.Value : false;
                ayear.YukonTerritory = year.YukonTerritory.HasValue ? year.YukonTerritory.Value : false;
                ayear.NorthwestTerritories = year.NorthwestTerritories.HasValue ? year.NorthwestTerritories.Value : false;

                sivm.Add(ayear);
            }

            years = sivm;
        }

        //*Modal.OnClose -= NewWindowModalClosed;
        this.Grid.Refresh();

        StateHasChanged();
        this.rowid = 0;
    }

    void ExistWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is YearItemViewModel)
        {
            YearModel = (YearItemViewModel)modalResult.Data;

            var tmp = new List<YearItemViewModel>();

            foreach (var item in this.years)
            {
                if (item.Id == YearModel.Id)
                {
                    item.Ediyear = YearModel.Ediyear;
                    item.Alberta = YearModel.Alberta;
                    item.BritishColumbia = YearModel.BritishColumbia;
                    item.FirstNations = YearModel.FirstNations;
                    item.Manitoba = YearModel.Manitoba;
                    item.NewBrunswick = YearModel.NewBrunswick;
                    item.NewfoundlandandLabrador = YearModel.NewfoundlandandLabrador;
                    item.NewYork = YearModel.NewYork;
                    item.NovaScotia = YearModel.NovaScotia;
                    item.Nunavut = YearModel.Nunavut;
                    item.Ontario = YearModel.Ontario;
                    item.PrinceEdwardIsland = YearModel.PrinceEdwardIsland;
                    item.Quebec = YearModel.Quebec;
                    item.Saskatchewan = YearModel.Saskatchewan;
                    item.YukonTerritory = YearModel.YukonTerritory;
                    item.NorthwestTerritories = YearModel.NorthwestTerritories;
                }
                tmp.Add(item);
            }

            this.years = tmp;
        }
        //*Modal.OnClose -= ExistWindowModalClosed;

        this.rowid = 0;
        this.Grid.Refresh();

        StateHasChanged();
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            var schools = dbContext.Schools.Where(p => p.YearId == this.rowid).ToList();

            if (schools != null && schools.Count() > 0)
            {
                toastService.ShowError("This item is referenced by school - " + schools.First().SchoolName);
            }
            else
            {
                await yearService.DeleteYearAsync(this.rowid);

                var tmp = new List<YearItemViewModel>();
                foreach (var item in years)
                {
                    if (item.Id != rowid)
                        tmp.Add(item);
                }
                this.years = tmp;
                this.rowid = 0;

                //this.Grid.Refresh();
                StateHasChanged();
            }
        }

        //*Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private async void RecordDoubleClickHandler(RecordDoubleClickEventArgs<YearItemViewModel> args)
    {
        var parameters = new ModalParameters();
        YearModel = new YearItemViewModel();
        var rowdata = this.years.Where(t => t.Id == rowid).FirstOrDefault();

        if (rowdata != null)
        {
            YearModel.Ediyear = rowdata.Ediyear;
            YearModel.Id = rowdata.Id;
            YearModel.Alberta = rowdata.Alberta;
            YearModel.BritishColumbia = rowdata.BritishColumbia;
            YearModel.FirstNations = rowdata.FirstNations;
            YearModel.Manitoba = rowdata.Manitoba;
            YearModel.NewBrunswick = rowdata.NewBrunswick;
            YearModel.NewfoundlandandLabrador = rowdata.NewfoundlandandLabrador;
            YearModel.NewYork = rowdata.NewYork;
            YearModel.NovaScotia = rowdata.NovaScotia;
            YearModel.Nunavut = rowdata.Nunavut;
            YearModel.Ontario = rowdata.Ontario;
            YearModel.PrinceEdwardIsland = rowdata.PrinceEdwardIsland;
            YearModel.Quebec = rowdata.Quebec;
            YearModel.Saskatchewan = rowdata.Saskatchewan;
            YearModel.YukonTerritory = rowdata.YukonTerritory;
            YearModel.NorthwestTerritories = rowdata.NorthwestTerritories;
            parameters.Add("YearModel", YearModel);

            var modal = ModalService.Show<YearWindow>("Edit EDI Year", parameters);
            var result = await modal.Result;
            ExistWindowModalClosed(result);
        }
    }
}
