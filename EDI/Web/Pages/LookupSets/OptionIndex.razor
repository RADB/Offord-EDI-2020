@page "/LookupSetOptions/optionindex"
@using Microsoft.AspNetCore.Http;
@using EDI.Web.Shared.Modals; 
@using Microsoft.AspNetCore.Components.Authorization;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ILookupSetOptionService lookupSetOptionService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>@Header</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (lookupSetOptions == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridLookupSetOption" @ref="Grid" DataSource="@lookupSetOptions" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="Toolbaritems" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="@AllowEdit" AllowDeleting="@AllowDelete" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="LookupSetOptionItemViewModel"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="LookupSetId" Direction="SortDirection.Ascending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(LookupSetOptionItemViewModel.English) HeaderText="English" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(LookupSetOptionItemViewModel.French) HeaderText="French" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(LookupSetOptionItemViewModel.Value) Type="ColumnType.Number" HeaderText="Value" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                            <GridColumn Field=@nameof(LookupSetOptionItemViewModel.Sequence) Type="ColumnType.Number" HeaderText="Sequence" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>                            
                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    [Parameter]
    public int LookupSetId { get; set; } = 0;
    [Parameter]
    public string Header { get; set; } = "LookupSetOption Options";
    [Parameter]
    public bool AllowDelete { get; set; } = true;
    [Parameter]
    public bool AllowEdit { get; set; } = true;

    SfGrid<LookupSetOptionItemViewModel> Grid;

    IEnumerable<LookupSetOptionItemViewModel> lookupSetOptions;

    private List<Object> Toolbaritems = new List<Object>() { new ItemModel() { Text = "Add", TooltipText = "Add New", PrefixIcon = "e-add", Id = "Add" }, new ItemModel() { Text = "Edit", TooltipText = "Edit", PrefixIcon = "e-edit", Id = "Edit" }, "Delete", "ExcelExport", "Search" };

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            var alllookupSetOptions = await Task.FromResult(dbContext.LookupSetOptions.Where(p => p.LookupSetId == LookupSetId).OrderBy(p => p.English).ToList());

            List<LookupSetOptionItemViewModel> sivm = new List<LookupSetOptionItemViewModel>();

            foreach (var lookupSetOption in alllookupSetOptions)
            {
                var alookupSetOption = new LookupSetOptionItemViewModel();

                alookupSetOption.Id = lookupSetOption.Id;
                alookupSetOption.LookupSetId = lookupSetOption.LookupSetId;
                alookupSetOption.English = lookupSetOption.English;
                alookupSetOption.French = lookupSetOption.French;
                alookupSetOption.Value = lookupSetOption.Value;
                alookupSetOption.Sequence = lookupSetOption.Sequence;
                /*alookupSetOption.YearId = lookupSetOption.YearId;

                var year = dbContext.Years.Where(p => p.Id == alookupSetOption.YearId).FirstOrDefault();
                alookupSetOption.Ediyear = year != null ? year.Ediyear : null;*/

                sivm.Add(alookupSetOption);
            }

            this.rowid = 0;

            lookupSetOptions = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<LookupSetOptionItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    LookupSetOptionItemViewModel LookupSetOptionModel { get; set; }

    public async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridLookupSetOption_pdfexport")
        {
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Id == "GridLookupSetOption_excelexport")
        {
            await this.Grid.ExportToExcelAsync();
        }
        if (args.Item.Id == "GridLookupSetOption_csvexport")
        {
            await this.Grid.ExportToCsvAsync();
        }
        if (args.Item.Id == "Add")
        {
            LookupSetOptionModel = new LookupSetOptionItemViewModel();
            LookupSetOptionModel.LookupSetId = LookupSetId;
            parameters.Add("LookupSetOptionModel", LookupSetOptionModel);

            var modal = ModalService.Show<LookupSetOptionWindow>("New EDI LookupSetOption", parameters);
            var result = await modal.Result;
            NewWindowModalClosed(result);
        }
        if (args.Item.Id == "Edit")
        {
            LookupSetOptionModel = new LookupSetOptionItemViewModel();
            var rowdata = this.lookupSetOptions.Where(t => t.Id == rowid).FirstOrDefault();

            if (rowdata != null)
            {
                LookupSetOptionModel.LookupSetId = rowdata.LookupSetId;
                LookupSetOptionModel.English = rowdata.English;
                LookupSetOptionModel.French = rowdata.French;
                LookupSetOptionModel.Value = rowdata.Value;
                LookupSetOptionModel.Sequence = rowdata.Sequence;
                LookupSetOptionModel.YearId = rowdata.YearId;
                LookupSetOptionModel.Id = rowdata.Id;
                parameters.Add("LookupSetOptionModel", LookupSetOptionModel);

                var modal = ModalService.Show<LookupSetOptionWindow>("Edit EDI LookupSetOption", parameters);
                var result = await modal.Result;
                ExistWindowModalClosed(result);
            }
        }
        if (args.Item.Id == "GridLookupSetOption_delete")
        {
            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete");
            var result = await modal.Result;
            ConfirmDeleteModalClosed(result);
        }
    }


    async void NewWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is LookupSetOptionItemViewModel)
        {
            LookupSetOptionModel = (LookupSetOptionItemViewModel)modalResult.Data;

            var alllookupSetOptions = await Task.FromResult(dbContext.LookupSetOptions.Where(p => p.LookupSetId == LookupSetId).OrderBy(p => p.English).ToList());

            List<LookupSetOptionItemViewModel> sivm = new List<LookupSetOptionItemViewModel>();

            foreach (var lookupSetOption in alllookupSetOptions)
            {
                var alookupSetOption = new LookupSetOptionItemViewModel();

                alookupSetOption.Id = lookupSetOption.Id;
                alookupSetOption.LookupSetId = lookupSetOption.LookupSetId;
                alookupSetOption.English = lookupSetOption.English;
                alookupSetOption.French = lookupSetOption.French;
                alookupSetOption.Value = lookupSetOption.Value;
                alookupSetOption.Sequence = lookupSetOption.Sequence;
                /*alookupSetOption.YearId = lookupSetOption.YearId;

                var year = dbContext.Years.Where(p => p.Id == alookupSetOption.YearId).FirstOrDefault();
                alookupSetOption.Ediyear = year != null ? year.Ediyear : null;*/

                sivm.Add(alookupSetOption);
            }

            lookupSetOptions = sivm;
        }
        //*Modal.OnClose -= NewWindowModalClosed;
        this.Grid.Refresh();

        StateHasChanged();
        this.rowid = 0;
    }

    void ExistWindowModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (modalResult.Data is LookupSetOptionItemViewModel)
        {
            LookupSetOptionModel = (LookupSetOptionItemViewModel)modalResult.Data;

            var tmp = new List<LookupSetOptionItemViewModel>();

            foreach (var item in this.lookupSetOptions)
            {
                if (item.Id == LookupSetOptionModel.Id)
                {
                    item.LookupSetId = LookupSetOptionModel.LookupSetId;
                    item.English = LookupSetOptionModel.English;
                    item.French = LookupSetOptionModel.French;
                    item.Value = LookupSetOptionModel.Value;
                    item.Sequence = LookupSetOptionModel.Sequence;
                    /*item.YearId = LookupSetOptionModel.YearId;

                    var year = dbContext.Years.Where(p => p.Id == item.YearId).FirstOrDefault();
                    item.Ediyear = year != null ? year.Ediyear : null;*/
                }
                tmp.Add(item);
            }

            this.lookupSetOptions = tmp;
        }
        //*Modal.OnClose -= ExistWindowModalClosed;

        this.rowid = 0;
        this.Grid.Refresh();

        StateHasChanged();
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await lookupSetOptionService.DeleteLookupSetOptionAsync(this.rowid);

            var tmp = new List<LookupSetOptionItemViewModel>();
            foreach (var item in lookupSetOptions)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.lookupSetOptions = tmp;
            this.rowid = 0;

            //this.Grid.Refresh();
            StateHasChanged();
        }

        //*Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private async void RecordDoubleClickHandler(RecordDoubleClickEventArgs<LookupSetOptionItemViewModel> args)
    {
        var parameters = new ModalParameters();
        LookupSetOptionModel = new LookupSetOptionItemViewModel();
        var rowdata = this.lookupSetOptions.Where(t => t.Id == rowid).FirstOrDefault();

        if (rowdata != null)
        {
            LookupSetOptionModel.LookupSetId = rowdata.LookupSetId;
            LookupSetOptionModel.English = rowdata.English;
            LookupSetOptionModel.French = rowdata.French;
            LookupSetOptionModel.Value = rowdata.Value;
            LookupSetOptionModel.Sequence = rowdata.Sequence;
            LookupSetOptionModel.YearId = rowdata.YearId;
            LookupSetOptionModel.Id = rowdata.Id;
            parameters.Add("LookupSetOptionModel", LookupSetOptionModel);

            var modal = ModalService.Show<LookupSetOptionWindow>("Edit EDI LookupSetOption", parameters);
            var result = await modal.Result;
            ExistWindowModalClosed(result); ;
        }
    }
}
