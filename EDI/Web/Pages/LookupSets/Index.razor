@page "/LookupSets/index"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ILookupSetService lookupSetService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IModalService Modal;
@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>@Header</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (lookupSets == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridLookupSet" @ref="Grid" DataSource="@lookupSets" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="Toolbaritems" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="@AllowEdit" AllowDeleting="@AllowDelete" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="LookupSetItemViewModel"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="LookupName" Direction="SortDirection.Ascending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(LookupSetItemViewModel.LookupName) HeaderText="Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(LookupSetItemViewModel.Ediyear) Type="ColumnType.Number" HeaderText="Year" Width="10"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    [Parameter]
    public string Header { get; set; } = "LookupSets";
    [Parameter]
    public bool AllowDelete { get; set; } = true;
    [Parameter]
    public bool AllowEdit { get; set; } = true;

    SfGrid<LookupSetItemViewModel> Grid;

    IEnumerable<LookupSetItemViewModel> lookupSets;

    private List<Object> Toolbaritems = new List<Object>() { new ItemModel() { Text = "Add", TooltipText = "Add New", PrefixIcon = "e-add", Id = "Add" }, new ItemModel() { Text = "Edit", TooltipText = "Edit", PrefixIcon = "e-edit", Id = "Edit" }, "Delete", "ExcelExport", "Search" };

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            var alllookupSets = await Task.FromResult(dbContext.LookupSets.OrderBy(p => p.LookupName).ToList());

            List<LookupSetItemViewModel> sivm = new List<LookupSetItemViewModel>();

            foreach (var lookupSet in alllookupSets)
            {
                var alookupSet = new LookupSetItemViewModel();

                alookupSet.Id = lookupSet.Id;
                alookupSet.LookupName = lookupSet.LookupName;
                alookupSet.YearId = lookupSet.YearId;

                var year = dbContext.Years.Where(p => p.Id == alookupSet.YearId).FirstOrDefault();
                alookupSet.Ediyear = year != null ? year.Ediyear : null;

                sivm.Add(alookupSet);
            }

            this.rowid = 0;

            lookupSets = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<LookupSetItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    LookupSetItemViewModel LookupSetModel { get; set; }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridLookupSet_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridLookupSet_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridLookupSet_csvexport")
        {
            this.Grid.CsvExport();
        }
        if (args.Item.Id == "Add")
        {
            NavigationManager.NavigateTo("./LookupSets/new");
        }
        if (args.Item.Id == "Edit")
        {
            NavigationManager.NavigateTo("./LookupSets/edit/" + this.rowid);
        }
        if (args.Item.Id == "GridLookupSet_delete")
        {
            Modal.Show<ConfirmDelete>("Confirm Delete");
            Modal.OnClose += ConfirmDeleteModalClosed;
        }
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await lookupSetService.DeleteLookupSetAsync(this.rowid);

            var tmp = new List<LookupSetItemViewModel>();
            foreach (var item in lookupSets)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.lookupSets = tmp;
            this.rowid = 0;

            this.Grid.Refresh();
            StateHasChanged();
        }

        Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<LookupSetItemViewModel> args)
    {
        NavigationManager.NavigateTo("./LookupSets/edit/" + this.rowid);
    }
}
