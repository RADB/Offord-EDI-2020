@page "/SampleQuestions/index2"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Shared.Questionnaires
@using static EDI.Web.Data.Enumerations
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            @if (IsAdmin)
            {
            }
            else if (IsTeacher)
            {
                foreach (var config in configs)
                {
                    _Text = sharedService.GetConfigText(config);
                    if (config.IsHeader)
                    {
                        <div class="card-header">
                            <strong>@_Text</strong>
                        </div>
                    }
                    else
                    {
                        switch ((InputTypes)config.InputTypeId)
                        {
                            case InputTypes.RadioButtons:                                
                                <RadioButtonsPart  Config=@config CurrentValue=1></RadioButtonsPart>
                                break;                                
                            case InputTypes.DatePicker:                                
                                <div class="card-body border border-secondary rounded">
                                    <DatePickerPart Config=@config  CurrentValue=@(new DateTime(2011, 01, 18))></DatePickerPart>
                                </div>
                                break;                                
                            default:                                
                                <div class="card-body border">
                                    <p>@Enum.GetName(typeof(InputTypes), config.InputType) needs to be crafted</p>
                                </div>
                                break;                                
                        }
                    }
                }
            }
            else
            {
                <div class="card-header">
                    <strong>Sample for Coordinator</strong>
                </div>
                <div class="card-body">
                </div>
            }
        </div>
    </div>
</div>

@code {

    // look to move this to a session variable and carry throughout the session
    private bool IsAdmin { get; set; }
    private bool IsTeacher { get; set; }
    private bool IsCoordinator { get; set; }
    private List<QuestionnairesConfiguration> configs;

    private string _Text;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            @if (UserSettings.IsAdmin)
            {
                IsAdmin = true;
                //var configs = await Task.FromResult(dbContext.QuestionnairesConfigurations.Where(t => t.QuestionnaireId == 1).ToList());

            }
            else if (UserSettings.IsTeacher)
            {
                IsTeacher = true;
                // Add filter for province
                //var predicate = "p => p.IsTeacherFaq.Value && p." + UserSettings.Province + ".Value";
                //allfaqs = await Task.FromResult(dbContext.Faqs.Where(predicate).OrderBy(p => p.Sequence).ToList());
                var pred = "t => t.QuestionnaireId == 7 && " + UserSettings.Province + "==true";
                configs = dbContext.QuestionnairesConfigurations.Where(pred).ToList();
            }
            else
            {
                IsCoordinator = true;
            }
        }
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }
}
