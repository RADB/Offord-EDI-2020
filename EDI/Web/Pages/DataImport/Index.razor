@page "/DataImport/index/{ChangeNumber:int}"
@using EDI.Web.Shared.Modals;
@using EDI.ApplicationCore.Interfaces;
@using EDI.Infrastructure.Interfaces;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@using EDI.Web.Extensions;
@using EDI.Web.Data;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.ProgressBar;
@using System.IO;
@using Syncfusion.XlsIO;
@using Serilog;

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ISharedService sharedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IAsyncRepository<FileImport> _fileRepository;
@inject IAsyncRepository<Year> _yearRepository;
@inject IAsyncIdentityRepository _accountRepository;
@inject IAsyncRepository<Child> _childRepository;
@inject IAsyncRepository<Site> _siteRepository;
@inject IAsyncRepository<Teacher> _teacherRepository;
@inject IAsyncRepository<School> _schoolRepository;
@inject IAsyncRepository<Coordinator> _coordinatorRepository;
@inject IAsyncRepository<QuestionnairesDataTeacherProfile> _profileRepository;
@inject UserManager<EDIApplicationUser> _userManager;
@inject IAsyncRepository<QuestionnairesDataDemographic> _questionnairesDataDemographic;
@inject IAsyncRepository<QuestionnairesDataSectionA> _questionnairesDataSectionA;
@inject IAsyncRepository<QuestionnairesDataSectionB> _questionnairesDataSectionB;
@inject IAsyncRepository<QuestionnairesDataSectionC> _questionnairesDataSectionC;
@inject IAsyncRepository<QuestionnairesDataSectionD> _questionnairesDataSectionD;
@inject IAsyncRepository<QuestionnairesDataSectionE> _questionnairesDataSectionE;
@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>File Import</strong>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(@Message))
                {
                    <div class="text-success">@Message</div><br /><br />
                }

                @if (!string.IsNullOrEmpty(@ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div><br /><br />
                }

                @if (processingresult != null && processingresult.messages != null && processingresult.messages.Count() > 0)
                {
                    <div class="alert alert-info alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.messages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (processingresult != null && processingresult.errormessages != null && processingresult.errormessages.Count() > 0)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.errormessages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (ShowFileupload)
                {
                    <div class="info">
                        <button type="button" class="closeFileupload" @onclick="CloseUpload"><span aria-hidden="true">&times;</span></button>
                        <SfUploader AllowedExtensions=".xlsx" AutoUpload="false" Multiple="false">
                            <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                        </SfUploader><br />
                    </div>

                    <SfProgressBar Type="ProgressType.Linear" Value="@progress" Height="60" Minimum="0" Maximum="100" @ref="ProgressBarObj" ShowProgressValue="true" IsStriped="true">
                        <ProgressBarEvents ValueChanged="@ValueHandler"></ProgressBarEvents>
                    </SfProgressBar>

                }
                <div class="row"></div>
                <br />
                @if (files == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <a href="data/EDI Upload Template.xlsx" class="btn btn-purple"><i class="far fa-file-excel fa-lg"></i> Download Template</a>
                    <SfDropDownList TValue="string" CssClass="col-md-4" TItem="SelectListItem" Placeholder="Select a site" AllowFiltering="true" @bind-Value="@sitename" DataSource="@Sites">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="SelectListItem" ValueChange="SiteChange"></DropDownListEvents>
                    </SfDropDownList>
                    <br />
                    <div id="container">
                        <div>                              
                            @siteMessage
                            <br />
                            @schoolMessage
                            <br />
                            @teacherMessage
                            <br />
                            @childMessage
                        </div>
                        <SfProgressBar Type="ProgressType.Linear" Value="@fileProgress" Height="60" Minimum="0" Maximum="100" @ref="ProgressBarFileObj" ShowProgressValue="true" IsStriped="true">
                        </SfProgressBar>
                        <SfGrid ID="GridFile" @ref="Grid" DataSource="@files" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Excel Import","Process","ProcessAll", "ExcelExport", "Clear", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                            <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" ShowDeleteConfirmDialog="false"></GridEditSettings>
                            <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" TValue="FileItemViewModel"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(FileItemViewModel.FileName) HeaderText="File" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorName) HeaderText="Coordinator" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorEmail) HeaderText="Coordinator Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.SchoolName) HeaderText="School" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherName) HeaderText="Teacher" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherEmail) HeaderText="Teacher Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.LocalId) HeaderText="Child's Local ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.Gender) HeaderText="Gender" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildDob) HeaderText="DOB" Format="yyyy-MM-dd" Type="ColumnType.Date" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildPostalCode) HeaderText="Postal" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildEdiid) HeaderText="EDI_ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.FileImportStatus) HeaderText="Status" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    
                    <SfSpinner @ref="SpinnerObj">
                    </SfSpinner>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }
    private string childMessage { get; set; }
    private string schoolMessage { get; set; }
    private string siteMessage { get; set; }
    private string teacherMessage { get; set; }

    [Parameter]
    public int? ChangeNumber { get; set; }

    SfSpinner SpinnerObj;
    SfProgressBar ProgressBarObj;
    SfProgressBar ProgressBarFileObj;
    ErrorViewModel processingresult { get; set; }

    SfGrid<FileItemViewModel> Grid;

    IEnumerable<FileItemViewModel> files;

    private bool ShowFileupload { get; set; }    
    //private IHostEnvironment _hostingEnvironment;

    public IEnumerable<SelectListItem> Sites { get; set; }
    public string sitename{ get; set; }

    public double progress {get; set;}    
    public double fileProgress {get; set;}     

    protected override async Task OnParametersSetAsync()
    {
        ShowFileupload = false;

        //var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        //optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        //using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        //{
        var sites = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed).OrderBy(p => p.SiteName).Select(p => p.SiteName).Distinct().ToList();

        var items = new List<SelectListItem>();

        foreach (var site in sites)
        {
            items.Add(new SelectListItem() { Value = site, Text = site });
        }

        Sites = items;
        sitename = sites != null && sites.Count() > 0 ? sites.First() : string.Empty;

        var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

        List<FileItemViewModel> sivm = new List<FileItemViewModel>();

        foreach (var file in allfiles)
        {
            var afile = new FileItemViewModel();

            afile.Id = file.Id;
            afile.FileName = file.FileName;
            afile.SiteName = file.SiteName;
            afile.CoordinatorName = file.CoordinatorName;
            afile.CoordinatorEmail = file.CoordinatorEmail;
            afile.SchoolName = file.SchoolName;
            //afile.SchoolProvinceId = file.SchoolProvinceId;
            //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
            //afile.Province = province != null ? province.English : string.Empty;
            afile.TeacherName = file.TeacherName;
            afile.TeacherEmail = file.TeacherEmail;
            afile.LocalId = file.LocalId;
            //afile.ClassTime = file.ClassTime;
            afile.GenderId = file.GenderId;
            var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
            afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
            afile.ChildDob = file.ChildDob;
            afile.ChildPostalCode = file.ChildPostalCode;
            afile.ChildEdiid = file.ChildEdiid;
            afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

            sivm.Add(afile);
        }

        this.rowid = 0;

        files = sivm;
        //}
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            ShowFileupload = false;

            var sites = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed).OrderBy(p => p.SiteName).Select(p => p.SiteName).Distinct().ToList();

            var items = new List<SelectListItem>();

            foreach (var site in sites)
            {
                items.Add(new SelectListItem() { Value = site, Text = site });
            }

            Sites = items;
            sitename = sites != null && sites.Count() > 0 ? sites.First() : string.Empty;

            var allfiles = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList();

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<FileItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    FileItemViewModel FileModel { get; set; }

    async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        //var parameters = new ModalParameters();
        // changed to blazored parameters
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridFile_pdfexport")
        {
            //await this.Grid.ExportToPdfAsync();
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Id == "GridFile_excelexport")
        {
            await this.Grid.ExportToExcelAsync();
        }
        if (args.Item.Id == "GridFile_Clear")
        {
            var message = "Are you sure you want to clear the queue?";
            parameters.Add(nameof(DisplayMessage.Message), message);                               

            var options = new ModalOptions()
                {
                    Position = ModalPosition.Middle
                    
                };
            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete", parameters,options);

            var result = await modal.Result;
            await ConfirmDeleteModalClosed(result);
        }
        if (args.Item.Id == "GridFile_Excel Import")
        {
            UploadFile();
        }
        if (args.Item.Id == "GridFile_Process")
        {
            await ProcessData(sitename);
        }
        if (args.Item.Id == "GridFile_ProcessAll")
        {
            foreach (var site in Sites)
            {
                await ProcessData(site.Value);
            }
        }
    }

    async Task ProcessData(string sitename)
    {
        var allimportedfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId == (int)Enumerations.FileImportStatus.Imported && p.SiteName == sitename).OrderBy(p => p.FileName).ToList());

        if (allimportedfiles == null || allimportedfiles.Count() == 0)
        {
            toastService.ShowWarning("All imported data with the site - " + sitename + " were processed.");
        }
        else
        {
            await SpinnerObj.ShowAsync();
            processingresult = await ProcessFileData(sitename);
            await SpinnerObj.HideAsync();
            //SpinnerObj.HideSpinner("Data processing is done.");

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var nfile in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = nfile.Id;
                afile.FileName = nfile.FileName;
                afile.SiteName = nfile.SiteName;
                afile.CoordinatorName = nfile.CoordinatorName;
                afile.CoordinatorEmail = nfile.CoordinatorEmail;
                afile.SchoolName = nfile.SchoolName;
                //afile.SchoolProvinceId = nfile.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = nfile.TeacherName;
                afile.TeacherEmail = nfile.TeacherEmail;
                afile.LocalId = nfile.LocalId;
                //afile.ClassTime = nfile.ClassTime;
                afile.GenderId = nfile.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = nfile.ChildDob;
                afile.ChildPostalCode = nfile.ChildPostalCode;
                afile.ChildEdiid = nfile.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == nfile.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            StateHasChanged();
        }
    }

    IFileListEntry file;

    private void UploadFile()
    {
        ShowFileupload = true;
    }

    public void ValueHandler(ProgressValueEventArgs args)
    {
        // update the progress bar visual
        //toastService.ShowWarning(progress + " % Complete");
        StateHasChanged();
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {        
        foreach (var file in args.Files)
        {
            await SpinnerObj.ShowAsync();
            processingresult = await UploadFileData(file);

            if (processingresult.errormessages.Count() == 0)
            {
                toastService.ShowSuccess("Data uploaded successfully.");

                Random random = new Random();
                NavigationManager.NavigateTo("./DataImport/index/" + random.Next(1, 1000));
            }
            else
            {                
                toastService.ShowError("Data uploaded failed.");
                StateHasChanged();
            }
            await SpinnerObj.HideAsync();
        }
    }

    private void CloseUpload()
    {
        ShowFileupload = false;
    }

    private async Task UploadFile1()
    {
        var parameters = new ModalParameters();

        parameters.Add("DataName", "Files");

        var modal = ModalService.Show<UploadFileWindow>("Upload File data: ", parameters);
        var result = await modal.Result;
        UploadWindowModalClosed(result);
        //*Modal.OnClose += UploadWindowModalClosed;
    }

    private async Task UploadWindowModalClosed(ModalResult modalResult)
    {
        if (modalResult.Data is ErrorViewModel)
        {
            var result = (ErrorViewModel)modalResult.Data;

            if (!string.IsNullOrEmpty(result.message))
            {
                toastService.ShowSuccess(result.message);
            }
            else if (!string.IsNullOrEmpty(result.errormessage))
            {
                toastService.ShowError(result.errormessage);
            }

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            await this.Grid.Refresh();
        }
        //*Modal.OnClose -= UploadWindowModalClosed;

        StateHasChanged();
    }

    async Task ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await sharedService.ClearQueue();

            var tmp = new List<FileItemViewModel>();

            files = tmp;

            this.Grid.Refresh();

            StateHasChanged();
        }
    }

    private async Task SiteChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SelectListItem> e)
    {
        if (e.Value != null)
        {
            sitename = e.Value.ToString();

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            StateHasChanged();
        }
    }

    public async Task<ErrorViewModel> UploadFileData(Syncfusion.Blazor.Inputs.UploadFiles file)
    {            
        sharedService.WriteLogs("UploadFileData started by:" + UserSettings.UserName, true);
        ErrorViewModel error = new ErrorViewModel();

        string errormessage = string.Empty;
        string message = string.Empty;
        List<string> messages = new List<string>();
        List<string> errormessages = new List<string>();

        var haserror = false;

        try
        {
            if (file.File.Size > 0)
            {                    
                // create the directory and get the path back from shared service
                string newPath = sharedService.GetContentRootFolder();

                string fileName = string.Format("Sites{0}.xlsx",DateTime.Now.ToString("yyyyMMdd_HHmmss"));
                string fullPath = Path.Combine(newPath, fileName);

                var columnHeaders = new string[]
                    {
                        "Site",
                        "Coordinator",
                        "Coordinator Email",
                        "School Name",
//                        "School Province",
                        "Teacher Name",
                        "Teacher Email",
                        "Child's Local ID",
//                        "Class_tm",
                        "Gender",
                        "DOB",
                        "Postal Code",
                        "EDI_ID"
                    };
                // breaking change https://blazor.syncfusion.com/documentation/release-notes/21.1.35?type=all#breaking-changes-7
                //https://www.syncfusion.com/forums/181370/file-upload-stream-write-error?reply=SFpz23 - not working
                //using (Stream fileStream = file.Stream)
                /*if (File.Exists(fullPath))
                    {
                    File.Delete(fullPath);
                }*/

                // writes the file first
                FileStream fileStream = new FileStream(fullPath, FileMode.Create, FileAccess.Write);

                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(fileStream);
                fileStream.Close();


                using (ExcelEngine excelEngine = new ExcelEngine())
                {

                    FileStream inputStream = new FileStream(fullPath, FileMode.Open);

                    IWorkbook workbook = excelEngine.Excel.Workbooks.Open(inputStream);

                    inputStream.Position = 0;

                    //Get the first worksheet in the workbook into IWorksheet
                    IWorksheet worksheet = workbook.Worksheets[0];

                    IRange firstrow = worksheet.Rows[0];

                    // get number of columns
                    int cellCount = firstrow.LastColumn;

                    for (int j = 0; j < cellCount; j++)
                    {
                        if (j > 10)
                            break;

                        var cell = firstrow.Cells[j];
                        if ((cell == null || string.IsNullOrWhiteSpace(cell.CalculatedValue)) || cell.CalculatedValue.ToLower() != columnHeaders[j].Trim().ToLower())
                        {
                            errormessages.Add("This Excel file is invalid");
                            haserror = true;
                            error.errormessage = errormessage;
                            return error;
                        }
                    }

                    //await _fileRepository.DeleteAllFileImports();
                    //await _fileRepository.ReseedFileImports();

                    //var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
                    //optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
                    //using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
                    //{
                        int firstRow = worksheet.UsedRange.Row;
                        // get the number of records
                        int lastRow = worksheet.UsedRange.LastRow;


                        for (int i = firstRow; i < lastRow; i++) //Read Excel File
                        {
                            IRange row = worksheet.Rows[i];
                            if (row == null) continue;
                            if (row.IsBlank) continue;


                            var site = row.Cells[0]?.CalculatedValue.Trim();

                            var _file = new FileImport();
                            // original name file.FileInfo.Name - renamed file is filename
                            _file.FileName = fileName;
                            _file.SiteName = site;
                            _file.CoordinatorName = row.Cells[1]?.CalculatedValue.Trim();
                            _file.CoordinatorEmail = row.Cells[2]?.CalculatedValue.Trim();

                            if (!ValidateExtension.IsEmailValid(_file.CoordinatorEmail))
                            {
                                errormessages.Add("Coordinator Email: " + _file.CoordinatorEmail + " is invalid at Row: " + (i + 1));
                                haserror = true;
                            }

                            _file.SchoolName = row.Cells[3]?.CalculatedValue.Trim();
                            _file.TeacherName = row.Cells[4]?.CalculatedValue.Trim();
                            _file.TeacherEmail = row.Cells[5]?.CalculatedValue.Trim();

                            if (!ValidateExtension.IsEmailValid(_file.TeacherEmail))
                            {
                                errormessages.Add("Teacher Email: " + _file.TeacherEmail + " is invalid at Row: " + (i + 1));
                                haserror = true;
                            }

                            _file.LocalId = row.Cells[6]?.CalculatedValue.Trim();
                            var gender = row.Cells[7]?.CalculatedValue.Trim();
                            // get the lookupset for this year
                            // var tempGenders = dbContext.LookupSets.Where(p => p.YearId == UserSettings.YearId && p.LookupName == "ChildGender").Include(c => c.LookupSetOptions).FirstOrDefault();

                            if (string.IsNullOrEmpty(gender))
                            {
                                //_file.GenderId = null;
                                //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Value;
                                _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Id;
                            }
                            else
                            {
                                //_file.GenderId = (gender == "M" ? (int)Genders.Male : (int)Genders.Female);
                                //_file.GenderId = (gender == "M" ? dbContext.Gen.Where(p => p.Id == ppl.CountryID.Value).FirstOrDefault() : (int)Genders.Female);
                                // Use the code to ensure the values are consistent year over year


                                if (gender == "M")
                                {
                                    _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Male").FirstOrDefault().Id;
                                    //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == UserSettings.YearId && p.English == "Male").FirstOrDefault().Value;
                                }
                                else if (gender == "F")
                                {
                                    _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Female").FirstOrDefault().Id;
                                    //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == UserSettings.YearId && p.English == "Female").FirstOrDefault().Value;
                                }
                                else
                                {
                                _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Id;
                                    //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Value;
                                }
                            }


                            var dob = row.Cells[8]?.CalculatedValue.Trim();

                            if (string.IsNullOrEmpty(dob))
                            {
                                _file.ChildDob = null;
                            }
                            else
                            {
                                // add check for valid date range 1900-01-01 to 2079-06-06
                                if (DateTime.TryParse(dob, out DateTime newvalue))
                                {
                                    if (newvalue <= DateTime.Parse("2079-06-06") && newvalue >= DateTime.Parse("1900-01-01"))
                                        _file.ChildDob = newvalue;
                                    else
                                    {
                                        errormessages.Add(dob + " is outside of the acceptable range 1900-01-01 to 2079-06-06 at Row: " + (i + 1));
                                        haserror = true;
                                    }
                                }
                                else
                                {
                                    errormessages.Add("Child Dob: " + dob + " is invalid at Row: " + (i + 1));
                                    haserror = true;
                                }
                            }

                            _file.ChildPostalCode = row.Cells[9]?.CalculatedValue.Trim();
                            _file.ChildEdiid = row.Cells[10]?.CalculatedValue.Trim();

                            _file.FileImportStatusId = (int)Enumerations.FileImportStatus.Imported;

                            _file.ModifiedDate = DateTime.Now;
                            _file.ModifiedBy = UserSettings.UserName;

                            _file.CreatedDate = DateTime.Now;
                            _file.CreatedBy = UserSettings.UserName;

                            if (!haserror)
                            {
                                await _fileRepository.AddAsync(_file);

                                error.message = "file has been imported successfully.";
                            }

                            // set the progress
                            progress = (double)((i / (double)lastRow) * 100);

                            // update the progress bar every 5 records
                            if (lastRow > 100)
                            {
                                if (i % 5 == 0)
                                    StateHasChanged();
                            }
                            else
                                StateHasChanged();
                        }
                    //}
                }

                // reset progress bar
                progress = 0;
                StateHasChanged();
                //fileStream.Close();
            }
            else
            {
                errormessages.Add("The file is empty!.");
                haserror = true;
            }

            error.messages = messages;
            error.errormessages = errormessages;
            return error;
        }
        catch (Exception ex)
        {
            sharedService.WriteLogs("UploadFileData failed:" + ex.Message, false);

            errormessage = "File imports failed. Please check the log file for more information.";

            errormessages.Add("ProcessFileData failed:" + ex.Message);
            error.message = message;
            error.errormessage = errormessage;
            error.errormessages = errormessages;
            return error;
        }
    }


    public async Task<ErrorViewModel> ProcessFileData(string sitename)
    {

        sharedService.WriteLogs("ProcessFileData started by:" + UserSettings.UserName, true);
        ErrorViewModel error = new ErrorViewModel();

        string errormessage = string.Empty;
        string message = string.Empty;
        List<string> messages = new List<string>();
        List<string> errormessages = new List<string>();

        try
        {
            var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
            optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
            using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
            {
                var alldata = _fileRepository.ListImportedData().Where(p=> p.SiteName == sitename);
                int fileimportstatusid = (int)Enumerations.FileImportStatus.Imported;

                //var processstatusid = servicecontext.FileImportStatuses.Where(p => p.English == "Processed").First().Id;

                var totalcoordinators = 0;
                var totalsites = 0;
                var totalschools = 0;
                var totalteachers = 0;
                var totalstudents = 0;

                var password = string.Empty;
                int yearid = 0;
                string subyear;                
                bool haserror;
                short EDIYear = -1;
                short previousEDIYear = 0;
                int coordinatorid = -1;
                string previousCoordinatorName = string.Empty;
                string previousCoordinatorEmail = string.Empty;
                int provinceId = -1;                
                string provincename = string.Empty;
                string provinceedicodestring;
                int provinceEDICode = -1;
                int previousProvinceEDICode = -1;
                int countryid=0;
                string predicate = string.Empty;
                Questionnaire questionnaireTeacher = null;
                Questionnaire questionnaireDemographics = null;
                Questionnaire questionnaireA = null;
                Questionnaire questionnaireB = null;
                Questionnaire questionnaireC = null;
                Questionnaire questionnaireD = null;
                Questionnaire questionnaireE = null;
                int siteId = -1;
                string previousSiteNumber = "0";
                int schoolId = -1;
                string previousSchoolNumber = "0";
                int teacherId = -1;
                string previousTeacherName = string.Empty;
                string previousTeacherEmail = string.Empty;
                int childCount = 0;
                int totalChildren = alldata.Count();
                string username = UserSettings.UserName;
                DateTime timestamp;
                var childstatus = dbContext.ChildStatuses.Where(p => p.English == "New").FirstOrDefault();

                foreach (var data in alldata)
                {
                    childCount++;
                    timestamp = DateTime.Now;
                    // default variables
                    haserror = false;

                    if (string.IsNullOrEmpty(data.ChildEdiid))
                    {
                        errormessages.Add(data.Id + ": Child Ediid is required.");
                        haserror = true;
                    }
                    if (data.ChildEdiid.Length != 15)
                    {
                        errormessages.Add(data.Id + ": Child Ediid != 15 digits.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.CoordinatorName))
                    {
                        errormessages.Add(data.Id + ": Coordinator Name is required.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.CoordinatorEmail))
                    {
                        errormessages.Add(data.Id + ": Coordinator Email is required.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.SiteName))
                    {
                        errormessages.Add(data.Id + ": Site Name is required.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.SchoolName))
                    {
                        errormessages.Add(data.Id + ": School Name is required.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.TeacherName))
                    {
                        errormessages.Add(data.Id + ": Teacher Name is required.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.TeacherEmail))
                    {
                        errormessages.Add(data.Id + ": Teacher Email is required.");
                        haserror = true;
                    }
                    if (!ValidateExtension.IsEmailValid(data.TeacherEmail))
                    {
                        errormessages.Add(data.Id + ": Teacher Email is invalid.");
                        haserror = true;
                    }
                    if (!ValidateExtension.IsEmailValid(data.CoordinatorEmail))
                    {
                        errormessages.Add(data.Id + ": Coordinator Email is invalid.");
                        haserror = true;
                    }
                    if (string.IsNullOrEmpty(data.LocalId))
                    {
                        errormessages.Add(data.Id + ": Local Id is required.");
                        haserror = true;
                    }

                    subyear = data.ChildEdiid.Substring(0, 2);                    
                    EDIYear = short.Parse("20" + subyear);

                    // if year is the same as previous record no further action required for year variable
                    if (EDIYear != previousEDIYear)
                    {
                        previousEDIYear = EDIYear;

                        // check to see if year is in the database
                        var years = servicecontext.Years.Where(p => p.Ediyear == EDIYear);

                        // if the year is not in the database then add it
                        if (years == null || years.Count() == 0)
                        {
                            try
                            {
                                var _year = new Year();

                                _year.Ediyear = EDIYear;
                                _year.CreatedDate = timestamp;
                                _year.CreatedBy = username;
                                _year.ModifiedDate = timestamp;
                                _year.ModifiedBy = username;

                                await _yearRepository.AddAsync(_year);

                                yearid = _year.Id;
                            }
                            catch (Exception ex)
                            {
                                errormessages.Add(data.Id + ": Create year error: " + ex.Message);
                                haserror = true;
                            }
                        }
                        else
                        {
                            yearid = years.First().Id;
                        }
                    }

                    provinceedicodestring = data.ChildEdiid.Substring(2, 2);
                    provinceEDICode = int.Parse(provinceedicodestring);

                    // lookup province data if not the same
                    if(provinceEDICode != previousProvinceEDICode)
                    {
                        previousProvinceEDICode = provinceEDICode;
                        countryid = servicecontext.Provinces.Where(p => p.EDICode == provinceEDICode && p.YearId == yearid).FirstOrDefault().CountryID;
                        provinceId = servicecontext.Provinces.Where(p => p.EDICode == provinceEDICode && p.YearId == yearid).FirstOrDefault().Id;                            
                        provincename = servicecontext.Provinces.Where(p => p.EDICode == provinceEDICode && p.YearId == yearid).FirstOrDefault().English.Replace(" ", "");

                        predicate = "p => p." + provincename + ".Value && p.YearId == " + yearid + " && p.QuestionnaireName == \"Teacher Feedback\"";

                        questionnaireTeacher = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        if (questionnaireTeacher == null)
                        {
                            errormessages.Add(data.Id + ": Teacher Feedback Questionnaire is invalid and not associated to the year - " + EDIYear);
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Demographics\"";

                        questionnaireDemographics = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Section A\"";

                        questionnaireA = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Section B\"";

                        questionnaireB = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Section C\"";

                        questionnaireC = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Section D\"";

                        questionnaireD = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        predicate = "p => p." + provincename + " == true && p.YearId == " + yearid + " && p.QuestionnaireName == \"Section E\"";

                        questionnaireE = dbContext.Questionnaires.Where(predicate).FirstOrDefault();

                        if (questionnaireDemographics == null)
                        {
                            errormessages.Add(data.Id + ": Demographics Questionnaire is invalid and not associated to the year - " + EDIYear);
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        if (questionnaireA == null)
                        {
                            errormessages.Add(data.Id + ": Section A Questionnaire is invalid and not associated to the year - " + EDIYear);
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        if (questionnaireB == null)
                        {
                            errormessages.Add(data.Id + ": Section B Questionnaire is invalid and not associated to the year - " + EDIYear);
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        if (questionnaireC == null)
                        {
                            errormessages.Add( data.Id + ": Section C Questionnaire is invalid and not associated to the year - " + EDIYear);
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        if (questionnaireD == null)
                        {
                            errormessages.Add(data.Id + ": Section D Questionnaire is invalid and not associated to the year - " + EDIYear );
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }

                        if (questionnaireE == null)
                        {
                            errormessages.Add(data.Id + ": Section E Questionnaire is invalid and not associated to the year - " + EDIYear );
                            haserror = true;
                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidQuestionnaire;
                        }
                    }



                    if (!haserror)
                    {
                        password = data.ChildEdiid.Substring(4, 8);

                        ///<summary>process coordinator
                        ///</summary>          
                        // check to see if same coordinator
                        if (data.CoordinatorName != previousCoordinatorName || data.CoordinatorEmail != previousCoordinatorEmail)
                        {                                
                            previousCoordinatorName = data.CoordinatorName;
                            previousCoordinatorEmail = data.CoordinatorEmail;

                            // lookup the coordinator
                            var coordinator = servicecontext.Coordinators.Where(p => p.CoordinatorName == data.CoordinatorName && p.Email == data.CoordinatorEmail && p.YearId == yearid).FirstOrDefault();

                            // if coordinator not in database it needs to be created
                            if (coordinator == null)
                            {
                                // check to see if user in database - if not create it
                                var user = identityContext.Users.Where(p => p.UserName == data.CoordinatorEmail).FirstOrDefault();
                                string userid = string.Empty;

                                if (user == null)
                                {
                                    try
                                    {
                                        string[] names = data.CoordinatorName.Split(' ');
                                        string firstname = names[0];
                                        string lastname = names[1];

                                        var newuser = new EDIApplicationUser
                                            {
                                                UserName = data.CoordinatorEmail,
                                                Email = data.CoordinatorEmail,
                                                FirstName = firstname,
                                                LastName = lastname
                                            };
                                        var result = await _userManager.CreateAsync(newuser, "EDI&" + lastname + "26");

                                        var role = identityContext.Roles.Where(p => p.Name == "Coordinator").FirstOrDefault();

                                        await _userManager.AddToRoleAsync(newuser, role.Name);

                                        userid = newuser.Id;
                                    }
                                    catch (Exception ex)
                                    {
                                        errormessages.Add(data.Id + ": Create user error: " + ex.Message);
                                        haserror = true;
                                    }
                                }
                                else
                                {
                                    userid = user.Id;
                                }

                                try
                                {
                                    var _coordinator = new Coordinator();

                                    _coordinator.UserId = userid;
                                    _coordinator.CoordinatorName = data.CoordinatorName;
                                    _coordinator.Email = data.CoordinatorEmail;
                                    _coordinator.YearId = yearid;
                                    _coordinator.CreatedDate = timestamp;
                                    _coordinator.CreatedBy = username;
                                    _coordinator.ModifiedDate = timestamp;
                                    _coordinator.ModifiedBy = username;

                                    await _coordinatorRepository.AddAsync(_coordinator);
                                    coordinatorid = _coordinator.Id;
                                    totalcoordinators++;
                                }
                                catch (Exception ex)
                                {
                                    errormessages.Add(data.Id + ": Create coordinator error: " + ex.Message);
                                    haserror = true;
                                }
                            }
                            else
                            {
                                coordinatorid = coordinator.Id;
                            }

                        }

                        ///<summary>process site
                        ///</summary>
                        if (coordinatorid > 0)
                        {
                            string siteNumber = data.ChildEdiid.Substring(4, 3);                                                        

                            if (siteNumber != previousSiteNumber)
                            {     
                                previousSiteNumber = siteNumber;
                                siteMessage = "Processing Site " + siteNumber;   
                                var site = servicecontext.Sites.Where(p => p.SiteNumber == siteNumber && p.SiteName == data.SiteName && p.YearId == yearid).FirstOrDefault();

                                if (site == null)
                                {
                                    try
                                    {
                                        var _site = new Site();

                                        _site.SiteNumber = siteNumber;
                                        _site.SiteName = data.SiteName;
                                        _site.CoordinatorId = coordinatorid;
                                        _site.YearId = yearid;
                                        _site.CreatedDate = timestamp;
                                        _site.CreatedBy = username;
                                        _site.ModifiedDate = timestamp;
                                        _site.ModifiedBy = username;

                                        await _siteRepository.AddAsync(_site);
                                        siteId = _site.Id;
                                        totalsites++;
                                    }
                                    catch (Exception ex)
                                    {
                                        errormessages.Add(data.Id + ": Create site error: " + ex.Message);
                                        haserror = true;
                                    }
                                }
                                else
                                {
                                    siteId = site.Id;                                    
                                }                                
                            }
                        }

                        ///<summary>process school
                        ///</summary>
                        if (siteId > 0)
                        {
                            string schoolNumber = data.ChildEdiid.Substring(7, 3);                                                        

                            if (schoolNumber != previousSchoolNumber)
                            {
                                previousSchoolNumber = schoolNumber;
                                schoolMessage = "Processing School " + data.SchoolName;                                     
                                var school = servicecontext.Schools.Where(p => p.SiteId == siteId && p.SchoolNumber == schoolNumber && p.SchoolName == data.SchoolName && p.YearId == yearid).FirstOrDefault();

                                if (school == null)
                                {
                                    try
                                    {
                                        var _school = new School();

                                        _school.SchoolNumber = schoolNumber;
                                        _school.SchoolName = data.SchoolName;


                                        if (provinceId == 0)
                                        {
                                            errormessages.Add("FileImports data " + data.Id + ": Province is required.");
                                            fileimportstatusid = (int)Enumerations.FileImportStatus.InvalidProvince;
                                            haserror = true;
                                        }
                                        else
                                        {
                                            _school.CountryId = countryid;
                                            _school.ProvinceId = provinceId;
                                            _school.SiteId = siteId;
                                            _school.YearId = yearid;
                                            _school.CreatedDate = timestamp;
                                            _school.CreatedBy = username;
                                            _school.ModifiedDate = timestamp;
                                            _school.ModifiedBy = username;

                                            await _schoolRepository.AddAsync(_school);
                                            schoolId = _school.Id;
                                            totalschools++;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        errormessages.Add(data.Id + ": Create school error: " + ex.Message);
                                        haserror = true;
                                    }
                                }
                                else
                                {
                                    schoolId = school.Id;                                    
                                }                                
                            }
                            ///<summary>process teacher
                            ///</summary>       

                            if (data.TeacherName != previousTeacherName || data.TeacherEmail != previousTeacherEmail)
                            {
                                previousTeacherName = data.TeacherName;
                                previousTeacherEmail = data.TeacherEmail;
                                string firstname = string.Empty;
                                string lastname = string.Empty;

                                teacherMessage = "Processing Teacher " + previousTeacherName;   
                                if (schoolId > 0)
                                {
                                    string teachernumber = data.ChildEdiid.Substring(10, 2);
                                    var teacher = servicecontext.Teachers.Where(p => p.TeacherName == data.TeacherName && p.Email == data.TeacherEmail && p.YearId == yearid).FirstOrDefault();

                                    // create the teacher if null -- also creates teacher profile

                                    var user = identityContext.Users.Where(p => p.UserName == data.TeacherEmail).FirstOrDefault();
                                    string userid = string.Empty;

                                    // if identity user doesn't exist then create it
                                    if (user == null)
                                    {
                                        try
                                        {
                                            string[] names = data.TeacherName.Split(' ');
                                            if (names.Length == 1)
                                                firstname = names[0];
                                            else if (names.Length > 1)
                                            {
                                                firstname = names[0];
                                                lastname = names[1];
                                            }                                                                                            

                                            var newuser = new EDIApplicationUser();
                                            newuser.UserName = Guid.NewGuid().ToString();
                                            var result = await _userManager.CreateAsync(newuser, password);

                                            var role = identityContext.Roles.Where(p => p.Name == "Teacher").FirstOrDefault();

                                            await _userManager.AddToRoleAsync(newuser, role.Name);

                                            var oneuser = identityContext.Users.Where(p => p.Id == newuser.Id).FirstOrDefault();
                                            oneuser.UserName = data.TeacherEmail;
                                            oneuser.Email = data.TeacherEmail;
                                            oneuser.FirstName = firstname;
                                            oneuser.LastName = lastname;                                              
                                            oneuser.NormalizedUserName = data.TeacherEmail.ToUpper();
                                            oneuser.NormalizedEmail = data.TeacherEmail.ToUpper();

                                            await _userManager.UpdateAsync(oneuser);

                                            userid = newuser.Id;
                                        }
                                        catch (Exception ex)
                                        {
                                            errormessages.Add(data.Id + ": Create identity user error: " + ex.Message);
                                            haserror = true;
                                        }
                                    }
                                    else
                                    {
                                        userid = user.Id;
                                    }
                                    if (teacher == null)
                                        {
                                        try
                                        {
                                            var teacherstatus = dbContext.TeacherStatuses.Where(p => p.English == "New").FirstOrDefault();
                                            var _teacher = new Teacher();

                                            _teacher.UserId = userid;
                                            _teacher.TeacherNumber = teachernumber;
                                            _teacher.TeacherName = data.TeacherName;
                                            _teacher.Email = data.TeacherEmail;
                                            _teacher.SchoolId = schoolId;
                                            _teacher.YearId = yearid;
                                            _teacher.TeacherStatusId = teacherstatus.Id;
                                            _teacher.CreatedDate = timestamp;
                                            _teacher.CreatedBy = username;
                                            _teacher.ModifiedDate = timestamp;
                                            _teacher.ModifiedBy = username;

                                            await _teacherRepository.AddAsync(_teacher);
                                            teacherId = _teacher.Id;
                                            totalteachers++;

                                            var teacherprofile = dbContext.QuestionnairesDataTeacherProfiles.Where(p => p.TeacherId == _teacher.Id && p.YearId == yearid).FirstOrDefault();

                                            if (teacherprofile == null)
                                            {
                                                var _QuestionnairesDataTeacherProfile = new QuestionnairesDataTeacherProfile();
                                                _QuestionnairesDataTeacherProfile.TeacherId = teacherId;
                                                _QuestionnairesDataTeacherProfile.YearId = yearid;
                                                _QuestionnairesDataTeacherProfile.QuestionnaireId = questionnaireTeacher.Id;
                                                _QuestionnairesDataTeacherProfile.CreatedDate = timestamp;
                                                _QuestionnairesDataTeacherProfile.CreatedBy = username;
                                                _QuestionnairesDataTeacherProfile.ModifiedDate = timestamp;
                                                _QuestionnairesDataTeacherProfile.ModifiedBy = username;

                                                await _profileRepository.AddAsync(_QuestionnairesDataTeacherProfile);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            errormessages.Add(data.Id + ": Create teacher error: " + ex.Message);
                                            haserror = true;
                                        }
                                    }
                                    else
                                    {
                                        teacherId = teacher.Id;

                                        // TODO - update password to this years password - should reset pwd appropriately - 2023-04-17
                                        /*var onepassword = sharedService.GeneratePassword(teacherId);
                                         
                                        var _account = await _accountRepository.GetByIdAsync(teacher.UserId);
                                        var newPassword = _userManager.PasswordHasher.HashPassword(_account, onepassword);

                                        _account.PasswordHash = newPassword;

                                        await _userManager.UpdateAsync(_account);*/

                                        // this section is not needed
                                        /*var child = dbContext.Children.Where(p => p.TeacherId == teacher.Id && p.YearId == yearid).FirstOrDefault();
                                         * 
                                        if (child != null)
                                        {
                                            var onepassword = sharedService.GeneratePassword(teacherId);

                                            var _account = await _accountRepository.GetByIdAsync(teacher.UserId);
                                            var newPassword = _userManager.PasswordHasher.HashPassword(_account, onepassword);

                                            if (_account != null)
                                            {
                                                _account.PasswordHash = newPassword;

                                                await _userManager.UpdateAsync(_account);
                                            }
                                            else
                                            {
                                                string[] names = teacher.TeacherName.Split(' ');
                                                string firstname = names[0];
                                                string lastname = names[1];

                                                var newuser = new EDIApplicationUser();
                                                newuser.UserName = Guid.NewGuid().ToString();
                                                var result = await _userManager.CreateAsync(newuser, newPassword);

                                                var role = identityContext.Roles.Where(p => p.Name == "Teacher").FirstOrDefault();

                                                await _userManager.AddToRoleAsync(newuser, role.Name);

                                                var oneuser = identityContext.Users.Where(p => p.Id == newuser.Id).FirstOrDefault();
                                                oneuser.UserName = teacher.Email;
                                                oneuser.Email = teacher.Email;
                                                oneuser.FirstName = firstname;
                                                oneuser.LastName = lastname;
                                                oneuser.NormalizedUserName = teacher.Email.ToUpper();
                                                oneuser.NormalizedEmail = teacher.Email.ToUpper();

                                                await _userManager.UpdateAsync(oneuser);
                                            }
                                        }*/
                                    }
                                }

                            }

                            ///<summary>process student
                            ///</summary>
                            int childid = 0;
                            
                            if (teacherId > 0)
                            {
                                childMessage = "Processing Child " + data.ChildEdiid + ": record " + childCount + " of " + totalChildren;   
                                // check to see if EDI ID exists
                                var child = servicecontext.Children.Where(p => p.Ediid == data.ChildEdiid && p.YearId == yearid).FirstOrDefault();
                                //var tempGenderId = servicecontext.Genders.Where(g => g.YearId == yearid && g.Code == data.GenderId.ToString()).FirstOrDefault().Id;

                                if (child == null)
                                {
                                    try
                                    {
                                        string childnumber = data.ChildEdiid.Substring(13, 2);
                                        var _child = new Child();                                        

                                        _child.Ediid = data.ChildEdiid;
                                        _child.LocalId = data.LocalId;
                                        _child.ChildNumber = childnumber;
                                        _child.YearId = yearid;
                                        _child.TeacherId = teacherId;
                                        _child.GenderId = data.GenderId;
                                        _child.Dob = data.ChildDob;
                                        _child.PostalCode = data.ChildPostalCode;
                                        _child.ChildStatusId = childstatus.Id;
                                        _child.CreatedDate = timestamp;
                                        _child.CreatedBy = username;
                                        _child.ModifiedDate = timestamp;
                                        _child.ModifiedBy = username;

                                        await _childRepository.AddAsync(_child);

                                        childid = _child.Id;
                                        totalstudents++;

                                        // be sure child has been created and has an id - then create questionnaires
                                        if (childid > 0)
                                        {
                                            // no need to check here as the child was just created
                                            // var demo = dbContext.QuestionnairesDataDemographics.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();
                                            // var seca = dbContext.QuestionnairesDataSectionAs.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();
                                            // var secb = dbContext.QuestionnairesDataSectionBs.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();
                                            // var secc = dbContext.QuestionnairesDataSectionCs.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();
                                            // var secd = dbContext.QuestionnairesDataSectionDs.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();
                                            // var sece = dbContext.QuestionnairesDataSectionEs.Where(p => p.ChildId == childid && p.YearId == yearid).FirstOrDefault();

                                            var _demographics = new QuestionnairesDataDemographic();

                                            _demographics.ChildId = childid;
                                            _demographics.GenderId = data.GenderId;
                                            _demographics.Dob = data.ChildDob;
                                            _demographics.PostalCode = data.ChildPostalCode;
                                            _demographics.QuestionnaireId = questionnaireDemographics.Id;
                                            _demographics.YearId = yearid;
                                            _demographics.CreatedDate = timestamp;
                                            _demographics.CreatedBy = username;
                                            _demographics.ModifiedDate = timestamp;
                                            _demographics.ModifiedBy = username;

                                            await _questionnairesDataDemographic.AddAsync(_demographics);

                                            var _sectionA = new QuestionnairesDataSectionA();

                                            _sectionA.ChildId = childid;
                                            _sectionA.QuestionnaireId = questionnaireA.Id;
                                            _sectionA.YearId = yearid;
                                            _sectionA.CreatedDate = timestamp;
                                            _sectionA.CreatedBy = username;
                                            _sectionA.ModifiedDate = timestamp;
                                            _sectionA.ModifiedBy = username;

                                            await _questionnairesDataSectionA.AddAsync(_sectionA);

                                            var _sectionB = new QuestionnairesDataSectionB();

                                            _sectionB.ChildId = childid;
                                            _sectionB.QuestionnaireId = questionnaireB.Id;
                                            _sectionB.YearId = yearid;
                                            _sectionB.CreatedDate = timestamp;
                                            _sectionB.CreatedBy = username;
                                            _sectionB.ModifiedDate = timestamp;
                                            _sectionB.ModifiedBy = username;

                                            await _questionnairesDataSectionB.AddAsync(_sectionB);

                                            var _sectionC = new QuestionnairesDataSectionC();

                                            _sectionC.ChildId = childid;
                                            _sectionC.QuestionnaireId = questionnaireC.Id;
                                            _sectionC.YearId = yearid;
                                            _sectionC.CreatedDate = timestamp;
                                            _sectionC.CreatedBy = username;
                                            _sectionC.ModifiedDate = timestamp;
                                            _sectionC.ModifiedBy = username;

                                            await _questionnairesDataSectionC.AddAsync(_sectionC);

                                            var _sectionD = new QuestionnairesDataSectionD();

                                            _sectionD.ChildId = childid;
                                            _sectionD.QuestionnaireId = questionnaireD.Id;
                                            _sectionD.YearId = yearid;
                                            _sectionD.CreatedDate = timestamp;
                                            _sectionD.CreatedBy = username;
                                            _sectionD.ModifiedDate = timestamp;
                                            _sectionD.ModifiedBy = username;

                                            await _questionnairesDataSectionD.AddAsync(_sectionD);



                                            var _sectionE = new QuestionnairesDataSectionE();

                                            _sectionE.ChildId = childid;
                                            _sectionE.QuestionnaireId = questionnaireE.Id;
                                            _sectionE.YearId = yearid;
                                            _sectionE.CreatedDate = timestamp;
                                            _sectionE.CreatedDate = timestamp;
                                            _sectionE.CreatedBy = username;
                                            _sectionE.ModifiedDate = timestamp;
                                            _sectionE.ModifiedBy = username;

                                            await _questionnairesDataSectionE.AddAsync(_sectionE);

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        errormessages.Add(data.Id + ": Create student error: " + ex.Message);
                                        haserror = true;
                                    }
                                }
                                else
                                {
                                    // get the existing child ID - nothing needs to be done beyond this as the record already exists
                                    childid = child.Id;
                                    fileimportstatusid = (int)Enumerations.FileImportStatus.Duplicate;
                                    errormessages.Add(data.ChildEdiid + " Already Exists");
                                    haserror = true;
                                }
                            }
                            
                        }
                    }

                    if (!haserror)
                    {
                        fileimportstatusid = (int)Enumerations.FileImportStatus.Processed;
                        error.message = "Site has been successfully processed.";
                    }

                    data.FileImportStatusId = fileimportstatusid;
                    data.ModifiedDate = timestamp;
                    data.ModifiedBy = username;

                    await _fileRepository.UpdateAsync(data);                    

                    // set the progress
                    fileProgress = (double)((childCount / (double)totalChildren) * 100);

                    // update the progress bar every 5 records
                    if (totalChildren > 100)
                    {
                        if (childCount % 5 == 0)
                            StateHasChanged();
                    }
                    else
                        StateHasChanged();
                }

                if (totalcoordinators > 0)
                {
                    messages.Add(totalcoordinators + " new coordinator(s) were inserted.");
                }

                if (totalsites > 0)
                {                        
                    messages.Add(totalsites + " new site(s) inserted.");                     
                }

                if (totalschools > 0)
                {
                    messages.Add(totalschools + " new school(s) inserted.");                    
                }

                if (totalteachers > 0)
                {
                    messages.Add(totalteachers + " new teacher(s) were inserted.");
                }

                if (totalstudents > 0)
                {
                    messages.Add(totalstudents + " new student(s) were inserted.");
                }

                // reset progress bar
                fileProgress = 0;
                StateHasChanged();
            }
            error.messages = messages;
            error.errormessages = errormessages;

            return error;
        }
        catch (Exception ex)
        {
            sharedService.WriteLogs("ProcessFileData failed:" + ex.Message, false);

            errormessage = "Processing data failed. Please check the log file for more information.";
            errormessages.Add("ProcessFileData failed:" + ex.Message);
            error.message = message;
            error.errormessage = errormessage;
            error.errormessages = errormessages;
            return error;
        }
    }
}
