@page "/DataImport/index/{ChangeNumber:int}"
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Authorization;
@using EDI.Web.Extensions;
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ISharedService sharedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IModalService Modal
@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>File Import</strong>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(@Message))
                {
                    <div class="text-success">@Message</div><br /><br />
                }

                @if (!string.IsNullOrEmpty(@ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div><br /><br />
                }

                @if (processingresult != null && processingresult.messages != null && processingresult.messages.Count() > 0)
                {
                    <div class="alert alert-info alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.messages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (processingresult != null && processingresult.errormessages != null && processingresult.errormessages.Count() > 0)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.errormessages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (ShowFileupload)
                {
                    <div class="info">
                        <button type="button" class="closeFileupload" @onclick="CloseUpload"><span aria-hidden="true">&times;</span></button>
                        <SfUploader AllowedExtensions=".xlsx" AutoUpload="false" Multiple="false">
                            <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                        </SfUploader><br />
                    </div>
                }
                <div class="row"></div>
                <br />
                @if (files == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <a href="data/EDI Upload Template.xlsx" class="btn btn-purple">Download Template</a>
                    <br />
                    <div id="container">
                        <SfGrid ID="GridFile" @ref="Grid" DataSource="@files" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Excel Import","Process", "ExcelExport", "CsvExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                            <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" ShowDeleteConfirmDialog="false"></GridEditSettings>
                            <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" TValue="FileItemViewModel"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(FileItemViewModel.FileName) HeaderText="File" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.SiteName) HeaderText="Site" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorName) HeaderText="Coordinator" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorEmail) HeaderText="Coordinator Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.SchoolName) HeaderText="School" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherName) HeaderText="Teacher" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherEmail) HeaderText="Teacher Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.LocalId) HeaderText="Child's Local ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.Gender) HeaderText="Gender" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildDob) HeaderText="DOB" Format="yyyy-MM-dd" Type="ColumnType.Date" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildPostalCodeZip) HeaderText="Postal" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildEdiid) HeaderText="EDI_ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                    <SfSpinner @ref="SpinnerObj" Target="#container">
                    </SfSpinner>
                }

            </div>

        </div>
    </div>
</div>

@code {

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    [Parameter]
    public int? ChangeNumber { get; set; }

    SfSpinner SpinnerObj;
    ErrorViewModel processingresult { get; set; }

    SfGrid<FileItemViewModel> Grid;

    IEnumerable<FileItemViewModel> files;

    private bool ShowFileupload { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ShowFileupload = false;

        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        {
            var status = servicecontext.FileImportStatuses.Where(p => p.English == "Imported").FirstOrDefault();

            var allfiles = await Task.FromResult(servicecontext.FileImports.Where(p => p.FileImportStatusId == status.Id).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCodeZip = file.ChildPostalCodeZip;
                afile.ChildEdiid = file.ChildEdiid;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            ShowFileupload = false;

            var status = dbContext.FileImportStatuses.Where(p => p.English == "Imported").FirstOrDefault();

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId == status.Id).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCodeZip = file.ChildPostalCodeZip;
                afile.ChildEdiid = file.ChildEdiid;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<FileItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    FileItemViewModel FileModel { get; set; }

    async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridFile_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridFile_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridFile_csvexport")
        {
            this.Grid.CsvExport();
        }
        if (args.Item.Id == "GridFile_Excel Import")
        {
            UploadFile();
        }
        if (args.Item.Id == "GridFile_Process")
        {
            SpinnerObj.ShowSpinner("Start to process data");
            processingresult = await sharedService.ProcessFileData();
            SpinnerObj.HideSpinner("Data processing is done.");

            var status = dbContext.FileImportStatuses.Where(p => p.English == "Imported").FirstOrDefault();

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId == status.Id).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var nfile in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = nfile.Id;
                afile.FileName = nfile.FileName;
                afile.SiteName = nfile.SiteName;
                afile.CoordinatorName = nfile.CoordinatorName;
                afile.CoordinatorEmail = nfile.CoordinatorEmail;
                afile.SchoolName = nfile.SchoolName;
                //afile.SchoolProvinceId = nfile.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = nfile.TeacherName;
                afile.TeacherEmail = nfile.TeacherEmail;
                afile.LocalId = nfile.LocalId;
                //afile.ClassTime = nfile.ClassTime;
                afile.GenderId = nfile.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = nfile.ChildDob;
                afile.ChildPostalCodeZip = nfile.ChildPostalCodeZip;
                afile.ChildEdiid = nfile.ChildEdiid;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            this.Grid.Refresh();

            StateHasChanged();
        }
    }

    IFileListEntry file;

    private void UploadFile()
    {
        ShowFileupload = true;
    }

    private async void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            ErrorViewModel result = await sharedService.UploadFileData(file);

            if (string.IsNullOrEmpty(result.errormessage))
            {
                result.message = "Data uploaded successfully.";

                toastService.ShowSuccess(result.message);

                Random random = new Random();
                NavigationManager.NavigateTo("./DataImport/index/" + random.Next(1, 1000));

            }
            else
            {
                ErrorMessage = result.errormessage;
                toastService.ShowError(result.errormessage);
            }
        }
    }


    private void CloseUpload()
    {
        ShowFileupload = false;
    }


    private void UploadFile1()
    {
        var parameters = new ModalParameters();

        parameters.Add("DataName", "Files");

        Modal.Show<UploadFileWindow>("Upload File data: ", parameters);
        Modal.OnClose += UploadWindowModalClosed;
    }

    private async void UploadWindowModalClosed(ModalResult modalResult)
    {
        if (modalResult.Data is ErrorViewModel)
        {
            var result = (ErrorViewModel)modalResult.Data;

            if (!string.IsNullOrEmpty(result.message))
            {
                toastService.ShowSuccess(result.message);
            }
            else if (!string.IsNullOrEmpty(result.errormessage))
            {
                toastService.ShowError(result.errormessage);
            }

            var status = dbContext.FileImportStatuses.Where(p => p.English == "Imported").FirstOrDefault();

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId == status.Id).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCodeZip = file.ChildPostalCodeZip;
                afile.ChildEdiid = file.ChildEdiid;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            this.Grid.Refresh();
        }
        Modal.OnClose -= UploadWindowModalClosed;

        StateHasChanged();
    }
}
