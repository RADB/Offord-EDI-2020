@page "/DataImport/index/{ChangeNumber:int}"
@using EDI.Web.Shared.Modals;
@using EDI.ApplicationCore.Interfaces;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Components.Authorization;
@using EDI.Web.Extensions;
@using EDI.Web.Data;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.ProgressBar;
@using System.IO;
@using Syncfusion.XlsIO;
@using Serilog;

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject ISharedService sharedService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;
@inject IAsyncRepository<FileImport> _fileRepository;



@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>File Import</strong>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(@Message))
                {
                    <div class="text-success">@Message</div><br /><br />
                }

                @if (!string.IsNullOrEmpty(@ErrorMessage))
                {
                    <div class="text-danger">@ErrorMessage</div><br /><br />
                }

                @if (processingresult != null && processingresult.messages != null && processingresult.messages.Count() > 0)
                {
                    <div class="alert alert-info alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.messages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (processingresult != null && processingresult.errormessages != null && processingresult.errormessages.Count() > 0)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @foreach (var item in processingresult.errormessages)
                        {
                            <ul>
                                <li>@item</li>
                            </ul>
                        }
                    </div>
                }
                @if (ShowFileupload)
                {
                    <div class="info">
                        <button type="button" class="closeFileupload" @onclick="CloseUpload"><span aria-hidden="true">&times;</span></button>
                        <SfUploader AllowedExtensions=".xlsx" AutoUpload="false" Multiple="false">
                            <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                        </SfUploader><br />
                    </div>

                    <SfProgressBar Type="ProgressType.Linear" Value="@progress" Height="60" Minimum="0" Maximum="100" @ref="ProgressBarObj" ShowProgressValue="true" IsStriped="true">
                        <ProgressBarEvents ValueChanged="@ValueHandler"></ProgressBarEvents>
                    </SfProgressBar>

                }
                <div class="row"></div>
                <br />
                @if (files == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <a href="data/EDI Upload Template.xlsx" class="btn btn-purple"><i class="far fa-file-excel fa-lg"></i> Download Template</a>
                    <SfDropDownList TValue="string" CssClass="col-md-4" TItem="SelectListItem" Placeholder="Select a site" AllowFiltering="true" @bind-Value="@sitename" DataSource="@Sites">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="SelectListItem" ValueChange="SiteChange"></DropDownListEvents>
                    </SfDropDownList>
                    <br />
                    <div id="container">
                        <SfGrid ID="GridFile" @ref="Grid" DataSource="@files" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Excel Import","Process","ProcessAll", "ExcelExport", "Clear", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                            <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" ShowDeleteConfirmDialog="false"></GridEditSettings>
                            <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" TValue="FileItemViewModel"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(FileItemViewModel.FileName) HeaderText="File" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorName) HeaderText="Coordinator" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.CoordinatorEmail) HeaderText="Coordinator Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.SchoolName) HeaderText="School" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherName) HeaderText="Teacher" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.TeacherEmail) HeaderText="Teacher Email" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.LocalId) HeaderText="Child's Local ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.Gender) HeaderText="Gender" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildDob) HeaderText="DOB" Format="yyyy-MM-dd" Type="ColumnType.Date" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildPostalCode) HeaderText="Postal" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.ChildEdiid) HeaderText="EDI_ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FileItemViewModel.FileImportStatus) HeaderText="Status" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                    <SfSpinner @ref="SpinnerObj">
                    </SfSpinner>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }


    [Parameter]
    public int? ChangeNumber { get; set; }

    SfSpinner SpinnerObj;
    SfProgressBar ProgressBarObj;
    ErrorViewModel processingresult { get; set; }

    SfGrid<FileItemViewModel> Grid;

    IEnumerable<FileItemViewModel> files;

    private bool ShowFileupload { get; set; }    
    //private IHostEnvironment _hostingEnvironment;

    public IEnumerable<SelectListItem> Sites { get; set; }
    public string sitename{ get; set; }

    public double progress {get; set;}
    //Syncfusion.Blazor.ProgressBar pb ;

    protected override async Task OnParametersSetAsync()
    {
        ShowFileupload = false;

        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        {
            var sites = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed).OrderBy(p => p.SiteName).Select(p => p.SiteName).Distinct().ToList();

            var items = new List<SelectListItem>();

            foreach (var site in sites)
            {
                items.Add(new SelectListItem() { Value = site, Text = site });
            }

            Sites = items;
            sitename = sites != null && sites.Count() > 0 ? sites.First() : string.Empty;

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            ShowFileupload = false;

            var sites = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed).OrderBy(p => p.SiteName).Select(p => p.SiteName).Distinct().ToList();

            var items = new List<SelectListItem>();

            foreach (var site in sites)
            {
                items.Add(new SelectListItem() { Value = site, Text = site });
            }

            Sites = items;
            sitename = sites != null && sites.Count() > 0 ? sites.First() : string.Empty;

            var allfiles = dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList();

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<FileItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    FileItemViewModel FileModel { get; set; }

    async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var parameters = new ModalParameters();
        if (args.Item.Id == "GridFile_pdfexport")
        {
            this.Grid.PdfExport();
        }
        if (args.Item.Id == "GridFile_excelexport")
        {
            this.Grid.ExcelExport();
        }
        if (args.Item.Id == "GridFile_Clear")
        {
            var message = "Are you sure you want to clear the queue?";
            parameters.Add("Message", message);

            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete", parameters);
            var result = await modal.Result;
            ConfirmDeleteModalClosed(result);
        }
        if (args.Item.Id == "GridFile_Excel Import")
        {
            UploadFile();
        }
        if (args.Item.Id == "GridFile_Process")
        {
            ProcessData(sitename);
        }
        if (args.Item.Id == "GridFile_ProcessAll")
        {
            foreach (var site in Sites)
            {
                ProcessData(site.Value);
            }
        }
    }

    async void ProcessData(string sitename)
    {
        var allimportedfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId == (int)Enumerations.FileImportStatus.Imported && p.SiteName == sitename).OrderBy(p => p.FileName).ToList());

        if (allimportedfiles == null || allimportedfiles.Count() == 0)
        {
            toastService.ShowWarning("All imported data with the site - " + sitename + " were processed.");
        }
        else
        {
            await SpinnerObj.ShowAsync();
            processingresult = await sharedService.ProcessFileData(sitename);
            await SpinnerObj.HideAsync();
            //SpinnerObj.HideSpinner("Data processing is done.");

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var nfile in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = nfile.Id;
                afile.FileName = nfile.FileName;
                afile.SiteName = nfile.SiteName;
                afile.CoordinatorName = nfile.CoordinatorName;
                afile.CoordinatorEmail = nfile.CoordinatorEmail;
                afile.SchoolName = nfile.SchoolName;
                //afile.SchoolProvinceId = nfile.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = nfile.TeacherName;
                afile.TeacherEmail = nfile.TeacherEmail;
                afile.LocalId = nfile.LocalId;
                //afile.ClassTime = nfile.ClassTime;
                afile.GenderId = nfile.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = nfile.ChildDob;
                afile.ChildPostalCode = nfile.ChildPostalCode;
                afile.ChildEdiid = nfile.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == nfile.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            StateHasChanged();
        }
    }

    IFileListEntry file;

    private void UploadFile()
    {
        ShowFileupload = true;
    }

    public void ValueHandler(ProgressValueEventArgs args)
    {
        // update the progress bar visual
        //toastService.ShowWarning(progress + " % Complete");
        StateHasChanged();
    }

    private async void OnChange(UploadChangeEventArgs args)
    {        
        foreach (var file in args.Files)
        {
            await SpinnerObj.ShowAsync();
            processingresult = await UploadFileData(file);

            if (processingresult.errormessages.Count() == 0)
            {
                toastService.ShowSuccess("Data uploaded successfully.");

                Random random = new Random();
                NavigationManager.NavigateTo("./DataImport/index/" + random.Next(1, 1000));
            }
            else
            {                
                toastService.ShowError("Data uploaded failed.");
                StateHasChanged();
            }
            await SpinnerObj.HideAsync();
        }
    }

    private void CloseUpload()
    {
        ShowFileupload = false;
    }

    private async void UploadFile1()
    {
        var parameters = new ModalParameters();

        parameters.Add("DataName", "Files");

        var modal = ModalService.Show<UploadFileWindow>("Upload File data: ", parameters);
        var result = await modal.Result;
        UploadWindowModalClosed(result);
        //*Modal.OnClose += UploadWindowModalClosed;
    }

    private async void UploadWindowModalClosed(ModalResult modalResult)
    {
        if (modalResult.Data is ErrorViewModel)
        {
            var result = (ErrorViewModel)modalResult.Data;

            if (!string.IsNullOrEmpty(result.message))
            {
                toastService.ShowSuccess(result.message);
            }
            else if (!string.IsNullOrEmpty(result.errormessage))
            {
                toastService.ShowError(result.errormessage);
            }

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            this.Grid.Refresh();
        }
        //*Modal.OnClose -= UploadWindowModalClosed;

        StateHasChanged();
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await sharedService.ClearQueue();

            var tmp = new List<FileItemViewModel>();

            files = tmp;

            this.Grid.Refresh();

            StateHasChanged();
        }
    }

    private async void SiteChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SelectListItem> e)
    {
        if (e.Value != null)
        {
            sitename = e.Value.ToString();

            var allfiles = await Task.FromResult(dbContext.FileImports.Where(p => p.FileImportStatusId != (int)Enumerations.FileImportStatus.Processed && p.SiteName == sitename).OrderBy(p => p.FileName).OrderBy(p => p.SiteName).OrderBy(p => p.CoordinatorName).ToList());

            List<FileItemViewModel> sivm = new List<FileItemViewModel>();

            foreach (var file in allfiles)
            {
                var afile = new FileItemViewModel();

                afile.Id = file.Id;
                afile.FileName = file.FileName;
                afile.SiteName = file.SiteName;
                afile.CoordinatorName = file.CoordinatorName;
                afile.CoordinatorEmail = file.CoordinatorEmail;
                afile.SchoolName = file.SchoolName;
                //afile.SchoolProvinceId = file.SchoolProvinceId;
                //var province = dbContext.Provinces.Where(p => p.EDICode == afile.SchoolProvinceId).FirstOrDefault();
                //afile.Province = province != null ? province.English : string.Empty;
                afile.TeacherName = file.TeacherName;
                afile.TeacherEmail = file.TeacherEmail;
                afile.LocalId = file.LocalId;
                //afile.ClassTime = file.ClassTime;
                afile.GenderId = file.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault();
                afile.Gender = gender != null ? dbContext.Genders.Where(p => p.Id == afile.GenderId).FirstOrDefault().English : string.Empty;
                afile.ChildDob = file.ChildDob;
                afile.ChildPostalCode = file.ChildPostalCode;
                afile.ChildEdiid = file.ChildEdiid;
                afile.FileImportStatus = dbContext.FileImportStatuses.Where(p => p.Id == file.FileImportStatusId).FirstOrDefault().English;

                sivm.Add(afile);
            }

            this.rowid = 0;

            files = sivm;

            StateHasChanged();
        }
    }

    public async Task<ErrorViewModel> UploadFileData(Syncfusion.Blazor.Inputs.UploadFiles file)
    {            
        sharedService.WriteLogs("UploadFileData started by:" + UserSettings.UserName, true);
        ErrorViewModel error = new ErrorViewModel();

        string errormessage = string.Empty;
        string message = string.Empty;
        List<string> messages = new List<string>();
        List<string> errormessages = new List<string>();

        var haserror = false;

        try
        {
            if (file.FileInfo.Size > 0)
            {                    
                // create the directory and get the path back from shared service
                string newPath = sharedService.GetContentRootFolder();

                string fileName = string.Format("Sites{0}.xlsx",DateTime.Now.ToString("yyyyMMdd_HHmmss"));
                string fullPath = Path.Combine(newPath, fileName);

                var columnHeaders = new string[]
                    {
                        "Site",
                        "Coordinator",
                        "Coordinator Email",
                        "School Name",
//                        "School Province",
                        "Teacher Name",
                        "Teacher Email",
                        "Child's Local ID",
//                        "Class_tm",
                        "Gender",
                        "DOB",
                        "Postal Code",
                        "EDI_ID"
                    };

                using (Stream fileStream = file.Stream)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        // set the stream position to zero
                        fileStream.Position = 0;

                        Syncfusion.XlsIO.IWorkbook workbook = excelEngine.Excel.Workbooks.Open(fileStream, ExcelOpenType.Automatic, ExcelParseOptions.Default); ;

                        //Get the first worksheet in the workbook into IWorksheet
                        IWorksheet worksheet = workbook.Worksheets[0];

                        IRange firstrow = worksheet.Rows[0];

                        // get number of columns
                        int cellCount = firstrow.LastColumn;

                        for (int j = 0; j < cellCount; j++)
                        {
                            if (j > 10)
                                break;

                            var cell = firstrow.Cells[j];
                            if ((cell == null || string.IsNullOrWhiteSpace(cell.CalculatedValue)) || cell.CalculatedValue.ToLower() != columnHeaders[j].Trim().ToLower())
                            {
                                errormessages.Add("This Excel file is invalid");
                                haserror = true;
                                error.errormessage = errormessage;
                                return error;
                            }
                        }

                        //await _fileRepository.DeleteAllFileImports();
                        //await _fileRepository.ReseedFileImports();

                        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
                        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
                        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
                        {
                            int firstRow = worksheet.UsedRange.Row;
                            // get the number of records
                            int lastRow = worksheet.UsedRange.LastRow;


                            for (int i = firstRow; i < lastRow; i++) //Read Excel File
                            {
                                IRange row = worksheet.Rows[i];
                                if (row == null) continue;
                                if (row.IsBlank) continue;


                                var site = row.Cells[0]?.CalculatedValue.Trim();

                                var _file = new FileImport();

                                _file.FileName = file.FileInfo.Name;
                                _file.SiteName = site;
                                _file.CoordinatorName = row.Cells[1]?.CalculatedValue.Trim();
                                _file.CoordinatorEmail = row.Cells[2]?.CalculatedValue.Trim();

                                if (!ValidateExtension.IsEmailValid(_file.CoordinatorEmail))
                                {
                                    errormessages.Add("Coordinator Email: " + _file.CoordinatorEmail + " is invalid at Row: " + (i + 1));
                                    haserror = true;
                                }

                                _file.SchoolName = row.Cells[3]?.CalculatedValue.Trim();
                                _file.TeacherName = row.Cells[4]?.CalculatedValue.Trim();
                                _file.TeacherEmail = row.Cells[5]?.CalculatedValue.Trim();

                                if (!ValidateExtension.IsEmailValid(_file.TeacherEmail))
                                {
                                    errormessages.Add("Teacher Email: " + _file.TeacherEmail + " is invalid at Row: " + (i + 1));
                                    haserror = true;
                                }

                                _file.LocalId = row.Cells[6]?.CalculatedValue.Trim();
                                var gender = row.Cells[7]?.CalculatedValue.Trim();
                                // get the lookupset for this year
                                // var tempGenders = _dbContext.LookupSets.Where(p => p.YearId == _UserSettings.YearId && p.LookupName == "ChildGender").Include(c => c.LookupSetOptions).FirstOrDefault();

                                if (string.IsNullOrEmpty(gender))
                                {
                                    //_file.GenderId = null;
                                    //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == _UserSettings.YearId && p.English == "Other").FirstOrDefault().Value;
                                    _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Id;
                                }
                                else
                                {
                                    //_file.GenderId = (gender == "M" ? (int)Genders.Male : (int)Genders.Female);
                                    //_file.GenderId = (gender == "M" ? dbContext.Gen.Where(p => p.Id == ppl.CountryID.Value).FirstOrDefault() : (int)Genders.Female);                                        
                                    // Use the code to ensure the values are consistent year over year


                                    if (gender == "M")
                                    {
                                        _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Male").FirstOrDefault().Id;
                                        //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == _UserSettings.YearId && p.English == "Male").FirstOrDefault().Value;
                                    }
                                    else if (gender == "F")
                                    {
                                        _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Female").FirstOrDefault().Id;
                                        //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == _UserSettings.YearId && p.English == "Female").FirstOrDefault().Value;
                                    }
                                    else
                                    {
                                        _file.GenderId = dbContext.Genders.Where(p => p.YearId == UserSettings.YearId && p.English == "Other").FirstOrDefault().Id;
                                        //_file.GenderId = tempGenders.LookupSetOptions.Where(p => p.YearId == _UserSettings.YearId && p.English == "Other").FirstOrDefault().Value;
                                    }
                                }


                                var dob = row.Cells[8]?.CalculatedValue.Trim();

                                if (string.IsNullOrEmpty(dob))
                                {
                                    _file.ChildDob = null;
                                }
                                else
                                {
                                    // add check for valid date range 1900-01-01 to 2079-06-06
                                    if (DateTime.TryParse(dob, out DateTime newvalue))
                                    {
                                        if (newvalue <= DateTime.Parse("2079-06-06") && newvalue >= DateTime.Parse("1900-01-01"))
                                            _file.ChildDob = newvalue;
                                        else
                                        {
                                            errormessages.Add(dob + " is outside of the acceptable range 1900-01-01 to 2079-06-06 at Row: " + (i + 1));
                                            haserror = true;
                                        }
                                    }
                                    else
                                    {
                                        errormessages.Add("Child Dob: " + dob + " is invalid at Row: " + (i + 1));
                                        haserror = true;
                                    }
                                }

                                _file.ChildPostalCode = row.Cells[9]?.CalculatedValue.Trim();
                                _file.ChildEdiid = row.Cells[10]?.CalculatedValue.Trim();

                                _file.FileImportStatusId = (int)Enumerations.FileImportStatus.Imported;

                                _file.ModifiedDate = DateTime.Now;
                                _file.ModifiedBy = UserSettings.UserName;

                                _file.CreatedDate = DateTime.Now;
                                _file.CreatedBy = UserSettings.UserName;

                                if (!haserror)
                                {
                                    await _fileRepository.AddAsync(_file);

                                    error.message = "file has been imported successfully.";
                                }

                                // set the progress
                                progress = (double)((i / (double)lastRow) * 100);

                                // update the progress bar every 5 records
                                if (lastRow > 100)
                                {
                                    if (i % 5 == 0)
                                        StateHasChanged();
                                }
                                else
                                    StateHasChanged();
                            }
                            }
                        }

                        if (!haserror)
                        {
                            if (File.Exists(fullPath))
                            {
                                File.Delete(fullPath);
                            }

                            FileStream filestream = new FileStream(fullPath, FileMode.Create, FileAccess.Write);
                            file.Stream.WriteTo(filestream);
                            filestream.Close();
                            file.Stream.Close();
                        }

                        // reset progress bar
                        progress = 0;
                        StateHasChanged();
                    }
                }
                else
                {
                    errormessages.Add("The file is empty!.");
                    haserror = true;
                }

                error.messages = messages;
                error.errormessages = errormessages;
                return error;
            }
            catch (Exception ex)
            {
                sharedService.WriteLogs("UploadFileData failed:" + ex.Message, false);

                errormessage = "File imports failed. Please check the log file for more information.";

                errormessages.Add("ProcessFileData failed:" + ex.Message);
                error.message = message;
                error.errormessage = errormessage;
                error.errormessages = errormessages;
                return error;
            }
        }
}
