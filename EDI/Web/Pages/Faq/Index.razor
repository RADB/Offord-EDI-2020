@page "/Faq/index"
@using EDI.Web.Shared.Modals;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Linq.Dynamic.Core
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject IFaqService faqService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;

@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Faqs Management</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                <div class="row"></div>
                <br />
                @if (faqs == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    @if (!UserSettings.IsCoordinator)
                    {
                        <SfGrid ID="GridFaq" @ref="Grid" DataSource="@faqs" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "CsvExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="false"></GridEditSettings>
                            <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="FaqItemViewModel"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                            <GridSortSettings>
                                <GridSortColumns>
                                    <GridSortColumn Field="Question" Direction="SortDirection.Ascending"></GridSortColumn>
                                </GridSortColumns>
                            </GridSortSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(FaqItemViewModel.Question) HeaderText="Question" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FaqItemViewModel.Answer) HeaderText="Answer" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="30"></GridColumn>
                                <GridColumn Field=@nameof(FaqItemViewModel.IsAdministratorFaqFormatted) HeaderText="Admin Faq" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FaqItemViewModel.IsCoordinatorFaqFormatted) HeaderText="Coordinator Faq" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FaqItemViewModel.IsTeacherFaqFormatted) HeaderText="Teacher Faq" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="20"></GridColumn>
                                <GridColumn Field=@nameof(FaqItemViewModel.Sequence) HeaderText="Sequence" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="10"></GridColumn>
                                <GridColumn Field=@nameof(ChildItemViewModel.Ediyear) Type="ColumnType.Number" HeaderText="Year" Width="10"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }
    private List<Faq> allfaqs { get; set; }

    SfGrid<FaqItemViewModel> Grid;

    IEnumerable<FaqItemViewModel> faqs;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            if (UserSettings.IsCoordinator)
            {
                allfaqs = await Task.FromResult(dbContext.Faqs.Where(p => p.IsCoordinatorFaq.HasValue && p.IsCoordinatorFaq.Value && p.YearId == UserSettings.YearId).OrderBy(p => p.Sequence).ToList());
            }
            else if (UserSettings.IsTeacher)
            {
                var predicate = "p => p.IsTeacherFaq.Value && p." + UserSettings.Province + ".Value && p.YearId == " + UserSettings.YearId;
                allfaqs = await Task.FromResult(dbContext.Faqs.Where(predicate).OrderBy(p => p.Sequence).ToList());
                //allfaqs = await Task.FromResult(dbContext.Faqs.Where(p => p.IsTeacherFaq.HasValue && p.IsTeacherFaq.Value).OrderBy(p => p.Sequence).ToList());
            }
            else if (UserSettings.IsAdmin)
            {
                var predicate = "p => p.YearId == " + UserSettings.YearId;
                allfaqs = await Task.FromResult(dbContext.Faqs.Where(predicate).OrderBy(p => p.Sequence).ToList());
            }

            List<FaqItemViewModel> sivm = new List<FaqItemViewModel>();

            foreach (var faq in allfaqs)
            {
                var afaq = new FaqItemViewModel();

                afaq.Id = faq.Id;
                afaq.Question = faq.Question;
                afaq.Answer = faq.Answer;
                afaq.IsAdministratorFaq = faq.IsAdministratorFaq;
                afaq.IsAdministratorFaqFormatted = faq.IsAdministratorFaq.HasValue && faq.IsAdministratorFaq.Value ? "Yes" : "No";
                afaq.IsCoordinatorFaq = faq.IsCoordinatorFaq;
                afaq.IsCoordinatorFaqFormatted = faq.IsCoordinatorFaq.HasValue && faq.IsCoordinatorFaq.Value ? "Yes" : "No";
                afaq.IsTeacherFaq = faq.IsTeacherFaq;
                afaq.IsTeacherFaqFormatted = faq.IsTeacherFaq.HasValue && faq.IsTeacherFaq.Value ? "Yes" : "No";
                afaq.Sequence = faq.Sequence;
                afaq.YearId = faq.YearId;

                var year = dbContext.Years.Where(p => p.Id == faq.YearId).FirstOrDefault();
                afaq.Ediyear = year != null ? year.Ediyear : null;

                sivm.Add(afaq);
            }

            this.rowid = 0;

            faqs = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<FaqItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    public async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridFaq_pdfexport")
        {
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Id == "GridFaq_excelexport")
        {
            await this.Grid.ExportToExcelAsync();
        }
        if (args.Item.Id == "GridFaq_csvexport")
        {
            await this.Grid.ExportToCsvAsync();
        }
        if (args.Item.Id == "GridFaq_add")
        {
            NavigationManager.NavigateTo("./faq/new/index");
            //NewInvoice();
        }
        if (args.Item.Id == "GridFaq_edit")
        {
            NavigationManager.NavigateTo("./faq/edit/" + this.rowid + "/index");
        }
        if (args.Item.Id == "GridFaq_delete")
        {
            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete");
            var result = await modal.Result;

            ConfirmDeleteModalClosed(result);
        }
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await faqService.DeleteFaqAsync(this.rowid);

            var tmp = new List<FaqItemViewModel>();
            foreach (var item in faqs)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.faqs = tmp;
            this.rowid = 0;

            //this.Grid.Refresh();
            StateHasChanged();
        }

        //*Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<FaqItemViewModel> args)
    {
        NavigationManager.NavigateTo("./faq/edit/" + this.rowid + "/index");
    }
}
