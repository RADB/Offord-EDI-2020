@page "/faq"
@page "/faq/edit/{Id:int}/{Sender}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject IFaqService faqService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@inject ServiceContext dbContext;
@inject UserSettings UserSettings;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Faq</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Add</button>
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <br />
            <div class="col-md-10" style="margin-left: 24px;">
                @if (FaqModel.Id > 0)
                {
                    <SfAccordion>
                        <AccordionItems>
                            <AccordionItem Header="Details" Expanded="true">
                                <ContentTemplate>
                                    <FaqForm @ref="faqform1" FaqModel="@FaqModel" HandleValidSubmit="HandleValidSubmit" />
                                </ContentTemplate>
                            </AccordionItem>
                        </AccordionItems>
                    </SfAccordion>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Sender { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private FaqItemViewModel FaqModel { get; set; } = new FaqItemViewModel();

    FaqForm faqform1 = new FaqForm();

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (UserSettings.IsCoordinator)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            FaqModel = await faqService.GetFaqItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        //Console.WriteLine("OnValidSubmit");
        var totalItems = await faqService.GetDuplicateCount(FaqModel.Question, faqform1.FaqModel.Id, UserSettings.YearId);

        if (totalItems > 0)
        {
            ErrorMessage = "The same Faq has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            FaqModel.YearId = faqform1.provinces.ProvinceConfigModel.YearID;
            if (FaqModel.YearId == 0)
            {
                ErrorMessage = "Year is required.";
                toastService.ShowError(ErrorMessage);
                return;
            }

            faqform1.FaqModel.Answer = faqform1.rte.BindValue;
            FaqModel.Alberta = faqform1.provinces.ProvinceConfigModel.Alberta;
            FaqModel.BritishColumbia = faqform1.provinces.ProvinceConfigModel.BritishColumbia;
            FaqModel.FirstNations = faqform1.provinces.ProvinceConfigModel.FirstNations;
            FaqModel.Manitoba = faqform1.provinces.ProvinceConfigModel.Manitoba;
            FaqModel.NewBrunswick = faqform1.provinces.ProvinceConfigModel.NewBrunswick;
            FaqModel.NewfoundlandandLabrador = faqform1.provinces.ProvinceConfigModel.NewfoundlandandLabrador;
            FaqModel.NovaScotia = faqform1.provinces.ProvinceConfigModel.NovaScotia;
            FaqModel.Nunavut = faqform1.provinces.ProvinceConfigModel.Nunavut;
            FaqModel.Ontario = faqform1.provinces.ProvinceConfigModel.Ontario;
            FaqModel.PrinceEdwardIsland = faqform1.provinces.ProvinceConfigModel.PrinceEdwardIsland;
            FaqModel.Quebec = faqform1.provinces.ProvinceConfigModel.Quebec;
            FaqModel.Saskatchewan = faqform1.provinces.ProvinceConfigModel.Saskatchewan;
            FaqModel.YukonTerritory = faqform1.provinces.ProvinceConfigModel.YukonTerritory;
            FaqModel.NorthwestTerritories = faqform1.provinces.ProvinceConfigModel.NorthwestTerritories;
            FaqModel.NewYork = faqform1.provinces.ProvinceConfigModel.NewYork;
            await faqService.UpdateFaqAsync(faqform1.FaqModel);

            Message = "Faq updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        if (Sender == "admin")
            NavigationManager.NavigateTo("./faq/admin");
        else
            NavigationManager.NavigateTo("./faq/index");
    }

    private async void Reset()
    {
        FaqModel = await faqService.GetFaqItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./faq/new/" + Sender);
    }
}