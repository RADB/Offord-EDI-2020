@page "/Questionnaires/New"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject IQuestionnaireService QuestionnaireService

@inject NavigationManager NavigationManager
@inject UserSettings UserSettings;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}

<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>New Questionnaire</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <QuestionnaireForm @ref="questionnaireform1" QuestionnaireModel="@QuestionnaireModel" HandleValidSubmit="HandleValidSubmit" />
        </div>

    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private QuestionnaireItemViewModel QuestionnaireModel { get; set; } = new QuestionnaireItemViewModel();

    QuestionnaireForm questionnaireform1 = new QuestionnaireForm();

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }

        QuestionnaireModel.QuestionnaireName = string.Empty;
        QuestionnaireModel.English = string.Empty;

    }

    private async void HandleValidSubmit()
    {
        QuestionnaireModel.QuestionnaireName = questionnaireform1.textName.TextModel.Value;

        if (string.IsNullOrEmpty(QuestionnaireModel.QuestionnaireName))
        {
            ErrorMessage = "Questionnaire Name is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        QuestionnaireModel.English = questionnaireform1.rteEnglish.BindValue;

        if (string.IsNullOrEmpty(QuestionnaireModel.English))
        {
            ErrorMessage = "Questionnaire English is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        QuestionnaireModel.YearId = questionnaireform1.provinces.ProvinceConfigModel.YearID;
        if (QuestionnaireModel.YearId == 0)
        {
            ErrorMessage = "Year is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        var totalItems = await QuestionnaireService.GetDuplicateCount(QuestionnaireModel.QuestionnaireName);

        if (totalItems > 0)
        {
            ErrorMessage = "The same Questionnaire has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {

            QuestionnaireModel.French = questionnaireform1.rteFrench.BindValue;
            QuestionnaireModel.DescriptionEnglish = questionnaireform1.rteDescriptionEnglish.BindValue;
            QuestionnaireModel.DescriptionFrench = questionnaireform1.rteDescriptionFrench.BindValue;
            QuestionnaireModel.ShowProgressBar = questionnaireform1.checkProgressBar.CheckModel.Value;
            QuestionnaireModel.ShowQuestionNumbers = questionnaireform1.checkQuestionNumer.CheckModel.Value;
            QuestionnaireModel.Alberta = questionnaireform1.provinces.ProvinceConfigModel.Alberta;
            QuestionnaireModel.BritishColumbia = questionnaireform1.provinces.ProvinceConfigModel.BritishColumbia;
            QuestionnaireModel.Manitoba = questionnaireform1.provinces.ProvinceConfigModel.Manitoba;
            QuestionnaireModel.NewBrunswick = questionnaireform1.provinces.ProvinceConfigModel.NewBrunswick;
            QuestionnaireModel.NewfoundlandandLabrador = questionnaireform1.provinces.ProvinceConfigModel.NewfoundlandandLabrador;
            QuestionnaireModel.NovaScotia = questionnaireform1.provinces.ProvinceConfigModel.NovaScotia;
            QuestionnaireModel.Nunavut = questionnaireform1.provinces.ProvinceConfigModel.Nunavut;
            QuestionnaireModel.Ontario = questionnaireform1.provinces.ProvinceConfigModel.Ontario;
            QuestionnaireModel.PrinceEdwardIsland = questionnaireform1.provinces.ProvinceConfigModel.PrinceEdwardIsland;
            QuestionnaireModel.Quebec = questionnaireform1.provinces.ProvinceConfigModel.Quebec;
            QuestionnaireModel.Saskatchewan = questionnaireform1.provinces.ProvinceConfigModel.Saskatchewan;
            QuestionnaireModel.YukonTerritory = questionnaireform1.provinces.ProvinceConfigModel.YukonTerritory;
            QuestionnaireModel.NorthwestTerritories = questionnaireform1.provinces.ProvinceConfigModel.NorthwestTerritories;

            int id = await QuestionnaireService.CreateQuestionnaireAsync(questionnaireform1.QuestionnaireModel);

            Message = "New Questionnaire added successfully.";
            toastService.ShowSuccess(Message);
            NavigationManager.NavigateTo("./Questionnaires/edit/" + id);
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./Questionnaires/index");
    }

    private async void Reset()
    {
        QuestionnaireModel = new QuestionnaireItemViewModel();
        StateHasChanged();
    }
}
