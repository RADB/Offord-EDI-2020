@page "/Questionnaires/index"
@using EDI.Web.Shared.Modals;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Linq.Dynamic.Core
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService toastService;
@inject IQuestionnaireService questionnaireService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject ServiceContext dbContext;
@inject AppIdentityDbContext identityContext;

@inject UserSettings UserSettings;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>@Header</strong>
                <div class="pull-right">

                </div>
            </div>
            <div class="card-body">
                @if (questionnaires == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid ID="GridQuestionnaire" @ref="Grid" DataSource="@questionnaires" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "ExcelExport", "CsvExport", "Search" })" AllowExcelExport="true" AllowPdfExport="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="@AllowEdit" AllowDeleting="@AllowDelete" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" RowSelected="RowSelect" OnRecordDoubleClick="RecordDoubleClickHandler" TValue="QuestionnaireItemViewModel"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="QuestionnaireName" Direction="SortDirection.Ascending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.QuestionnaireName) HeaderText="Name" TextAlign="TextAlign.Right" Width="20" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Alberta) HeaderText="AB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.BritishColumbia) HeaderText="BC" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.FirstNations) HeaderText="FN" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Manitoba) HeaderText="MB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.NewBrunswick) HeaderText="NB" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.NewfoundlandandLabrador) HeaderText="NL" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.NewYork) HeaderText="NY" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.NovaScotia) HeaderText="NS" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Nunavut) HeaderText="NU" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.NorthwestTerritories) HeaderText="NT" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Ontario) HeaderText="ON" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.PrinceEdwardIsland) HeaderText="PE" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Quebec) HeaderText="QC" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.Saskatchewan) HeaderText="SK" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>
                            <GridColumn Field=@nameof(QuestionnaireItemViewModel.YukonTerritory) HeaderText="YT" TextAlign="TextAlign.Right" IsPrimaryKey="false" DisplayAsCheckBox="true" Type="ColumnType.Boolean" Width="15" AutoFit="true"></GridColumn>

                        </GridColumns>
                    </SfGrid>
                }

            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int SiteID { get; set; } = 0;
    [Parameter]
    public string Header { get; set; } = "Questionnaire";
    [Parameter]
    public bool AllowDelete { get; set; } = true;
    [Parameter]
    public bool AllowEdit { get; set; } = true;

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    SfGrid<QuestionnaireItemViewModel> Grid;

    IEnumerable<QuestionnaireItemViewModel> questionnaires;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            var predicate = "p => p.YearId == " + UserSettings.YearId;
            var allquestionnaires = await Task.FromResult(dbContext.Questionnaires.Where(predicate).OrderBy(p => p.QuestionnaireName).ToList());

            List<QuestionnaireItemViewModel> sivm = new List<QuestionnaireItemViewModel>();

            foreach (var questionnaire in allquestionnaires)
            {
                var aquestionnaire = new QuestionnaireItemViewModel();

                aquestionnaire.Id = questionnaire.Id;
                aquestionnaire.QuestionnaireName = questionnaire.QuestionnaireName;
                aquestionnaire.English = questionnaire.English;
                aquestionnaire.French = questionnaire.French;
                aquestionnaire.DescriptionEnglish = questionnaire.DescriptionEnglish;
                aquestionnaire.DescriptionFrench = questionnaire.DescriptionFrench;
                aquestionnaire.ShowProgressBar = questionnaire.ShowProgressBar;
                aquestionnaire.ShowQuestionNumbers = questionnaire.ShowQuestionNumbers;
                aquestionnaire.Alberta = questionnaire.Alberta.HasValue ? questionnaire.Alberta.Value : false;
                aquestionnaire.BritishColumbia = questionnaire.BritishColumbia.HasValue ? questionnaire.BritishColumbia.Value : false;
                aquestionnaire.FirstNations = questionnaire.FirstNations.HasValue ? questionnaire.FirstNations.Value : false;
                aquestionnaire.Manitoba = questionnaire.Manitoba.HasValue ? questionnaire.Manitoba.Value : false;
                aquestionnaire.NewBrunswick = questionnaire.NewBrunswick.HasValue ? questionnaire.NewBrunswick.Value : false;
                aquestionnaire.NewfoundlandandLabrador = questionnaire.NewfoundlandandLabrador.HasValue ? questionnaire.NewfoundlandandLabrador.Value : false;
                aquestionnaire.NovaScotia = questionnaire.NovaScotia.HasValue ? questionnaire.NovaScotia.Value : false;
                aquestionnaire.Nunavut = questionnaire.Nunavut.HasValue ? questionnaire.Nunavut.Value : false;
                aquestionnaire.Ontario = questionnaire.Ontario.HasValue ? questionnaire.Ontario.Value : false;
                aquestionnaire.PrinceEdwardIsland = questionnaire.PrinceEdwardIsland.HasValue ? questionnaire.PrinceEdwardIsland.Value : false;
                aquestionnaire.Quebec = questionnaire.Quebec.HasValue ? questionnaire.Quebec.Value : false;
                aquestionnaire.Saskatchewan = questionnaire.Saskatchewan.HasValue ? questionnaire.Saskatchewan.Value : false;
                aquestionnaire.YukonTerritory = questionnaire.YukonTerritory.HasValue ? questionnaire.YukonTerritory.Value : false;
                aquestionnaire.NorthwestTerritories = questionnaire.NorthwestTerritories.HasValue ? questionnaire.NorthwestTerritories.Value : false;
                aquestionnaire.NewYork = questionnaire.NewYork.HasValue ? questionnaire.NewYork.Value : false;

                aquestionnaire.YearId = questionnaire.YearId;
                var year = dbContext.Years.Where(p => p.Id == questionnaire.YearId).FirstOrDefault();
                if (year != null && year.Ediyear.HasValue)
                    aquestionnaire.Ediyear = year.Ediyear.Value;

                sivm.Add(aquestionnaire);
            }

            this.rowid = 0;
            questionnaires = sivm;
        }
    }

    private int rowid { get; set; }

    private void RowSelect(RowSelectEventArgs<QuestionnaireItemViewModel> args)
    {
        rowid = args.Data.Id;
    }

    public async void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridQuestionnaire_pdfexport")
        {
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Id == "GridQuestionnaire_excelexport")
        {
            await this.Grid.ExportToExcelAsync();
        }
        if (args.Item.Id == "GridQuestionnaire_csvexport")
        {
            await this.Grid.ExportToCsvAsync();
        }
        if (args.Item.Id == "GridQuestionnaire_add")
        {
            NavigationManager.NavigateTo("./questionnaires/new");
        }
        if (args.Item.Id == "GridQuestionnaire_edit")
        {
            NavigationManager.NavigateTo("./questionnaires/edit/" + this.rowid);
        }
        if (args.Item.Id == "GridQuestionnaire_delete")
        {
            var modal = ModalService.Show<ConfirmDelete>("Confirm Delete");
            var result = await modal.Result;
            ConfirmDeleteModalClosed(result);
        }
    }

    async void ConfirmDeleteModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await questionnaireService.DeleteQuestionnaireAsync(this.rowid);

            var tmp = new List<QuestionnaireItemViewModel>();
            foreach (var item in questionnaires)
            {
                if (item.Id != rowid)
                    tmp.Add(item);
            }
            this.questionnaires = tmp;
            this.rowid = 0;

            //this.Grid.Refresh();
            StateHasChanged();
        }

        //*Modal.OnClose -= ConfirmDeleteModalClosed;
    }

    private void RecordDoubleClickHandler(RecordDoubleClickEventArgs<QuestionnaireItemViewModel> args)
    {
        NavigationManager.NavigateTo("./questionnaires/edit/" + this.rowid);
    }
}
