
@page "/Reports/index"
@page "/Reports/index/{ReportId:int}"
@using System.Linq.Dynamic.Core
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using System.Data;
@using Microsoft.Data.SqlClient
@using EDI.Web.Extensions
@using EDI.Web.Data
@using System.Dynamic
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Inputs
@inject ServiceContext dbContext
@inject UserSettings UserSettings
@inject ISharedService sharedService
@inject NavigationManager NavigationManager
@inject IToastService toastService;

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Reports</strong>
                <div class="pull-right">
                    <select class="col-md-6" value="@ReportId" @onchange="@(e =>ReportChange(e))">
                        @if (ReportList != null)
                        {
                            @foreach (var option in ReportList)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="card-body">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Options" Expanded="true">
                            <ContentTemplate>
                                @if (reportParams != null && reportParams.Count() > 0)
                                {
                                    foreach (var param in reportParams)
                                    {
                                        <div>
                                            <label for="@param.ParameterName.Substring(1)">@param.ParameterName.Substring(1):</label>
                                            @if (param.ParameterDataType == "int")
                                            {
                                                <SfNumericTextBox ID="@param.ParameterName.Substring(1)" TValue="int" @bind-value="param.ParameterIntValue" Min=0 Max=9999 Step=1 Format="n0" Width="150px"></SfNumericTextBox>
                                            }
                                            else if (param.ParameterDataType == "string")
                                            {
                                                <input id="@param.ParameterName.Substring(1)" type="text" @bind-value="param.ParameterStringValue" class="col-md-4 form-control" width="50px" />
                                            }
                                        </div>
                                    }
                                }
                                <br />
                                <br />
                                <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Report" @onclick="ShowReport"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Show</button>
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
                <!--<SfGrid ID="GridReport" @ref="Grid" DataSource="@ReportData" GridLines="GridLine.Both" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() {"ExcelExport", "Search" })" AllowExcelExport="true" AllowPdfExport="false">-->
                <!--<GridEvents OnToolbarClick="ExcelExport" TValue="ExpandoObject"></GridEvents>
        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>-->
                <!--<GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowDeleteConfirmDialog="false"></GridEditSettings>-->
                <!-- Report Parameters -->
                <SfGrid DataSource="@reportParams">
                </SfGrid>

                <!-- Report Data -->
                <SfGrid DataSource="@ReportData">
                </SfGrid>
            </div>

        </div>
    </div>
</div>


@code {
    [Parameter]
    public int? ReportId { get; set; }
    private List<ExpandoObject> ReportData;
    //private List<string> _columnHeaders;
    private SfGrid<ExpandoObject> Grid;
    private string SchemaName = "[Reports]";
    private int Counter;

    //public IEnumerable<SelectListItem> ReportList { get; set; }
    public IList<SelectListItem> ReportList { get; set; }

    //public string reportid { get; set; }
    List<Reports> reportParams { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // get the list of reports
        ReportList = await GetReports();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ReportId >= 0)
        {
            GetReportParamaters();
        }
        else
        {
            ReportId = null;
        }
    }

    public async Task<IList<SelectListItem>> GetReports()
    {
        try
        {
            var items = new List<SelectListItem>
        {
                new SelectListItem() { Value = null, Text = "Choose One..."}

            };

            SqlConnection conn = new SqlConnection(ConnectionStrings.ServiceConnection());
            conn.Open();
            {
                // create the command object
                SqlCommand sqlComm = new SqlCommand("[dbo].[GetReports]", conn);

                sqlComm.CommandType = CommandType.StoredProcedure;

                SqlDataReader reader = sqlComm.ExecuteReader();
                Counter = 1;

                while (reader.Read())
                {
                    for (var Column = 0; Column < reader.FieldCount; Column++)
                    {
                        items.Add(new SelectListItem() { Value = Counter.ToString(), Text = reader[Column].ToString() });
                    }
                    Counter++;
                }

                reader.Close();
                conn.Close();
            }
            return items;
        }
        catch (Exception ex)
        {
            toastService.ShowError(string.Format("{0}", "No Reports Found"));
            var items = new List<SelectListItem>();
            return items;
        }
    }

    private async Task ReportChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value.ToString() == "Choose One...")
        {
            NavigationManager.NavigateTo("./Reports/index");
            StateHasChanged();
        }
        else
        {
            if (e.Value.ToString() != ReportId.ToString())
            {
                NavigationManager.NavigateTo("./Reports/index/" + e.Value);
                StateHasChanged();
            }
        }
    }

    public async Task GetReportParamaters()
    {
        reportParams = new List<Reports>();
        SqlConnection conn = new SqlConnection(ConnectionStrings.ServiceConnection());
        conn.Open();
        {
            // create the command object -
            DataTable dt = new DataTable();
            SqlCommand sqlComm = new SqlCommand("dbo.GetReportParameters", conn);

            // Add Parameters
            sqlComm.Parameters.AddWithValue("@ReportName", ReportList[int.Parse(ReportId.ToString())].Text);

            sqlComm.CommandType = CommandType.StoredProcedure;

            sqlComm.ExecuteNonQuery();

            SqlDataAdapter da = new SqlDataAdapter(sqlComm);
            da.Fill(dt);
            foreach (DataRow dr in dt.Rows)
            {
                Reports report = new Reports();
                report.ParameterName = Convert.ToString(dr[2]);
                report.ParameterDataType = Convert.ToString(dr[3]);
                report.Schema = Convert.ToString(dr[0]);
                report.ObjectName = Convert.ToString(dr[1]);
                report.ParameterIntValue = 0;
                report.ParameterStringValue = string.Empty;
                reportParams.Add(report);
            }
           
            conn.Close();
            StateHasChanged();
        }

    }

    private void ShowReport()
    {
        ReportData = new List<ExpandoObject>();

        SqlConnection conn = new SqlConnection(ConnectionStrings.ServiceConnection());
        conn.Open();
        {
            // create the command object
            SqlCommand sqlComm = new SqlCommand($"{SchemaName}.[{ReportList[int.Parse(ReportId.ToString())].Text}]", conn);

            foreach (var param in reportParams)
            {
                // Add Parameters
                sqlComm.Parameters.AddWithValue(param.ParameterName, param.ParameterDataType == "int" ? param.ParameterIntValue : param.ParameterStringValue);
            }

            sqlComm.CommandType = CommandType.StoredProcedure;

            SqlDataReader reader = sqlComm.ExecuteReader();

            while (reader.Read())
            {
                var obj = SqlDataReaderToExpando(reader);
                ReportData.Add(obj);
            }

            reader.Close();
            conn.Close();
        }        
        StateHasChanged();
    }

    private dynamic SqlDataReaderToExpando(SqlDataReader reader)
    {
        var expandoObject = new ExpandoObject() as IDictionary<string, object>;

        for (var i = 0; i < reader.FieldCount; i++)
            expandoObject.Add(reader.GetName(i), reader[i]);

        return expandoObject;
    }

    // you can run this without args as well -- public async Task ExcelExport()
    public async Task ExcelExport(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridReport_excelexport")
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "new.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }

}
