
@page "/Reports/Index"
@page "/Reports/Index/{ReportId:int}"

@using Microsoft.Data.SqlClient
@using Microsoft.Extensions.Configuration
@using EDI.Web.Data
@using EDI.ApplicationCore.Extensions
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using System.Data;
@using System.Dynamic
@using System.Linq.Dynamic.Core

@inject IConfiguration Configuration
@inject ServiceContext dbContext
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Reports</strong>
                <div class="pull-right">
                    <select class="col-md-6" value="@ReportId" @onchange="@(e =>ReportChange(e))">
                        @if (ReportList != null)
                        {
                            @foreach (var option in ReportList)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="card-body">
                <!-- Report Parameters -->
                <h2>Report Parameters</h2>
                <SfGrid DataSource="@Report.Parameters">
                </SfGrid>
                <br />
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Parameters" Expanded="true">
                            <ContentTemplate>
                                @if (Report.Parameters != null && Report.Parameters.Count() > 0)
                                {
                                    foreach (var param in Report.Parameters)
                                    {
                                        <div>
                                            <label for="@param.Name.Substring(1)">@param.Name.Substring(1):</label>
                                            @if (param.DataType == "int")
                                            {
                                                <SfNumericTextBox ID="@param.Name.Substring(1)" TValue="int" @bind-value="param.IntValue" Min=0 Max=99999 Step=1 Format="n0" Width="150px"></SfNumericTextBox>
                                            }
                                            else if (param.DataType == "nvarchar" || param.DataType == "nchar")
                                            {
                                                <SfTextBox ID="@param.Name.Substring(1)" @bind-value="param.StringValue" Width="150px"> </SfTextBox>
                                            }
                                            else if (param.DataType == "datetime" || param.DataType == "smalldatetime")
                                            {
                                                <SfCalendar ID="@param.Name.Substring(1)" TValue="DateTime" @bind-value="param.DateValue"></SfCalendar>
                                            }
                                            else
                                            {
                                                <div>@($"Add a control for the datatype: {param.DataType} ")</div>
                                            }
                                        </div>
                                    }
                                }
                                <br />
                                <br />
                                @if (ReportId > 0)
                                {
                                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Report" @onclick="ShowReport"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Show Report Data</button>
                                }
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>

                <br />
                <h2>@ReportName</h2>
                <SfGrid ID="GridReport" @ref="Grid" Columns="@GridColumns" DataSource="@ReportData" GridLines="GridLine.Both" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="false" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() {"ExcelExport", "Search" })" AllowExcelExport="true" AllowPdfExport="false">
                    <GridEvents OnToolbarClick="ExcelExport" TValue="ExpandoObject"></GridEvents>
                    <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false"></GridEditSettings>
                </SfGrid>
            </div>

        </div>
    </div>
</div>


@code {
    [Parameter]
    public int? ReportId { get; set; }

    private Report Report = new Report();
    private List<ExpandoObject> ReportData = new List<ExpandoObject>();
    public List<GridColumn> GridColumns = new List<GridColumn>();

    private SfGrid<ExpandoObject> Grid;

    private string SchemaName = "Reports";
    private string ReportName = string.Empty;
    private int Counter;

    public IList<SelectListItem> ReportList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the list of reports
        ReportList = await GetReports();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ReportId >= 0)
        {
            ReportName = ReportList[int.Parse(ReportId.ToString())].Text;

            await GetReportParamaters();
        }
        else
        {
            ReportId = null;
        }
    }

    public async Task<IList<SelectListItem>> GetReports()
    {
        var items = new List<SelectListItem>
{
            new SelectListItem() { Value = null, Text = "Choose One..."}
        };
        try
        {
            SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
            conn.Open();
            {
                // create the command object
                SqlCommand sqlComm = new SqlCommand("[dbo].[GetReports]", conn);

                sqlComm.CommandType = CommandType.StoredProcedure;

                SqlDataReader reader = sqlComm.ExecuteReader();
                Counter = 1;

                while (reader.Read())
                {
                    for (var Column = 0; Column < reader.FieldCount; Column++)
                    {
                        items.Add(new SelectListItem() { Value = Counter.ToString(), Text = reader[Column].ToString() });
                    }

                    Counter++;
                }

                reader.Close();
                conn.Close();
            }

            return items;
        }
        catch (Exception ex)
        {
            return items;
        }
    }


    private async Task ReportChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value.ToString() == "Choose One...")
        {
            NavigationManager.NavigateTo("./Reports/Index");
            StateHasChanged();
        }
        else
        {
            if (e.Value.ToString() != ReportId.ToString())
            {
                // set to true if you want to clear the results grid until they click the button
                NavigationManager.NavigateTo("./Reports/Index/" + e.Value, true);
                StateHasChanged();
            }
        }
    }

    public async Task GetReportParamaters()
    {
        SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
        conn.Open();
        {
            // create the command object -
            DataTable dt = new DataTable();
            SqlCommand sqlComm = new SqlCommand("dbo.GetReportParameters", conn);

            // Add Parameters
            sqlComm.Parameters.AddWithValue("@ReportName", ReportName);
            sqlComm.Parameters.AddWithValue("@SchemaName", SchemaName);

            sqlComm.CommandType = CommandType.StoredProcedure;

            sqlComm.ExecuteNonQuery();

            Report.Schema = SchemaName;
            Report.ObjectName = ReportName;

            SqlDataAdapter da = new SqlDataAdapter(sqlComm);
            da.Fill(dt);
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0].ToString() != string.Empty)
                {
                    var p = new Parameter();
                    p.Name = Convert.ToString(dr[0]);
                    p.DataType = Convert.ToString(dr[1]);
                    p.IntValue = 0;
                    p.StringValue = string.Empty;
                    p.DateValue = DateTime.Now;

                    Report.Parameters.Add(p);
                }
            }

            conn.Close();
            StateHasChanged();
        }
    }

    private async Task ShowReport()
    {
        ReportData = new List<ExpandoObject>();
        //Configuration.GetConnectionString("ServiceConnection")
        SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
        conn.Open();
        {
            // create the command object
            SqlCommand sqlComm = new SqlCommand($"{SchemaName}.[{ReportName}]", conn);

            foreach (var param in Report.Parameters)
            {
                // Add Parameters
                sqlComm.Parameters.AddWithValue(param.Name, param.DataType == "int" ? param.IntValue : (param.DataType == "nchar" || param.DataType == "nvarchar" ? param.StringValue : param.DateValue));
            }

            sqlComm.CommandType = CommandType.StoredProcedure;

            SqlDataReader reader = sqlComm.ExecuteReader();

            // clearing the existing columns
            var columns = new List<GridColumn>();
            GridColumns = columns;

            // load the ReportData object with data for the grid
            while (reader.Read())
            {
                var obj = SqlDataReaderToExpando(reader);
                ReportData.Add(obj);
            }

            reader.Close();
            conn.Close();
        }

        if (ReportData.Count > 0)
        {
            //await GetColumns();

            // refresh the grid
            //Grid.Refresh();

            // render the UI changes
            StateHasChanged();
        }
    }

    private dynamic SqlDataReaderToExpando(SqlDataReader reader)
    {
        var expandoObject = new ExpandoObject() as IDictionary<string, object>;
        bool generateColumns;

        // set variable for generating columns
        generateColumns = GridColumns.Count == 0 ? true : false;


        for (var i = 0; i < reader.FieldCount; i++)
        {
            string fieldName = reader.GetName(i);
            expandoObject.Add(fieldName, reader[i]);
            if (generateColumns)
            {
                GridColumns.Add(GetGridColumn(fieldName));
            }
        }

        return expandoObject;
    }

    private static GridColumn GetGridColumn(string fieldName)
    {
        var column = new Syncfusion.Blazor.Grids.GridColumn
        {
            HeaderText = fieldName,
            Field = fieldName,
            IsPrimaryKey = false,
            Visible = true
            //Format = field.Format ?? "",
            //Width = field.Width,
        };
        return column;
    }

    // you can run this without args as well -- public async Task ExcelExport()
    public async Task ExcelExport(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridReport_excelexport")
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = $"{DateTime.Now.ToString("yyyyMMdd_HHmmss")}_ReportData.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }

}
