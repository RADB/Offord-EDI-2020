
@page "/Reports/Index"
@page "/Reports/Index/{ReportId:int}"

@using Microsoft.Data.SqlClient
@using Microsoft.Extensions.Configuration
@using EDI.ApplicationCore.Extensions
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using System.Data;
@using System.Dynamic
@using System.Linq.Dynamic.Core
@using Syncfusion.XlsIO;
@using System.Collections.Generic;
@using System.IO;
@using Syncfusion.Drawing;

@inject Microsoft.JSInterop.IJSRuntime JS
@inject IConfiguration Configuration
@inject Microsoft.Extensions.Hosting.IHostEnvironment _hostingEnvironment;
@inject ServiceContext dbContext
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Reports</strong>
                <div class="pull-right">
                    <select class="col-md-6" value="@ReportId" @onchange="@(e =>ReportChange(e))">
                        @if (ReportList != null)
                        {
                            @foreach (var option in ReportList)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="card-body">
                <!-- Report Parameters -->
                <h2>Report Parameters</h2>
                <SfGrid DataSource="@Report.Parameters">
                </SfGrid>
                <br />
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Parameters" Expanded="true">
                            <ContentTemplate>
                                @if (Report.Parameters != null && Report.Parameters.Count() > 0)
                                {
                                    foreach (var param in Report.Parameters)
                                    {
                                        <div>
                                            <label for="@param.Name.Substring(1)">@param.Name.Substring(1):</label>
                                            @if (param.DataType == "int")
                                            {
                                                <SfNumericTextBox ID="@param.Name.Substring(1)" TValue="int" @bind-value="param.IntValue" Min=0 Max=99999 Step=1 Format="n0" Width="150px"></SfNumericTextBox>
                                            }
                                            else if (param.DataType == "nvarchar" || param.DataType == "nchar")
                                            {
                                                <SfTextBox ID="@param.Name.Substring(1)" @bind-value="param.StringValue" Width="150px"> </SfTextBox>
                                            }
                                            else if (param.DataType == "datetime" || param.DataType == "smalldatetime")
                                            {
                                                <SfCalendar ID="@param.Name.Substring(1)" TValue="DateTime" @bind-value="param.DateValue"></SfCalendar>
                                            }
                                            else
                                            {
                                                <div>@($"Add a control for the datatype: {param.DataType} ")</div>
                                            }
                                        </div>
                                    }
                                }
                                <br />
                                <br />
                                @if (ReportId > 0)
                                {
                                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Report" @onclick="ShowReport"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Show Report Data</button>
                                }
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>

                <br />
                <h2>@ReportName</h2>
                <div>
                    @StatusMessage  <a href="@filePath">@filePath</a>
                    <br />
                </div>
                <SfGrid ID="GridReport" @ref="Grid" Columns="@GridColumns" DataSource="@GridReportData" GridLines="GridLine.Both" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="false" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() {"ExcelExport", "Search" })" AllowExcelExport="true" AllowPdfExport="false">
                    <GridEvents OnToolbarClick="ExcelExport" TValue="ExpandoObject"></GridEvents>
                    <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                    <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false"></GridEditSettings>
                </SfGrid>
            </div>

        </div>
    </div>
</div>


@code {
    [Parameter]
    public int? ReportId { get; set; }

    private Report Report = new Report();
    private List<ExpandoObject> ReportData = new List<ExpandoObject>();
    private List<ExpandoObject> GridReportData = new List<ExpandoObject>();
    public List<GridColumn> GridColumns = new List<GridColumn>();

    private SfGrid<ExpandoObject> Grid;

    private string SchemaName = "Reports";
    private string ReportName = string.Empty;
    private string StatusMessage = string.Empty;
    private string filePath = string.Empty;
    private int Counter;
    private int fieldCount;

    public IList<SelectListItem> ReportList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the list of reports
        ReportList = await GetReports();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ReportId >= 0)
        {
            ReportName = ReportList[int.Parse(ReportId.ToString())].Text;

            await GetReportParamaters();
        }
        else
        {
            ReportId = null;
        }
    }

    public async Task<IList<SelectListItem>> GetReports()
    {
        var items = new List<SelectListItem>
{
            new SelectListItem() { Value = null, Text = "Choose One..."}
        };
        try
        {
            SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
            conn.Open();
            {
                // create the command object
                SqlCommand sqlComm = new SqlCommand("[dbo].[GetReports]", conn);

                sqlComm.CommandType = CommandType.StoredProcedure;

                SqlDataReader reader = sqlComm.ExecuteReader();
                Counter = 1;

                while (reader.Read())
                {
                    for (var Column = 0; Column < reader.FieldCount; Column++)
                    {
                        items.Add(new SelectListItem() { Value = Counter.ToString(), Text = reader[Column].ToString() });
                    }

                    Counter++;
                }

                reader.Close();
                conn.Close();
            }

            return items;
        }
        catch (Exception ex)
        {
            return items;
        }
    }


    private async Task ReportChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value.ToString() == "Choose One...")
        {
            NavigationManager.NavigateTo("./Reports/Index");
            StateHasChanged();
        }
        else
        {
            if (e.Value.ToString() != ReportId.ToString())
            {
                // set to true if you want to clear the results grid until they click the button
                NavigationManager.NavigateTo("./Reports/Index/" + e.Value, true);
                StateHasChanged();
            }
        }
    }

    public async Task GetReportParamaters()
    {
        SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
        conn.Open();
        {
            // create the command object -
            DataTable dt = new DataTable();
            SqlCommand sqlComm = new SqlCommand("dbo.GetReportParameters", conn);

            // Add Parameters
            sqlComm.Parameters.AddWithValue("@ReportName", ReportName);
            sqlComm.Parameters.AddWithValue("@SchemaName", SchemaName);

            sqlComm.CommandType = CommandType.StoredProcedure;

            sqlComm.ExecuteNonQuery();

            Report.Schema = SchemaName;
            Report.ObjectName = ReportName;

            SqlDataAdapter da = new SqlDataAdapter(sqlComm);
            da.Fill(dt);
            foreach (DataRow dr in dt.Rows)
            {
                if (dr[0].ToString() != string.Empty)
                {
                    var p = new Parameter();
                    p.Name = Convert.ToString(dr[0]);
                    p.DataType = Convert.ToString(dr[1]);
                    p.IntValue = 0;
                    p.StringValue = string.Empty;
                    p.DateValue = DateTime.Now;

                    Report.Parameters.Add(p);
                }
            }

            conn.Close();
            StateHasChanged();
        }
    }

    private async Task ShowReport()
    {
        ReportData = new List<ExpandoObject>();
        GridReportData = new List<ExpandoObject>();

        SqlConnection conn = new SqlConnection(Configuration.GetConnectionString("ServiceConnection"));
        conn.Open();
        {
            // create the command object
            SqlCommand sqlComm = new SqlCommand($"{SchemaName}.[{ReportName}]", conn);

            foreach (var param in Report.Parameters)
            {
                // Add Parameters
                sqlComm.Parameters.AddWithValue(param.Name, param.DataType == "int" ? param.IntValue : (param.DataType == "nchar" || param.DataType == "nvarchar" ? param.StringValue : param.DateValue));
            }

            sqlComm.CommandType = CommandType.StoredProcedure;

            SqlDataReader reader = sqlComm.ExecuteReader();

            // clearing the existing columns
            var columns = new List<GridColumn>();
            GridColumns = columns;

            // load the ReportData object with data for the grid
            while (reader.Read())
            {
                var obj = SqlDataReaderToExpando(reader);

                ReportData.Add(obj);
            }

            reader.Close();
            conn.Close();
        }

        if (fieldCount > 25)
        {
            GridColumns = null;
            GridReportData = null;

            // export to file
            ExportExcelFile($"{DateTime.Now.ToString("yyyyMMdd_HHmmss")}_ReportData.xlsx", false);

            //MemoryStream excelStream;
            //excelStream = CreateExcel();
            //await JS.SaveAs("Sample.xlsx", excelStream.ToArray());
        }
        else
        {
            StatusMessage = string.Empty;
            // Bind the grid
            GridReportData = ReportData;

            // refresh the grid
            Grid.Refresh();

            // render the UI changes
            StateHasChanged();
        }
    }


    private dynamic SqlDataReaderToExpando(SqlDataReader reader)
    {
        var expandoObject = new ExpandoObject() as IDictionary<string, object>;
        bool generateColumns;
        fieldCount = reader.FieldCount;

        // set variable for generating columns
        generateColumns = fieldCount < 25 ? (GridColumns.Count == 0 ? true :false):false;

        try
        {
            for (var i = 0; i < fieldCount; i++)
            {
                string fieldName = reader.GetName(i);
                expandoObject.Add(fieldName, reader[i]);
                if (generateColumns)
                {
                    GridColumns.Add(GetGridColumn(fieldName));
                }
            }

        }
        catch (Exception ex )
        {
            StatusMessage = $"Error occurred generating file: {ex.Message}";
            throw;
        }

        return expandoObject;
    }

    private static GridColumn GetGridColumn(string fieldName)
    {
        var column = new Syncfusion.Blazor.Grids.GridColumn
        {
            HeaderText = fieldName,
            Field = fieldName,
            IsPrimaryKey = false,
            Visible = true
            //Format = field.Format ?? "",
            //Width = field.Width,
        };
        return column;
    }

    // you can run this without args as well -- public async Task ExcelExport()
    public async Task ExcelExport(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "GridReport_excelexport")
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = $"{DateTime.Now.ToString("yyyyMMdd_HHmmss")}_ReportData.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }

    public async Task ExportExcelFile(string fileName, bool downloadInBrowser)
    {
        ExcelEngine excelEngine = new ExcelEngine();
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2016;
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Import the data to worksheet
            worksheet.ImportData(ReportData, 1, 1, true);

            if (!downloadInBrowser)
            {
                string webRootPath = _hostingEnvironment.ContentRootPath + @"\wwwroot";
                string newPath = $"{webRootPath}/data/Reports";

                if (!Directory.Exists(newPath))
                {
                    Directory.CreateDirectory(newPath);
                }

                string fullPath = Path.Combine(newPath, fileName);

                FileStream stream = new FileStream(fullPath, FileMode.Create, FileAccess.ReadWrite);

                workbook.SaveAs(stream, ExcelSaveType.SaveAsXLS);

                StatusMessage = $"File exported successfully. Download the file here:";
                // filepath used for hyperlink above
                filePath = $"data/Reports/{fileName}";
                stream.Dispose();

            }
            else
            {
                // this is not working - not sure why... 
                using (MemoryStream stream = new MemoryStream())
                {
                    stream.Position = 0;
                    //Save the created Excel document to MemoryStream
                    workbook.SaveAs(stream);
                    await JS.SaveAs("Sample.xlsx", stream.ToArray());
                }
            }

            workbook.Close();
            excelEngine.Dispose();
        }
    }

    public MemoryStream CreateExcelInvoiceSample()
    {
        //Create an instance of ExcelEngine
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2016;

            //Create a workbook
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Add a picture
            //FileStream imageStream = new FileStream("AdventureCycle.png", FileMode.Open);
            //Image image = Image.FromStream(imageStream);
            //IPictureShape shape = worksheet.Pictures.AddPicture(1, 1, image, 20, 20);

            //Disable gridlines in the worksheet
            worksheet.IsGridLinesVisible = false;

            //Enter values to the cells from A3 to A5
            worksheet.Range["A3"].Text = "46036 Michigan Ave";
            worksheet.Range["A4"].Text = "Canton, USA";
            worksheet.Range["A5"].Text = "Phone: +1 231-231-2310";

            //Make the text bold
            worksheet.Range["A3:A5"].CellStyle.Font.Bold = true;

            //Merge cells
            worksheet.Range["D1:E1"].Merge();

            //Enter text to the cell D1 and apply formatting.
            worksheet.Range["D1"].Text = "INVOICE";
            worksheet.Range["D1"].CellStyle.Font.Bold = true;
            worksheet.Range["D1"].CellStyle.Font.RGBColor = Color.FromArgb(42, 118, 189);
            worksheet.Range["D1"].CellStyle.Font.Size = 35;

            //Apply alignment in the cell D1
            worksheet.Range["D1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;
            worksheet.Range["D1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            //Enter values to the cells from D5 to E8
            worksheet.Range["D5"].Text = "INVOICE#";
            worksheet.Range["E5"].Text = "DATE";
            worksheet.Range["D6"].Number = 1028;
            worksheet.Range["E6"].Value = "12/31/2018";
            worksheet.Range["D7"].Text = "CUSTOMER ID";
            worksheet.Range["E7"].Text = "TERMS";
            worksheet.Range["D8"].Number = 564;
            worksheet.Range["E8"].Text = "Due Upon Receipt";

            //Apply RGB backcolor to the cells from D5 to E8
            worksheet.Range["D5:E5"].CellStyle.Color = Color.FromArgb(42, 118, 189);
            worksheet.Range["D7:E7"].CellStyle.Color = Color.FromArgb(42, 118, 189);

            //Apply known colors to the text in cells D5 to E8
            worksheet.Range["D5:E5"].CellStyle.Font.Color = ExcelKnownColors.White;
            worksheet.Range["D7:E7"].CellStyle.Font.Color = ExcelKnownColors.White;

            //Make the text as bold from D5 to E8
            worksheet.Range["D5:E8"].CellStyle.Font.Bold = true;

            //Apply alignment to the cells from D5 to E8
            worksheet.Range["D5:E8"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range["D5:E5"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range["D7:E7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            worksheet.Range["D6:E6"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            //Enter value and applying formatting in the cell A7
            worksheet.Range["A7"].Text = "  BILL TO";
            worksheet.Range["A7"].CellStyle.Color = Color.FromArgb(42, 118, 189);
            worksheet.Range["A7"].CellStyle.Font.Bold = true;
            worksheet.Range["A7"].CellStyle.Font.Color = ExcelKnownColors.White;

            //Apply alignment
            worksheet.Range["A7"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["A7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;

            //Enter values in the cells A8 to A12
            worksheet.Range["A8"].Text = "Steyn";
            worksheet.Range["A9"].Text = "Great Lakes Food Market";
            worksheet.Range["A10"].Text = "20 Whitehall Rd";
            worksheet.Range["A11"].Text = "North Muskegon,USA";
            worksheet.Range["A12"].Text = "+1 231-654-0000";

            //Create a Hyperlink for e-mail in the cell A13
            IHyperLink hyperlink = worksheet.HyperLinks.Add(worksheet.Range["A13"]);
            hyperlink.Type = ExcelHyperLinkType.Url;
            hyperlink.Address = "Steyn@greatlakes.com";
            hyperlink.ScreenTip = "Send Mail";

            //Merge column A and B from row 15 to 22
            worksheet.Range["A15:B15"].Merge();
            worksheet.Range["A16:B16"].Merge();
            worksheet.Range["A17:B17"].Merge();
            worksheet.Range["A18:B18"].Merge();
            worksheet.Range["A19:B19"].Merge();
            worksheet.Range["A20:B20"].Merge();
            worksheet.Range["A21:B21"].Merge();
            worksheet.Range["A22:B22"].Merge();

            //Enter details of products and prices
            worksheet.Range["A15"].Text = "  DESCRIPTION";
            worksheet.Range["C15"].Text = "QTY";
            worksheet.Range["D15"].Text = "UNIT PRICE";
            worksheet.Range["E15"].Text = "AMOUNT";
            worksheet.Range["A16"].Text = "Cabrales Cheese";
            worksheet.Range["A17"].Text = "Chocos";
            worksheet.Range["A18"].Text = "Pasta";
            worksheet.Range["A19"].Text = "Cereals";
            worksheet.Range["A20"].Text = "Ice Cream";
            worksheet.Range["C16"].Number = 3;
            worksheet.Range["C17"].Number = 2;
            worksheet.Range["C18"].Number = 1;
            worksheet.Range["C19"].Number = 4;
            worksheet.Range["C20"].Number = 3;
            worksheet.Range["D16"].Number = 21;
            worksheet.Range["D17"].Number = 54;
            worksheet.Range["D18"].Number = 10;
            worksheet.Range["D19"].Number = 20;
            worksheet.Range["D20"].Number = 30;
            worksheet.Range["D23"].Text = "Total";

            //Apply number format
            worksheet.Range["D16:E22"].NumberFormat = "$.00";
            worksheet.Range["E23"].NumberFormat = "$.00";

            //Apply incremental formula for column Amount by multiplying Qty and UnitPrice
            application.EnableIncrementalFormula = true;
            worksheet.Range["E16:E20"].Formula = "=C16*D16";

            //Formula for Sum the total
            worksheet.Range["E23"].Formula = "=SUM(E16:E22)";

            //Apply borders
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Grey_25_percent;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Grey_25_percent;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Black;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Black;

            //Apply font setting for cells with product details
            worksheet.Range["A3:E23"].CellStyle.Font.FontName = "Arial";
            worksheet.Range["A3:E23"].CellStyle.Font.Size = 10;
            worksheet.Range["A15:E15"].CellStyle.Font.Color = ExcelKnownColors.White;
            worksheet.Range["A15:E15"].CellStyle.Font.Bold = true;
            worksheet.Range["D23:E23"].CellStyle.Font.Bold = true;

            //Apply cell color
            worksheet.Range["A15:E15"].CellStyle.Color = Color.FromArgb(42, 118, 189);

            //Apply alignment to cells with product details
            worksheet.Range["A15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["C15:C22"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range["D15:E15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;

            //Apply row height and column width to look good
            worksheet.Range["A1"].ColumnWidth = 36;
            worksheet.Range["B1"].ColumnWidth = 11;
            worksheet.Range["C1"].ColumnWidth = 8;
            worksheet.Range["D1:E1"].ColumnWidth = 18;
            worksheet.Range["A1"].RowHeight = 47;
            worksheet.Range["A2"].RowHeight = 15;
            worksheet.Range["A3:A4"].RowHeight = 15;
            worksheet.Range["A5"].RowHeight = 18;
            worksheet.Range["A6"].RowHeight = 29;
            worksheet.Range["A7"].RowHeight = 18;
            worksheet.Range["A8"].RowHeight = 15;
            worksheet.Range["A9:A14"].RowHeight = 15;
            worksheet.Range["A15:A23"].RowHeight = 18;

            //Save the document as a stream and retrun the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);
                return stream;
            }
        }
    }

}
