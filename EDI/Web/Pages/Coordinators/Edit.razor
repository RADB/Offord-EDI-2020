@page "/coordinators/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ICoordinatorService coordinatorService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@inject ServiceContext dbContext;
@inject UserSettings UserSettings;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-7">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Coordinator</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Add</button>
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <br />
            <div class="col-md-11">
                @if (CoordinatorModel.Id > 0)
                {
                    <SfAccordion>
                        <AccordionItems>
                            <AccordionItem Header="Details" Expanded="true">
                                <ContentTemplate>
                                    <CoordinatorForm @ref="coordinatorform1" CoordinatorModel="@CoordinatorModel" HandleValidSubmit="HandleValidSubmit" />
                                </ContentTemplate>
                            </AccordionItem>
                        </AccordionItems>
                    </SfAccordion>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private CoordinatorItemViewModel CoordinatorModel { get; set; } = new CoordinatorItemViewModel();

    CoordinatorForm coordinatorform1 = new CoordinatorForm();

    SfGrid<SchoolItemViewModel> Grid;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            CoordinatorModel = await coordinatorService.GetCoordinatorItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(CoordinatorModel.Email))
        {
            ErrorMessage = "Email is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(CoordinatorModel.CoordinatorName))
        {
            ErrorMessage = "Name is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(CoordinatorModel.UserId))
        {
            ErrorMessage = "User ID is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!ValidateExtension.IsEmailValid(CoordinatorModel.Email))
        {
            ErrorMessage = "Email is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        //Console.WriteLine("OnValidSubmit");
        var totalItems = await coordinatorService.GetDuplicateCount(coordinatorform1.CoordinatorModel.CoordinatorName, coordinatorform1.CoordinatorModel.Email, coordinatorform1.CoordinatorModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The same Coordinator has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await coordinatorService.UpdateCoordinatorAsync(coordinatorform1.CoordinatorModel);

            Message = "Coordinator updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./coordinators/index");
    }

    private async void Reset()
    {
        CoordinatorModel = await coordinatorService.GetCoordinatorItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./coordinators/new");
    }
}