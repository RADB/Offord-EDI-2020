@page "/Coordinators/New"
@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ICoordinatorService CoordinatorService

@inject NavigationManager NavigationManager
@inject UserSettings UserSettings;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}

<br />

<div class="row">
    <div class="col-md-6">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>New Coordinator</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <CoordinatorForm @ref="coordinatorform1" CoordinatorModel="@CoordinatorModel" HandleValidSubmit="HandleValidSubmit" />
        </div>

    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private CoordinatorItemViewModel CoordinatorModel { get; set; } = new CoordinatorItemViewModel();

    CoordinatorForm coordinatorform1 = new CoordinatorForm();

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(CoordinatorModel.Email))
        {
            ErrorMessage = "Email is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(CoordinatorModel.CoordinatorName))
        {
            ErrorMessage = "Name is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!ValidateExtension.IsEmailValid(CoordinatorModel.Email))
        {
            ErrorMessage = "Email is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        //Console.WriteLine("OnValidSubmit");
        var totalItems = await CoordinatorService.GetDuplicateCount(CoordinatorModel.CoordinatorName, CoordinatorModel.Email, UserSettings.YearId);

        if (totalItems > 0)
        {
            ErrorMessage = "The same Coordinator has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            int id = await CoordinatorService.CreateCoordinatorAsync(coordinatorform1.CoordinatorModel);

            Message = "New Coordinator added successfully.";
            toastService.ShowSuccess(Message);

            NavigationManager.NavigateTo("./Coordinators/edit/" + id);
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./Coordinators/index");
    }

    private async void Reset()
    {
        CoordinatorModel = new CoordinatorItemViewModel();
        StateHasChanged();
    }
}
