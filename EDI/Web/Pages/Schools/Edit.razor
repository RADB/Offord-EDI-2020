@page "/schools"
@page "/schools/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Shared.Modals;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ISchoolService schoolService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject ISharedService sharedService;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

@if (Messages != null && Messages.Count() > 0)
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @foreach (var item in Messages)
        {
            <ul>
                <li>@item</li>
            </ul>
        }
    </div>
}
@if (ErrorMessages != null && ErrorMessages.Count() > 0)
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @foreach (var item in ErrorMessages)
        {
            <ul>
                <li>@item</li>
            </ul>
        }
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit School</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Add</button>
                    @if (UserSettings.IsAdmin)
                    {
                        <button class="btn btn-info" data-toggle="tooltip" data-placement="bottom" title="Reset Password" @onclick="ResetPassword"><i class="fa fa-mail-bulk fa-1x whiteiconcolor"></i> Password</button>
                    }
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <br />
            <div class="col-md-8" style="margin-left: 24px;">
                @if (SchoolModel.Id > 0)
                {
                    <SfAccordion>
                        <AccordionItems>
                            <AccordionItem Header="Details" Expanded="true">
                                <ContentTemplate>
                                    <SchoolForm @ref="schoolform1" SchoolModel="@SchoolModel" HandleValidSubmit="HandleValidSubmit" />
                                </ContentTemplate>
                            </AccordionItem>
                        </AccordionItems>
                    </SfAccordion>
                }

            </div>
            <div class="col-md-12">
                <EDI.Web.Pages.Teachers.Index SchoolID=@Id Header="Teachers at School" AllowDelete=false AllowEdit=false></EDI.Web.Pages.Teachers.Index>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private List<Teacher> Teachers { get; set; }
    private List<string> Messages { get; set; }
    private List<string> ErrorMessages { get; set; }

    private SchoolItemViewModel SchoolModel { get; set; } = new SchoolItemViewModel();

    SchoolForm schoolform1 = new SchoolForm();

    SfGrid<TeacherItemViewModel> Grid;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            SchoolModel = await schoolService.GetSchoolItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        //Console.WriteLine("OnValidSubmit");
        var totalItems = await schoolService.GetDuplicateCount(SchoolModel.SiteId, SchoolModel.SchoolNumber, schoolform1.SchoolModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The same School has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await schoolService.UpdateSchoolAsync(schoolform1.SchoolModel);

            Message = "School updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./schools/index");
    }

    private async void Reset()
    {
        SchoolModel = await schoolService.GetSchoolItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./schools/new/" + SchoolModel.SiteId);
    }

    private async void ResetPassword()
    {
        GetTeacherList();

        Messages.Clear();
        ErrorMessages.Clear();

        if (Teachers.Count() > 0)
        {
            var parameters = new ModalParameters();

            var message = "Are you sure you want to reset password for all of teachers of this school?";

            parameters.Add("Message", message);
            var modal = ModalService.Show<ConfirmResetPassword>("Confirm Reset Password", parameters);
            var result = await modal.Result;
            ConfirmResetPasswordModalClosed(result);

        }
        else
        {
            toastService.ShowError("This school doesnot contain any valid teacher.");
        }
    }

    private void GetTeacherList()
    {
        Teachers = new List<Teacher>();

        var teachers = dbContext.Teachers.Where(p => p.SchoolId == this.Id).ToList();

        foreach (var teacher in teachers)
        {
            var students = dbContext.Children.Where(p => p.TeacherId == teacher.Id).ToList();

            if (students.Count() > 0)
            {
                Teachers.Add(teacher);
            }
        }
    }

    async void ConfirmResetPasswordModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            GetTeacherList();

            foreach (var teacher in Teachers)
            {
                var message = await sharedService.SendTeacherPassword(teacher);

                if (!message.Contains("failed"))
                {
                    Messages.Add("Password was reset for this teacher - " + teacher.TeacherName + " successfully. An email has been sent to the teacher.");
                    //toastService.ShowSuccess("Password was reset for this teacher - " + teacher.TeacherName + " successfully. An email has been sent to the teacher.");
                }
                else
                {
                    ErrorMessages.Add("Password reset failed - " + teacher.TeacherName + ": " + message);
                    //toastService.ShowError("Password reset failed - " + teacher.TeacherName + ".");
                }

                StateHasChanged();
            }
        }
    }
}
