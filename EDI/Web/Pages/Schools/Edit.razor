@page "/schools"
@page "/schools/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ISchoolService schoolService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal;
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit School</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="addnewbutton" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <br />
            <div class="col-md-8" style="margin-left: 24px;">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Details" Expanded="true">
                            <ContentTemplate>
                                <SchoolForm @ref="schoolform1" SchoolModel="@SchoolModel" HandleValidSubmit="HandleValidSubmit" />
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
            <div class="col-md-12">
                <EDI.Web.Pages.Teachers.Index SchoolID=@Id Header="Teachers at School" AllowDelete=false AllowEdit=false ></EDI.Web.Pages.Teachers.Index>
            </div>
        </div>
        </div>
    </div>

    @code {
        [Parameter]
        public int Id { get; set; }
        private string Message { get; set; }
        private string ErrorMessage { get; set; }

        private SchoolItemViewModel SchoolModel { get; set; } = new SchoolItemViewModel();

        SchoolForm schoolform1 = new SchoolForm();

        SfGrid<TeacherItemViewModel> Grid;

        IEnumerable<TeacherItemViewModel> teachers;

        protected override async Task OnInitializedAsync()
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("./login");
            }
            else if (!user.IsInRole("Administrator"))
            {
                NavigationManager.NavigateTo("./dashboard/index");
            }
            else
            {
                SchoolModel = await schoolService.GetSchoolItem(Id);

                /*var allteachers = await Task.FromResult(dbContext.Teachers.Where(p => p.SchoolId == Id).OrderBy(p => p.TeacherNumber).ToList());

                List<TeacherItemViewModel> sivm = new List<TeacherItemViewModel>();

                foreach (var teacher in allteachers)
                {
                    var ateacher = new TeacherItemViewModel();

                    ateacher.Id = teacher.Id;
                    ateacher.TeacherName = teacher.TeacherName;
                    ateacher.TeacherNumber = teacher.TeacherNumber;
                    ateacher.Email = teacher.Email;
                    ateacher.PhoneNumber = teacher.PhoneNumber;
                    ateacher.YearId = teacher.YearId;

                    var year = dbContext.Years.Where(p => p.Id == teacher.YearId).FirstOrDefault();
                    ateacher.Ediyear = year.Ediyear;

                    ateacher.SchoolId = teacher.SchoolId;
                    var school = dbContext.Schools.Where(p => p.Id == teacher.SchoolId).FirstOrDefault();
                    ateacher.SchoolName = school.SchoolName;
                    ateacher.SchoolNumber = school.SchoolNumber;

                    sivm.Add(ateacher);
                }
                teachers = sivm;*/
            }
        }

        private async void HandleValidSubmit()
        {
            //Console.WriteLine("OnValidSubmit");
            var totalItems = await schoolService.GetDuplicateCount(SchoolModel.SiteId, SchoolModel.SchoolNumber, schoolform1.SchoolModel.Id);

            if (totalItems > 0)
            {
                ErrorMessage = "The same School has already existed.";
                toastService.ShowError(ErrorMessage);
            }
            else
            {
                await schoolService.UpdateSchoolAsync(schoolform1.SchoolModel);

                Message = "School updated successfully.";

                toastService.ShowSuccess(Message);

                StateHasChanged();
            }
        }

        private void Exit()
        {
            NavigationManager.NavigateTo("./schools/index");
        }

        private async void Reset()
        {
            SchoolModel = await schoolService.GetSchoolItem(Id);
        }

        private void Add()
        {
            NavigationManager.NavigateTo("./schools/new");
        }
    }
