@page "/Links/Admin"
@inject ServiceContext edi;
@inject UserSettings UserSettings;
@using EDI.ApplicationCore.Entities

<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <div class="card-header">
                <strong>Links</strong>
            </div>
            <div class="card-body">
                <div class="container-fluid">
                    <AuthorizeView Roles="Administrator">
                        <Authorized>                            
                            @foreach (var link in Links)
                            {
                                <EDI.Web.Shared.Link Name="@link.Name" URL="@link.Url" Description="@link.Description"></EDI.Web.Shared.Link>
                            }
                        </Authorized>
                        <NotAuthorized>
                            Nothing to see here!
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    private List<EDI.ApplicationCore.Entities.Link> Links;

    protected override Task OnInitializedAsync()
    {
        if (UserSettings.IsAdmin)
        {
            //get the list of links ordered by sequence for admins
            Links = edi.Links.Where(p => p.IsAdminLink.HasValue && p.IsAdminLink.Value).OrderBy(p => p.Sequence).ToList();
        }
        else if (UserSettings.IsTeacher)
        {
            //get the list of links ordered by sequence for teachers
            Links = edi.Links.Where(p => p.IsTeacherLink.HasValue && p.IsTeacherLink.Value).OrderBy(p => p.Sequence).ToList();
        }
        else if (UserSettings.IsCoordinator)
        {
            //get the list of links ordered by sequence for coordinators
            Links = edi.Links.Where(p => p.IsCoordinatorLink.HasValue && p.IsCoordinatorLink.Value).OrderBy(p => p.Sequence).ToList();
        }
        return base.OnInitializedAsync();
    }
}