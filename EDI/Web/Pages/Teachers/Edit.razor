@page "/teachers/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Extensions;
@using EDI.Web.Shared.Modals;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ITeacherService teacherService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject ISharedService sharedService;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Teacher</strong>
                <div class="pull-right">
                    <button class="btn btn-warning" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i> Reset</button>
                    <button class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i> Add</button>
                    <button class="btn btn-info" data-toggle="tooltip" data-placement="bottom" title="Reset Password" @onclick="ResetPassword"><i class="fa fa-mail-bulk fa-1x whiteiconcolor"></i> Password</button>
                    <button class="btn btn-info" data-toggle="tooltip" data-placement="bottom" title="Replace" @onclick="Replace"><i class="fa fa-people-carry fa-1x whiteiconcolor"></i> Replace</button>
                    <button class="btn btn-danger" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i> Exit</button>
                </div>
            </div>
            <br />
            <div class="col-md-7" style="margin-left: 24px;">
                @if (TeacherModel.Id > 0)
                {
                    <SfAccordion>
                        <AccordionItems>
                            <AccordionItem Header="Details" Expanded="true">
                                <ContentTemplate>
                                    <TeacherForm @ref="teacherform1" TeacherModel="@TeacherModel" HandleValidSubmit="HandleValidSubmit" />
                                </ContentTemplate>
                            </AccordionItem>
                        </AccordionItems>
                    </SfAccordion>
                }
            </div>
            <div class="col-md-12">
                <EDI.Web.Pages.Children.Index TeacherID=@Id Header="Children in Class" AllowDelete=false AllowEdit=false></EDI.Web.Pages.Children.Index>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService ModalService { get; set; }
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private TeacherItemViewModel TeacherModel { get; set; } = new TeacherItemViewModel();

    TeacherForm teacherform1 = new TeacherForm();

    SfGrid<ChildItemViewModel> Grid;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!UserSettings.IsAdmin)
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            TeacherModel = await teacherService.GetTeacherItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(TeacherModel.Email))
        {
            ErrorMessage = "Email is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(TeacherModel.TeacherName))
        {
            ErrorMessage = "Name is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!TeacherModel.SchoolId.HasValue)
        {
            ErrorMessage = "School is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!ValidateExtension.IsEmailValid(TeacherModel.Email))
        {
            ErrorMessage = "Email is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        //Console.WriteLine("OnValidSubmit");
        var totalItems = await teacherService.GetDuplicateCount(teacherform1.TeacherModel.TeacherName, teacherform1.TeacherModel.Email, teacherform1.TeacherModel.Id);

        var totalItems2 = await teacherService.GetDuplicateCount(TeacherModel.SchoolId.Value, TeacherModel.TeacherNumber, teacherform1.TeacherModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The teacher with the same name and email has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else if (totalItems2 > 0)
        {
            ErrorMessage = "The teacher with the same teacher number has already existed in the same school.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            var teacherstatus = dbContext.TeacherStatuses.Where(p => p.English == "In Progress").FirstOrDefault();
            teacherform1.TeacherModel.TeacherStatusId = teacherstatus.Id;

            await teacherService.UpdateTeacherAsync(teacherform1.TeacherModel);

            Message = "Teacher updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./teachers/index");
    }

    private async void Reset()
    {
        TeacherModel = await teacherService.GetTeacherItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./teachers/new/" + TeacherModel.SchoolId);
    }

    private async void ResetPassword()
    {
        var modal = ModalService.Show<ConfirmResetPassword>("Confirm Reset Password");
        var result = await modal.Result;
        ConfirmResetPasswordModalClosed(result);
    }

    async void ConfirmResetPasswordModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            var teacher = dbContext.Teachers.Where(p => p.Id == this.Id).FirstOrDefault();

            var students = dbContext.Children.Where(p => p.TeacherId == this.Id).ToList();

            if(students.Count() == 0)
            {
                toastService.ShowError("Teacher should have at least one student.");
            }
            else
            {
                var message = await sharedService.SendTeacherPassword(teacher);

                if (!message.Contains("failed"))
                {
                    toastService.ShowSuccess("Password was reset for this teacher successfully. An email has been sent to the teacher.");
                }
                else
                {
                    toastService.ShowError("Password reset failed.");
                }

                StateHasChanged();
            }
        }
    }

    async void Replace()
    {
        var parameters = new ModalParameters();
        parameters.Add("CurrentTeacherModel", TeacherModel);

        var modal = ModalService.Show<ReplaceTeacherWindow>("New Teacher", parameters);
        var result = await modal.Result;
        ReplaceTeacherModalClosed(result);
    }

    async void ReplaceTeacherModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            toastService.ShowSuccess("Current Teacher has been replaced successfully.");

            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

}