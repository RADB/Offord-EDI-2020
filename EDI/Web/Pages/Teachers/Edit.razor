@page "/teachers/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ITeacherService teacherService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal;
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Teacher</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <br />
            <div class="col-md-7">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Details" Expanded="true">
                            <ContentTemplate>
                                <TeacherForm @ref="teacherform1" TeacherModel="@TeacherModel" HandleValidSubmit="HandleValidSubmit" />
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
            <br />
            @if (children != null)
            {
                <div class="col-md-11">
                    <SfGrid ID="GridChild" @ref="Grid" DataSource="@children" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowResizing="true" ShowColumnMenu="true" Toolbar="@(new List<string>() {"Search" })" >
                        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false" ShowDeleteConfirmDialog="false"></GridEditSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                        <GridPageSettings PageSize="20" PageSizes="true"></GridPageSettings>
                        <GridSortSettings>
                            <GridSortColumns>
                                <GridSortColumn Field="Ediid" Direction="SortDirection.Ascending"></GridSortColumn>
                            </GridSortColumns>
                        </GridSortSettings>
                        <GridColumns>
                            <GridColumn HeaderText="EDI_ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="25">
                                <Template>
                                    @{
                                        var child = (context as ChildItemViewModel);
                                        <a target="_blank" href="Children/Edit/@child.Id">@child.Ediid</a>
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.LocalId) HeaderText="Child's Local ID" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.Ediyear) Type="ColumnType.Number" HeaderText="Year" Width="10"></GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.TeacherName) HeaderText="teacher" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.Gender) HeaderText="Gender" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.Dob) Type="ColumnType.Date" HeaderText="Date of Birth" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(ChildItemViewModel.PostalCodeZip) HeaderText="Postal/Zip" Width="30"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>                
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private TeacherItemViewModel TeacherModel { get; set; } = new TeacherItemViewModel();

    TeacherForm teacherform1 = new TeacherForm();

    SfGrid<ChildItemViewModel> Grid;

    IEnumerable<ChildItemViewModel> children;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!user.IsInRole("Administrator"))
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            TeacherModel = await teacherService.GetTeacherItem(Id);
            var allchildren = await Task.FromResult(dbContext.Children.Where(p => p.TeacherId == Id).OrderBy(p => p.Ediid).ToList());

            List<ChildItemViewModel> sivm = new List<ChildItemViewModel>();

            foreach (var child in allchildren)
            {
                var achild = new ChildItemViewModel();

                achild.Id = child.Id;
                achild.Ediid = child.Ediid;
                achild.LocalId = child.LocalId;
                achild.Dob = child.Dob;
                achild.PostalCodeZip = child.PostalCodeZip;
                achild.YearId = child.YearId;

                var year = dbContext.Years.Where(p => p.Id == child.YearId).FirstOrDefault();
                achild.Ediyear = year.Ediyear;

                achild.GenderId = child.GenderId;
                var gender = dbContext.Genders.Where(p => p.Id == child.GenderId).FirstOrDefault();
                achild.Gender = gender.English;

                achild.TeacherId = child.TeacherId;
                var teacher = dbContext.Teachers.Where(p => p.Id == child.TeacherId).FirstOrDefault();
                achild.TeacherName = teacher.TeacherName;

                sivm.Add(achild);
            }
            children = sivm;
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(TeacherModel.Email))
        {
            ErrorMessage = "Email is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(TeacherModel.TeacherName))
        {
            ErrorMessage = "Name is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!TeacherModel.SchoolId.HasValue)
        {
            ErrorMessage = "School is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!ValidateExtension.IsEmailValid(TeacherModel.Email))
        {
            ErrorMessage = "Email is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        //Console.WriteLine("OnValidSubmit");
        var totalItems = await teacherService.GetDuplicateCount(teacherform1.TeacherModel.TeacherName, teacherform1.TeacherModel.Email, teacherform1.TeacherModel.Id);

        var totalItems2 = await teacherService.GetDuplicateCount(TeacherModel.SchoolId.Value, TeacherModel.TeacherNumber, teacherform1.TeacherModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The teacher with the same name and email has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else if (totalItems2 > 0)
        {
            ErrorMessage = "The teacher with the same teacher number has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await teacherService.UpdateTeacherAsync(teacherform1.TeacherModel);

            Message = "Teacher updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./teachers/index");
    }

    private async void Reset()
    {
        TeacherModel = await teacherService.GetTeacherItem(Id);
    }
}