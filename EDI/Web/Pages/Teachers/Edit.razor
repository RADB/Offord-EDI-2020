@page "/teachers/edit/{Id:int}"
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Navigations;
@using EDI.Web.Extensions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService toastService;
@inject ITeacherService teacherService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IModalService Modal;
@inject ServiceContext dbContext;

@if (!string.IsNullOrEmpty(@Message))
{
    <div class="alert alert-info alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Message
    </div>
}

@if (!string.IsNullOrEmpty(@ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @ErrorMessage
    </div>
}
<br />

<div class="row">
    <div class="col-md-10">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:50px;">
            <div class="card-header">
                <strong>Edit Teacher</strong>
                <div class="pull-right">
                    <button class="resetbutton" data-toggle="tooltip" data-placement="bottom" title="Reset" @onclick="Reset"><i class="fa fa-undo fa-1x whiteiconcolor"></i></button>
                    <button class="addnewbutton" data-toggle="tooltip" data-placement="bottom" title="Add" @onclick="Add"><i class="fa fa-plus fa-1x whiteiconcolor"></i></button>
                    <button class="editbutton" data-toggle="tooltip" data-placement="bottom" title="Back" @onclick="Exit"><i class="fa fa-sign-out-alt fa-1x whiteiconcolor"></i></button>
                </div>
            </div>
            <br />
            <div class="col-md-7" style="margin-left: 24px;">
                <SfAccordion>
                    <AccordionItems>
                        <AccordionItem Header="Details" Expanded="true">
                            <ContentTemplate>
                                <TeacherForm @ref="teacherform1" TeacherModel="@TeacherModel" HandleValidSubmit="HandleValidSubmit" />
                            </ContentTemplate>
                        </AccordionItem>
                    </AccordionItems>
                </SfAccordion>
            </div>
            <div class="col-md-12">
                <EDI.Web.Pages.Children.Index TeacherID=@Id Header="Children in Class" AllowDelete=false AllowEdit=false></EDI.Web.Pages.Children.Index>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private TeacherItemViewModel TeacherModel { get; set; } = new TeacherItemViewModel();

    TeacherForm teacherform1 = new TeacherForm();

    SfGrid<ChildItemViewModel> Grid;

    IEnumerable<ChildItemViewModel> children;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else if (!user.IsInRole("Administrator"))
        {
            NavigationManager.NavigateTo("./dashboard/index");
        }
        else
        {
            TeacherModel = await teacherService.GetTeacherItem(Id);
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(TeacherModel.Email))
        {
            ErrorMessage = "Email is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (string.IsNullOrEmpty(TeacherModel.TeacherName))
        {
            ErrorMessage = "Name is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!TeacherModel.SchoolId.HasValue)
        {
            ErrorMessage = "School is required.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        if (!ValidateExtension.IsEmailValid(TeacherModel.Email))
        {
            ErrorMessage = "Email is invalid.";
            toastService.ShowError(ErrorMessage);
            return;
        }

        //Console.WriteLine("OnValidSubmit");
        var totalItems = await teacherService.GetDuplicateCount(teacherform1.TeacherModel.TeacherName, teacherform1.TeacherModel.Email, teacherform1.TeacherModel.Id);

        var totalItems2 = await teacherService.GetDuplicateCount(TeacherModel.SchoolId.Value, TeacherModel.TeacherNumber, teacherform1.TeacherModel.Id);

        if (totalItems > 0)
        {
            ErrorMessage = "The teacher with the same name and email has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else if (totalItems2 > 0)
        {
            ErrorMessage = "The teacher with the same teacher number has already existed.";
            toastService.ShowError(ErrorMessage);
        }
        else
        {
            await teacherService.UpdateTeacherAsync(teacherform1.TeacherModel);

            Message = "Teacher updated successfully.";

            toastService.ShowSuccess(Message);

            StateHasChanged();
        }
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./teachers/index");
    }

    private async void Reset()
    {
        TeacherModel = await teacherService.GetTeacherItem(Id);
    }

    private void Add()
    {
        NavigationManager.NavigateTo("./teachers/new");
    }
}