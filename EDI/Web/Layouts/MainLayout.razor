@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject LanguageSettings LanguageSettings;
@inject AppIdentityDbContext identityContext;
@inject ServiceContext dbContext;
@inject IToastService toastService;
@using System.Linq.Dynamic.Core
@using Serilog;

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                IconType="IconType.FontAwesome"
                ErrorIcon="fa fa-bug" />

@if (isAuthenticated)
{
    <AppHeader OnToggleClick="@OnToggleClick" />
    <div class="app-body">
        @if (IsAdmin)
        {
            <SidebarNav @ref="SidebarObject" />
        }
        else if (IsTeacher)
        {
            <TeacherSidebarNav @ref="TeacherSidebarObject" />
        }
        else
        {
            <CoordinatorSidebarNav @ref="CoordinatorSidebarObject" />
        }
        <div class="main">
            <div class="container-fluid">
                <!-- *PAGE* -->
                @Body
                <!-- /*PAGE* -->
            </div>
        </div>
        @*<AsideMenu />*@
    </div>
    <footer class="app-footer">
        <span class="ml-auto">© <a href="http://www.offordcentre.com/readiness/index.html">Offord Centre for Child Studies</a> | McMaster University & Hamilton Health Sciences, Hamilton ON, Canada | Tel. (905)525-9140 27051</span>
    </footer>
}
else
{
    @*<div class="login-bg"></div>*@
    <div class="container-fluid">
        <!-- *PAGE* -->
        @Body
        <!-- /*PAGE* -->
    </div>
}

@code{
    private bool isAuthenticated { get; set; }

    public SidebarNav SidebarObject { get; set; }
    public TeacherSidebarNav TeacherSidebarObject { get; set; }
    public CoordinatorSidebarNav CoordinatorSidebarObject { get; set; }

    private bool IsAdmin { get; set; }
    private bool IsTeacher { get; set; }
    private bool IsCoordinator { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;
        try
        {
            // get the year id
            var predicate = "FieldName==\"Year\"";
            var year = dbContext.SystemConfigurations.Where(predicate).Single().FieldValue;
            predicate = "EDIYear == " + year;
            UserSettings.YearId = dbContext.Years.Where(predicate).Single().Id;
        }
        catch
        {
            Console.WriteLine("Import data - set the year variable - Restart the application");
        }

        if (user.Identity.IsAuthenticated)
        {
            var url = NavigationManager.Uri;

            UserSettings.UserName = user.Identity.Name;
            UserSettings.IsAuthenticated = true;

            var user1 = identityContext.Users.Where(p => p.UserName == user.Identity.Name).FirstOrDefault();
            UserSettings.UserID = user1.Id;
            UserSettings.FirstName = user1.FirstName;
            UserSettings.LastName = user1.LastName;
            UserSettings.IsAdmin = false;
            UserSettings.IsCoordinator = false;
            UserSettings.IsTeacher = false;
            UserSettings.Language = user1.Language == null ? "English" : user1.Language;

            var alltranslations = await Task.FromResult(dbContext.Translations.OrderBy(p => p.English).ToList());

            List<TranslationItemViewModel> sivm = new List<TranslationItemViewModel>();

            foreach (var translation in alltranslations)
            {
                var atranslation = new TranslationItemViewModel();

                atranslation.Id = translation.Id;
                atranslation.English = translation.English;
                atranslation.French = translation.French;

                sivm.Add(atranslation);
            }
            LanguageSettings.Translations = sivm;

            @if (user.IsInRole("Administrator"))
            {
                UserSettings.IsAdmin = true;
                IsAdmin = true;
            }
            else if (user.IsInRole("Teacher"))
            {
                UserSettings.IsTeacher = true;
                IsTeacher = true;


                /*data = dbContext.Children.Where(pred)
                       .Include(c => c.QuestionnairesDataDemographics)
                       .Include(c => c.QuestionnairesDataSectionBs)
                       .Single();*/

                // get the teacher record - which contains the school and the province
                //var teacher = await Task.FromResult(dbContext.Teachers.Where(s => s.UserId == UserSettings.UserID).FirstOrDefault());
                //dbContext.Entry(teacher).Reference(s => s.School).Load();
                //dbContext.Entry(teacher.School).Reference(ts => ts.Province).Load();
                try
                {
                    var teacher = dbContext.Teachers.Where(s => s.UserId == UserSettings.UserID)
                                    .Include(s => s.School)
                                    .ThenInclude(ts => ts.Province).FirstOrDefault();

                    if (teacher != null)
                    {
                        UserSettings.Province = teacher.School.Province.English.Replace(" ", "");
                        UserSettings.TeacherId = teacher.Id;
                    }
                    else
                    {
                        string warning = "The teacher has an account but no data associated at this time.  Please import data.";
                        Log.Warning(warning);
                        //throw new NullReferenceException(warning);
                        //toastService.ShowWarning(warning, "No Teacher Data");

                    }
                }
                catch (Exception ex)
                {
                    Log.Warning(ex.Message);                    
                    NavigationManager.NavigateTo("./login");
                }
            }
            else
            {
                UserSettings.IsCoordinator = true;
                IsCoordinator = true;
            }
        }
        else
        {
            UserSettings.IsAuthenticated = false;
        }
    }

    private void OnToggleClick()
    {
        if (IsAdmin)
        {
            this.SidebarObject.Sidebar.Toggle();
        }
        else if (IsTeacher)
        {
            this.TeacherSidebarObject.Sidebar.Toggle();
        }
        else
        {
            this.CoordinatorSidebarObject.Sidebar.Toggle();
        }
    }
}
