@using Syncfusion.Blazor.Buttons
@inject ISharedService sharedService
@inject ServiceContext dbContext;

<div class="form-group row">
    <label class="col-md-4 col-form-label" for="Year">Year<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
    <select class="col-md-3" value="@yearid" @onchange="@(e =>YearChange(e))">
        @if (Years != null)
        {
            @foreach (var option in Years)
            {
                <option value="@option.Value">@option.Text</option>
            }
        }
    </select>
</div>
<div class="form-group row">
    <label class="col-md-4 col-form-label" for="Provinces">Provinces: </label>
    @if (year != null && year.Alberta.HasValue && year.Alberta.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Alberta" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Alberta" @onchange="AlbertaChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.BritishColumbia.HasValue && year.BritishColumbia.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="British Columbia" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.BritishColumbia" @onchange="BCChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Manitoba.HasValue && year.Manitoba.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Manitoba" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Manitoba" @onchange="ManitobaChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
</div>
<div class="form-group row">
    <div class="col-md-4 col-form-label"></div>
    @if (year != null && year.NewBrunswick.HasValue && year.NewBrunswick.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="New Brunswick" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.NewBrunswick" @onchange="NewBrunswickChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Newfoundland.HasValue && year.Newfoundland.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Newfoundland" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Newfoundland" @onchange="NewfoundlandChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.NovaScotia.HasValue && year.NovaScotia.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Nova Scotia" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.NovaScotia" @onchange="NovaScotiaChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
</div>
<div class="form-group row">
    <div class="col-md-4 col-form-label"></div>
    @if (year != null && year.Nunavut.HasValue && year.Nunavut.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Nunavut" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Nunavut" @onchange="NunavutChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Nwt.HasValue && year.Nwt.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Northwest Territories" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Nwt" @onchange="NwtChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Ontario.HasValue && year.Ontario.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Ontario" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Ontario" @onchange="OntarioChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
</div>
<div class="form-group row">
    <div class="col-md-4 col-form-label"></div>
    @if (year != null && year.Pei.HasValue && year.Pei.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Prince Edward Island" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Pei" @onchange="PeiChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Quebec.HasValue && year.Quebec.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Quebec" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Quebec" @onchange="QuebecChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
    @if (year != null && year.Saskatchewan.HasValue && year.Saskatchewan.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Saskatchewan" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Saskatchewan" @onchange="SaskatchewanChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
</div>
<div class="form-group row">
    <div class="col-md-4 col-form-label"></div>
    @if (year != null && year.Yukon.HasValue && year.Yukon.Value)
    {
        <div class="input-group col-md-2">
            <SfCheckBox Label="Yukon" LabelPosition="LabelPosition.After" Checked="@ProvinceConfigModel.Yukon" @onchange="YukonChange" CssClass="e-info"></SfCheckBox>
        </div>
    }
</div>

@code {
    [Parameter]
    public BaseModelProvince ProvinceConfigModel { get; set; }

    private IEnumerable<SelectListItem> Years { get; set; }

    private string yearid { get; set; }

    private Year year { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Years = await sharedService.GetYears();

        if (ProvinceConfigModel.YearID == 0 && Years.Count() == 2)
        {
            ProvinceConfigModel.YearID = int.Parse(Years.Where(t => !string.IsNullOrEmpty(t.Value)).First().Value);
        }

        yearid = ProvinceConfigModel.YearID.ToString();

        year = dbContext.Years.Where(p => p.Id == ProvinceConfigModel.YearID).FirstOrDefault();
    }

    private void YearChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.YearID = 0;

        if (int.TryParse(selectedString, out int value))
        {
            ProvinceConfigModel.YearID = value;

            year = dbContext.Years.Where(p => p.Id == ProvinceConfigModel.YearID).FirstOrDefault();
        }
    }

    private void AlbertaChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Alberta = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Alberta = value;
        }
    }

    private void BCChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.BritishColumbia = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.BritishColumbia = value;
        }
    }

    private void ManitobaChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Manitoba = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Manitoba = value;
        }
    }

    private void NewBrunswickChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.NewBrunswick = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.NewBrunswick = value;
        }
    }

    private void NewfoundlandChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Newfoundland = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Newfoundland = value;
        }
    }

    private void NovaScotiaChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.NovaScotia = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.NovaScotia = value;
        }
    }

    private void NunavutChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Nunavut = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Nunavut = value;
        }
    }

    private void NwtChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Nwt = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Nwt = value;
        }
    }

    private void OntarioChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Ontario = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Ontario = value;
        }
    }

    private void PeiChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Pei = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Pei = value;
        }
    }

    private void QuebecChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Quebec = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Quebec = value;
        }
    }

    private void SaskatchewanChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Saskatchewan = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Saskatchewan = value;
        }
    }

    private void YukonChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.Yukon = false;

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.Yukon = value;
        }
    }
}

<style>
    .e-checkbox-wrapper.e-primary:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #e03872;
    }

    .e-checkbox-wrapper.e-success .e-frame.e-check,
    .e-checkbox-wrapper.e-success .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #689f38;
    }

    .e-checkbox-wrapper.e-success:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #449d44;
    }

    .e-checkbox-wrapper.e-info .e-frame.e-check,
    .e-checkbox-wrapper.e-info .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #2196f3;
    }

    .e-checkbox-wrapper.e-info:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #0b7dda;
    }

    .e-checkbox-wrapper.e-warning .e-frame.e-check,
    .e-checkbox-wrapper.e-warning .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ef6c00;
    }

    .e-checkbox-wrapper.e-warning:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #cc5c00;
    }

    .e-checkbox-wrapper.e-danger .e-frame.e-check,
    .e-checkbox-wrapper.e-danger .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #d84315;
    }

    .e-checkbox-wrapper.e-danger:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ba3912;
    }
</style>
