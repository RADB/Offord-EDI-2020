@using Syncfusion.Blazor.Buttons
@inject ISharedService sharedService
@inject ServiceContext dbContext;

<div class="form-group row">
    <label class="col-md-4 col-form-label" for="Year">Year<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
    <select class="col-md-3" value="@yearid" @onchange="@(e =>YearChange(e))">
        @if (Years != null)
        {
            @foreach (var option in Years)
            {
                <option value="@option.Value">@option.Text</option>
            }
        }
    </select>
</div>

<div class="form-group row">
    <label class="col-md-4 col-form-label" for="Provinces">Provinces: </label>
    @foreach (var option in Provinces)
    {
        @if (year != null && year.GetType().GetProperty((option.English).Replace(" ", "")).GetValue(year, null).Equals(true))
        {
            <div class="input-group col-md-2">
                <SfCheckBox Label="@option.English" LabelPosition="LabelPosition.After" @onchange="@((ev) => CheckBoxValueChange(ev, option.English))" Checked=@ProvinceConfigModel.GetType().GetProperty((option.English).Replace(" ", "")).GetValue(ProvinceConfigModel).Equals(true) CssClass="e-info"></SfCheckBox>
            </div>
        }
    }
</div>



@code {
    [Parameter]
    public BaseModelProvince ProvinceConfigModel { get; set; }

    private IEnumerable<SelectListItem> Years { get; set; }
    IEnumerable<ProvinceItemViewModel> Provinces { get; set; }

    private string yearid { get; set; }

    private Year year { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Years = await sharedService.GetYears();
        var countryidusa = 0;// dbContext.Countries.Where(p => p.English == "United States").FirstOrDefault().Id;
        var countryidcad = dbContext.Countries.Where(p => p.English == "Canada").FirstOrDefault().Id;
        var countryidbarb = 0;// dbContext.Countries.Where(p => p.English == "Barbados").FirstOrDefault().Id;
        var allprovinces = await Task.FromResult(dbContext.Provinces.Where(p => p.CountryID == countryidusa || p.CountryID == countryidcad || p.CountryID == countryidbarb).OrderBy(p => p.CountryID).OrderBy(p => p.English).ToList());

        List<ProvinceItemViewModel> sivm = new List<ProvinceItemViewModel>();

        foreach (var province in allprovinces)
        {
            var aprovince = new ProvinceItemViewModel();

            aprovince.Id = province.Id;
            aprovince.Code = province.Code;
            aprovince.EDICode = province.EDICode;
            aprovince.English = province.English;
            aprovince.French = province.French;
            aprovince.CountryID = province.CountryID;

            var country = dbContext.Countries.Where(p => p.Id == province.CountryID).FirstOrDefault();
            aprovince.Country = country.English;

            sivm.Add(aprovince);
        }

        Provinces = sivm;

        if (ProvinceConfigModel.YearID == 0 && Years.Count() == 2)
        {
            ProvinceConfigModel.YearID = int.Parse(Years.Where(t => !string.IsNullOrEmpty(t.Value)).First().Value);
        }

        yearid = ProvinceConfigModel.YearID.ToString();

        year = dbContext.Years.Where(p => p.Id == ProvinceConfigModel.YearID).FirstOrDefault();
    }

    private void YearChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.YearID = 0;

        if (int.TryParse(selectedString, out int value))
        {
            ProvinceConfigModel.YearID = value;

            year = dbContext.Years.Where(p => p.Id == ProvinceConfigModel.YearID).FirstOrDefault();
        }
    }

    private void CheckBoxValueChange(Microsoft.AspNetCore.Components.ChangeEventArgs e, string name)
    {
        string selectedString = e.Value.ToString();

        ProvinceConfigModel.GetType().GetProperty((name).Replace(" ", "")).SetValue(ProvinceConfigModel, false);

        if (bool.TryParse(selectedString, out bool value))
        {
            ProvinceConfigModel.GetType().GetProperty((name).Replace(" ", "")).SetValue(ProvinceConfigModel, value);
        }
    }
}

<style>
    .e-checkbox-wrapper.e-primary:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #e03872;
    }

    .e-checkbox-wrapper.e-success .e-frame.e-check,
    .e-checkbox-wrapper.e-success .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #689f38;
    }

    .e-checkbox-wrapper.e-success:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #449d44;
    }

    .e-checkbox-wrapper.e-info .e-frame.e-check,
    .e-checkbox-wrapper.e-info .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #2196f3;
    }

    .e-checkbox-wrapper.e-info:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #0b7dda;
    }

    .e-checkbox-wrapper.e-warning .e-frame.e-check,
    .e-checkbox-wrapper.e-warning .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ef6c00;
    }

    .e-checkbox-wrapper.e-warning:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #cc5c00;
    }

    .e-checkbox-wrapper.e-danger .e-frame.e-check,
    .e-checkbox-wrapper.e-danger .e-checkbox:focus + .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #d84315;
    }

    .e-checkbox-wrapper.e-danger:hover .e-frame.e-check { /* csslint allow: adjoining-classes */
        background-color: #ba3912;
    }
</style>
