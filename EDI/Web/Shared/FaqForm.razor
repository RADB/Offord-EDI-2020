@inject NavigationManager NavigationManager
@inject IFaqService faqService
@inject ISharedService sharedService
@inject IAccountService accountService
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.RichTextEditor

<EditForm Model="@FaqModel" OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data" class="form-horizontal">
    <div class="card-body">
        <DataAnnotationsValidator />
        <div class="text-danger"><ValidationSummary /></div>

        <div class="form-group row">
            <label class="col-md-4 col-form-label" for="Question">Question<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
            <textarea class="col-md-7 col-form-label" rows="3" @bind="FaqModel.Question" />
        </div>
        <div class="form-group row">
            <label class="col-md-4 col-form-label" for="Answer">Answer: </label>
            <RichTextEditor @ref="rte" BindValue="@FaqModel.Answer" />
        </div>
        @if (UserSettings.IsAdmin)
        {
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="IsAdministratorFaq">Admin Faq: </label>
                <SfCheckBox Checked="@isadmin" @onchange="IsAdministratorFaqChange"></SfCheckBox>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="IsCoordinatorFaq">Coordinator Faq: </label>
                <SfCheckBox Checked="@iscoordinator" @onchange="IsCoordinatorFaqChange"></SfCheckBox>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="IsTeacherFaq">Teacher Faq: </label>
                <SfCheckBox Checked="@isteacher" @onchange="IsTeacherFaqChange"></SfCheckBox>
            </div>
        }
        <div class="form-group row">
            <label class="col-md-4 col-form-label" for="Sequence">Sequence: </label>
            <input type="number" class="col-md-3 col-form-label" @bind="FaqModel.Sequence" />
        </div>

        <ProvincesYears @ref="provinces" ProvinceConfigModel="@ProvinceConfigModel"></ProvincesYears>
    </div>
    <div class="card-footer">
        <button type="submit" class="btn btn-success"><i class="fa fa-save bg whiteiconcolor"></i> Save</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public FaqItemViewModel FaqModel { get; set; }

    [Parameter]
    public EventCallback HandleValidSubmit { get; set; }

    public ProvincesYears provinces = new ProvincesYears();
    private BaseModelProvince ProvinceConfigModel { get; set; } = new BaseModelProvince();

    //Begin RichTextEditorToolbar
    SfRichTextEditor RteObj;

    public static object[] tools = new object[]{
        "Bold", "Italic", "Underline", "StrikeThrough",
        "FontName", "FontSize", "FontColor", "BackgroundColor",
        "LowerCase", "UpperCase", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList",
        "Outdent", "Indent", "|", "CreateTable",
        "CreateLink", "Image", "|", "ClearFormat",
        "SourceCode", "|", "Undo", "Redo"
    };

    public RichTextEditor rte = new RichTextEditor();
    // End RichText Editor

    public IEnumerable<SelectListItem> Coordinates { get; set; }

    public string coordinateid { get; set; }

    public bool isadmin { get; set; }

    public bool iscoordinator { get; set; }

    public bool isteacher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProvinceConfigModel.YearID = FaqModel.YearId;

        if (UserSettings.IsCoordinator)
        {
            if (!FaqModel.IsCoordinatorFaq.HasValue)
                FaqModel.IsCoordinatorFaq = true;
        }
        else if (UserSettings.IsTeacher)
        {
            if (!FaqModel.IsTeacherFaq.HasValue)
                FaqModel.IsTeacherFaq = true;
        }
        else
        {
            isadmin = FaqModel.IsAdministratorFaq.HasValue && FaqModel.IsAdministratorFaq.Value ? true : false;

            iscoordinator = FaqModel.IsCoordinatorFaq.HasValue && FaqModel.IsCoordinatorFaq.Value ? true : false;

            isteacher = FaqModel.IsTeacherFaq.HasValue && FaqModel.IsTeacherFaq.Value ? true : false;

            ProvinceConfigModel.Alberta = FaqModel.Alberta;
            ProvinceConfigModel.BritishColumbia = FaqModel.BritishColumbia;
            ProvinceConfigModel.Manitoba = FaqModel.Manitoba;
            ProvinceConfigModel.NewBrunswick = FaqModel.NewBrunswick;
            ProvinceConfigModel.NewfoundlandandLabrador = FaqModel.NewfoundlandandLabrador;
            ProvinceConfigModel.NovaScotia = FaqModel.NovaScotia;
            ProvinceConfigModel.Nunavut = FaqModel.Nunavut;
            ProvinceConfigModel.Ontario = FaqModel.Ontario;
            ProvinceConfigModel.PrinceEdwardIsland = FaqModel.PrinceEdwardIsland;
            ProvinceConfigModel.Quebec = FaqModel.Quebec;
            ProvinceConfigModel.Saskatchewan = FaqModel.Saskatchewan;
            ProvinceConfigModel.YukonTerritory = FaqModel.YukonTerritory;
            ProvinceConfigModel.NorthwestTerritories = FaqModel.NorthwestTerritories;
        }
    }

    private void IsAdministratorFaqChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FaqModel.IsAdministratorFaq = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FaqModel.IsAdministratorFaq = isrequired;
        }
    }

    private void IsCoordinatorFaqChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FaqModel.IsCoordinatorFaq = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FaqModel.IsCoordinatorFaq = isrequired;
        }
    }

    private void IsTeacherFaqChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        FaqModel.IsTeacherFaq = false;

        if (bool.TryParse(selectedString, out bool isrequired))
        {
            FaqModel.IsTeacherFaq = isrequired;
        }
    }
}
