@inject IYearService yearService

@inject ServiceContext dbContext;


<div class="simple-form" style="width:850px;">
    @if (!string.IsNullOrEmpty(@Message))
    {
        <div class="text-success">@Message</div>
    }

    @if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="text-danger">@ErrorMessage</div>
    }
    <div class="form-group row">
        <label class="col-md-4 col-form-label" for="Year">Year: </label>
        <input type="number" class="col-md-3 col-form-label" value="@year" @onchange="@(e =>YearChange(e))" />
    </div>
    <Provinces @ref="provinces" ProvinceConfigModel="@ProvinceConfigModel" />
    <button @onclick="@SaveYear" class="btn btn-primary">Submit</button>
    <button @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }

    [Parameter]
    public YearItemViewModel YearModel { get; set; }

    public int year { get; set; }

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    public Provinces provinces = new Provinces();
    private BaseModelProvince ProvinceConfigModel { get; set; } = new BaseModelProvince();

    protected override async Task OnInitializedAsync()
    {
        //YearModel = Parameters.Get<YearItemViewModel>("YearModel");

        if (YearModel.Ediyear.HasValue)
        {
            year = YearModel.Ediyear.Value;
        }
        else
        {
            year = 0;
        }

        ProvinceConfigModel.Alberta = YearModel.Alberta;
        ProvinceConfigModel.BritishColumbia = YearModel.BritishColumbia;
        ProvinceConfigModel.FirstNations = YearModel.FirstNations;
        ProvinceConfigModel.Manitoba = YearModel.Manitoba;
        ProvinceConfigModel.NewBrunswick = YearModel.NewBrunswick;
        ProvinceConfigModel.NewfoundlandandLabrador  = YearModel.NewfoundlandandLabrador;
        ProvinceConfigModel.NewYork = YearModel.NewYork;
        ProvinceConfigModel.NovaScotia = YearModel.NovaScotia;
        ProvinceConfigModel.Nunavut = YearModel.Nunavut;
        ProvinceConfigModel.Ontario = YearModel.Ontario;
        ProvinceConfigModel.PrinceEdwardIsland = YearModel.PrinceEdwardIsland;
        ProvinceConfigModel.Quebec = YearModel.Quebec;
        ProvinceConfigModel.Saskatchewan = YearModel.Saskatchewan;
        ProvinceConfigModel.YukonTerritory = YearModel.YukonTerritory;
        ProvinceConfigModel.NorthwestTerritories= YearModel.NorthwestTerritories;
        ProvinceConfigModel.NewYork = YearModel.NewYork;
    }

    private void YearChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        YearModel.Ediyear = null;

        if (short.TryParse(selectedString, out short newvalue))
        {
            YearModel.Ediyear = newvalue;
        }
        StateHasChanged();
    }

    private async void SaveYear()
    {
        if (!YearModel.Ediyear.HasValue || YearModel.Ediyear == 0)
        {
            ErrorMessage = "Year is required.";
            return;
        }

        if (YearModel.Ediyear.HasValue && (YearModel.Ediyear > 2100 || YearModel.Ediyear < 2000))
        {
            ErrorMessage = "EDI year should be within 2000 and 2100.";
            return;
        }

        YearModel.Alberta = ProvinceConfigModel.Alberta;
        YearModel.BritishColumbia = ProvinceConfigModel.BritishColumbia;
        YearModel.FirstNations = ProvinceConfigModel.FirstNations;
        YearModel.Manitoba = ProvinceConfigModel.Manitoba;
        YearModel.NewBrunswick = ProvinceConfigModel.NewBrunswick;
        YearModel.NewfoundlandandLabrador = ProvinceConfigModel.NewfoundlandandLabrador;
        YearModel.NewYork = ProvinceConfigModel.NewYork;
        YearModel.NovaScotia = ProvinceConfigModel.NovaScotia;
        YearModel.Nunavut = ProvinceConfigModel.Nunavut;
        YearModel.Ontario = ProvinceConfigModel.Ontario;
        YearModel.PrinceEdwardIsland = ProvinceConfigModel.PrinceEdwardIsland;
        YearModel.Quebec = ProvinceConfigModel.Quebec;
        YearModel.Saskatchewan = ProvinceConfigModel.Saskatchewan;
        YearModel.YukonTerritory = ProvinceConfigModel.YukonTerritory;
        YearModel.NorthwestTerritories = ProvinceConfigModel.NorthwestTerritories;
        YearModel.NewYork = ProvinceConfigModel.NewYork;

        if (YearModel.Id > 0)
        {
            var totalItems = await yearService.GetDuplicateCount(YearModel.Ediyear.Value, YearModel.Id);

            if (totalItems > 0)
            {
                ErrorMessage = "The same Year has already existed.";
            }
            else
            {
                await yearService.UpdateYearAsync(YearModel);

                Message = "Year updated successfully.";

                StateHasChanged();
            }
        }
        else
        {
            var totalItems = await yearService.GetDuplicateCount(YearModel.Ediyear.Value);

            if (totalItems > 0)
            {
                ErrorMessage = "The same year has already existed.";
            }
            else
            {
                await yearService.CreateYearAsync(YearModel);

                Message = "New year added successfully.";
                YearModel = new YearItemViewModel();
                StateHasChanged();
            }
        }

        await ModalInstance.CloseAsync(ModalResult.Ok<YearItemViewModel>(YearModel));
    }

    void Reset()
    {
        year = 0;

        YearModel = new YearItemViewModel();
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}
