@inject ISpecialProblemService specialProblemService

@inject ServiceContext dbContext;


<div class="simple-form" style="width:550px;">
    @if (!string.IsNullOrEmpty(@Message))
    {
        <div class="text-success">@Message</div>
    }

    @if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="text-danger">@ErrorMessage</div>
    }
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="Code">Special Problem Code<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
        <input type="text" class="col-md-6 col-form-label" value="@Code" @onchange="@(e =>CodeChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="English">Special Problem English: </label>
        <input type="text" class="col-md-6 col-form-label" value="@English" @onchange="@(e =>EnglishChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="English">Special Problem French: </label>
        <input type="text" class="col-md-6 col-form-label" value="@French" @onchange="@(e =>FrenchChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="Sequence">Sequence: </label>
        <input type="number" class="col-md-6 col-form-label" value="@sequence" @onchange="@(e =>SequenceChange(e))" />
    </div>
    <button @onclick="@SaveSpecialProblem" class="btn btn-primary">Submit</button>
    <button @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }

    SpecialProblemItemViewModel SpecialProblemModel { get; set; }

    public string Code { get; set; }
    public string English { get; set; }
    public string French { get; set; }

    public int sequence { get; set; }

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SpecialProblemModel = Parameters.Get<SpecialProblemItemViewModel>("SpecialProblemModel");

        if (SpecialProblemModel.Sequence.HasValue)
        {
            sequence = SpecialProblemModel.Sequence.Value;
        }
        else
        {
            sequence = 0;
        }

        Code = SpecialProblemModel.Code;
        English = SpecialProblemModel.English;
        French = SpecialProblemModel.French;
    }

    private void SequenceChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        SpecialProblemModel.Sequence = null;

        if (int.TryParse(selectedString, out int newvalue))
        {
            SpecialProblemModel.Sequence = newvalue;
        }
        StateHasChanged();
    }

    private async void SaveSpecialProblem()
    {
        if (string.IsNullOrEmpty(SpecialProblemModel.Code))
        {
            ErrorMessage = "SpecialProblem Code is required.";
            return;
        }

        if (SpecialProblemModel.Id > 0)
        {
            var totalItems = await specialProblemService.GetDuplicateCount(SpecialProblemModel.Code, SpecialProblemModel.Id);

            if (totalItems > 0)
            {
                ErrorMessage = "The same SpecialProblem has already existed.";
            }
            else
            {
                await specialProblemService.UpdateSpecialProblemAsync(SpecialProblemModel);

                Message = "SpecialProblem updated successfully.";

                StateHasChanged();
            }
        }
        else
        {
            var totalItems = await specialProblemService.GetDuplicateCount(SpecialProblemModel.Code);

            if (totalItems > 0)
            {
                ErrorMessage = "The same specialProblem has already existed.";
            }
            else
            {
                await specialProblemService.CreateSpecialProblemAsync(SpecialProblemModel);

                Message = "New specialProblem added successfully.";
                SpecialProblemModel = new SpecialProblemItemViewModel();
                StateHasChanged();
            }
        }

        await ModalInstance.CloseAsync(ModalResult.Ok<SpecialProblemItemViewModel>(SpecialProblemModel));
    }

    void Reset()
    {
        sequence = 0;

        SpecialProblemModel = new SpecialProblemItemViewModel();
    }

    async Task Cancel() => await ModalInstance.CancelAsync();

    private void CodeChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        SpecialProblemModel.Code = string.IsNullOrEmpty(selectedString) ? null : selectedString.Trim();

        StateHasChanged();
    }

    private void EnglishChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        SpecialProblemModel.English = string.IsNullOrEmpty(selectedString) ? null : selectedString.Trim();

        StateHasChanged();
    }

    private void FrenchChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        SpecialProblemModel.French = string.IsNullOrEmpty(selectedString) ? null : selectedString.Trim();

        StateHasChanged();
    }
}
