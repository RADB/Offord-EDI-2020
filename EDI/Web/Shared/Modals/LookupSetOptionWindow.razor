@inject ILookupSetOptionService lookupSetOptionService
@inject ISharedService sharedService

@inject ServiceContext dbContext;


<div class="simple-form" style="width:550px;">
    @if (!string.IsNullOrEmpty(@Message))
    {
        <div class="text-success">@Message</div>
    }

    @if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="text-danger">@ErrorMessage</div>
    }
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="English">English<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
        <input type="text" class="col-md-6 col-form-label" value="@English" @onchange="@(e =>EnglishChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="English">French: </label>
        <input type="text" class="col-md-6 col-form-label" value="@French" @onchange="@(e =>FrenchChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="Value">Value<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
        <input type="number" class="col-md-6 col-form-label" value="@value" @onchange="@(e =>ValueChange(e))" />
    </div>
    <div class="form-group row">
        <label class="col-md-5 col-form-label" for="Sequence">Sequence<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
        <input type="number" class="col-md-6 col-form-label" value="@sequence" @onchange="@(e =>SequenceChange(e))" />
    </div>
    
    <button @onclick="@SaveLookupSetOption" class="btn btn-primary">Submit</button>
    <button @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }
    [Parameter]
    public LookupSetOptionItemViewModel LookupSetOptionModel { get; set; }

    public string Name { get; set; }
    public string English { get; set; }
    public string French { get; set; }
    public int value { get; set; }
    public int sequence { get; set; }

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    public IEnumerable<SelectListItem> Years { get; set; }

    public string yearid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //LookupSetOptionModel = Parameters.Get<LookupSetOptionItemViewModel>("LookupSetOptionModel");

        Years = await sharedService.GetYears();

        if (LookupSetOptionModel.YearId == 0 && Years.Count() == 2)
        {
            LookupSetOptionModel.YearId = int.Parse(Years.Where(t => !string.IsNullOrEmpty(t.Value)).First().Value);
        }

        yearid = LookupSetOptionModel.YearId.ToString();

        sequence = LookupSetOptionModel.Sequence;
        value = LookupSetOptionModel.Value;
        English = LookupSetOptionModel.English;
        French = LookupSetOptionModel.French;
    }

    private void YearChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.YearId = 0;

        if (int.TryParse(selectedString, out int newyearid))
        {
            LookupSetOptionModel.YearId = newyearid;
        }
    }

    private void SequenceChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.Sequence = 0;

        if (short.TryParse(selectedString, out short newvalue))
        {
            LookupSetOptionModel.Sequence = newvalue;
        }
        StateHasChanged();
    }

    private void ValueChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.Value = 0;

        if (byte.TryParse(selectedString, out byte newvalue))
        {
            LookupSetOptionModel.Value = newvalue;
        }
        StateHasChanged();
    }

    private void LookupSetIdChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.LookupSetId = 0;

        if (byte.TryParse(selectedString, out byte newvalue))
        {
            LookupSetOptionModel.LookupSetId = newvalue;
        }
        StateHasChanged();
    }

    private async void SaveLookupSetOption()
    {
        if (string.IsNullOrEmpty(LookupSetOptionModel.English))
        {
            ErrorMessage = "English is required.";
            return;
        }

        if (LookupSetOptionModel.Sequence == 0)
        {
            ErrorMessage = "Sequence must be bigger than 0.";
            return;
        }

        if (LookupSetOptionModel.Id > 0)
        {
            await lookupSetOptionService.UpdateLookupSetOptionAsync(LookupSetOptionModel);

            Message = "LookupSetOption updated successfully.";

            StateHasChanged();
        }
        else
        {
            await lookupSetOptionService.CreateLookupSetOptionAsync(LookupSetOptionModel);

            Message = "New lookupSetOption added successfully.";
            LookupSetOptionModel = new LookupSetOptionItemViewModel();
            StateHasChanged();
        }

        await ModalInstance.CloseAsync(ModalResult.Ok<LookupSetOptionItemViewModel>(LookupSetOptionModel));
    }

    void Reset()
    {
        sequence = 0;

        LookupSetOptionModel = new LookupSetOptionItemViewModel();
    }

    async Task Cancel() => await ModalInstance.CancelAsync();

    private void EnglishChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.English = string.IsNullOrEmpty(selectedString) ? null : selectedString.Trim();

        StateHasChanged();
    }

    private void FrenchChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        LookupSetOptionModel.French = string.IsNullOrEmpty(selectedString) ? null : selectedString.Trim();

        StateHasChanged();
    }
}
