@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Data;
@using Syncfusion.Blazor.Buttons;
@using EDI.Web.Extensions;
@using EDI.ApplicationCore.Models;
@using Newtonsoft.Json;
@using Serilog;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserSettings UserSettings;
@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@inject IToastService toastService;
@*@inject StateContainer StateContainer;*@
@inject IAccountService accountService;
@inject IMathService mathService;  
@inject IReflectionService reflectionService; 
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="container-fluid p-1 border border-secondary EDIHeader">
    <div class="row">
        <div class="col">
            <div class="media">
                <img src="images/edi-logo.png" height="99" />
                <div class="media-body align-self-center d-none d-lg-block text-nowrap">
                    <h2 style="font-family: Arial;font-weight: bold;color: #294980;font-size: 25px;">@Translate("Early Development Instrument")</h2>
                    <h4 style="font-family: Arial;font-weight: bold;color: #294980;font-size: 15px;">@Translate("A Population-Based Measure for Communities")</h4>
                </div>
            </div>
        </div>
        <div class="col-4 text-right align-self-center  text-nowrap">
            @*<SfSwitch CssClass="handle-text" OnLabel="French" OffLabel="English" @bind-Checked="@isFrench" ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e) =>OnEnglishChange(e))"></SfSwitch>*@
            <AuthorizeView Roles="Teacher">
                <Authorized>                    
                    <button class="btn btn-success" @onclick="@(() => Save(UserSettings.UseJSON))"><i class="fa fa-save bg whiteiconcolor"></i> Save</button>
                </Authorized>
            </AuthorizeView>
            <button class="btn btn-danger" @onclick="Exit"><i class="fas fa-sign-out-alt"></i> @Translate("Class List")</button>
        </div>
    </div>
</div>



@*if (NavigationManager.Uri.Contains("TeacherProfile"))*@


@code {
        [Parameter]
        public EventCallback<string> OnQuestionnaireSave { get; set; }

    private Boolean isFrench { get; set; }
    private int completed { get; set; }
    private int required { get; set; }
    private int percentComplete { get; set; }
    private string barColor { get; set; }
    private string EntityName { get; set; }
    private int ChildId { get; set; }
    private string CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        if (UserSettings.Language == "English")
            isFrench = false;
        else
            isFrench = true;

        GetChildId();
        GetEntityName();

        //StateContainer.OnChange += StateHasChanged;
    }

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    private void Exit()
    {
        NavigationManager.NavigateTo("./children/index", true);
    }

    private void GetChildId()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Segments.Count() != 4)
        {
            NavigationManager.NavigateTo("./children/index");
        }
        else
        {
            if (!Int32.TryParse(uri.Segments[3], out int studentId))
            {
                NavigationManager.NavigateTo("./children/index");
            }
            else
            {
                ChildId = studentId;
                CurrentPage = uri.Segments[2].ToString();
            }
        }

    }
    private async Task Save(bool useJSON)
    {
        if (UserSettings.IsTeacher)
        {
            if (useJSON)
            {
                var teacherJson = await sessionStorage.GetItemAsync<string>("Teacher");
                if (teacherJson != null && teacherJson.Length > 0)
                {
                    var tempTeacher = JsonConvert.DeserializeObject<Teacher>(teacherJson);

                    await SaveDisconnectedTeacher(tempTeacher);

                    await sessionStorage.RemoveItemAsync("Teacher");
                }
            }
            else
            {
                if (UserSettings.TeacherData != null)
                {
                    await SaveDisconnectedTeacher(UserSettings.TeacherData);

                    // save child data for subsequent status checks
                    UserSettings.ChildData = UserSettings.TeacherData.Children.Single();

                    UserSettings.TeacherData = null;
                }
            }
            await OnQuestionnaireSave.InvokeAsync("Header");
        }
    }


    private async Task SaveDisconnectedTeacher(Teacher TeacherData)
    {
        GetChildId();
        GetEntityName();

        // check completeness of form
        checkCompleteNess();


        bool IsComplete = percentComplete == 100 ? true : false;

        switch (EntityName)
        {
            case "Questionnaires.Data.Demographics":
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().ModifiedDate = DateTime.Now;
                //UserSettings.DemographicsComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.Demographics.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionA":
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().ModifiedDate = DateTime.Now;
                //UserSettings.SectionAComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionA.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionB":
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().ModifiedDate = DateTime.Now;
                //UserSettings.SectionBComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionB.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionC":
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().ModifiedDate = DateTime.Now;
                //UserSettings.SectionCComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionC.IsComplete", TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().IsComplete);
                break;
            case "Questionnaires.Data.SectionD":
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().ModifiedDate = DateTime.Now;
                //UserSettings.SectionDComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionD.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionE":
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().ModifiedDate = DateTime.Now;
                //UserSettings.SectionEComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionE.IsComplete", IsComplete);
                break;
        }

        // update new to In progress on save
        var currentStatus = TeacherData.Children.Single().ChildStatusId;
        if ((Enumerations.ChildStatus)currentStatus == Enumerations.ChildStatus.New)
        {
            TeacherData.Children.Single().ChildStatusId = (int)Enumerations.ChildStatus.InProgress;
        }

        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        {
            // load the disconnected data into the context
            servicecontext.Update(TeacherData);
            try
            {
                await servicecontext.SaveChangesAsync();

                toastService.ShowSuccess("Data Saved Successfully!");
                //StateHasChanged();
            }
            catch (Exception ex)
            {
                toastService.ShowError(string.Format("{0}:{1}", ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "Error Saving Data"));

                sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "EDIHeader", "Save");
            }
        }
    }

    private void checkCompleteNess()
    {
        completed = UserSettings.QuestionsCompleted;
        required = UserSettings.QuestionsRequired;
        percentComplete = mathService.GetPercent(completed, required);

        if (percentComplete > 100)
            percentComplete = 100;

        switch (percentComplete)
        {
            case < 30:
                barColor = "bg-danger";
                break;
            case < 50:
                barColor = "bg-warning";
                break;
            case < 75:
                barColor = "bg-secondary";
                break;
            case < 99:
                barColor = "bg-info";
                break;
            case 100:
                barColor = "bg-success";
                break;
        }
        //StateHasChanged();
    }

    private void GetEntityName()
    {
        switch (CurrentPage)
        {
            case "Demographics/":
                EntityName = "Questionnaires.Data.Demographics";
                break;
            case "SectionA/":
                EntityName = "Questionnaires.Data.SectionA";
                break;
            case "SectionB/":
                EntityName = "Questionnaires.Data.SectionB";
                break;
            case "SectionC/":
                EntityName = "Questionnaires.Data.SectionC";
                break;
            case "SectionD/":
                EntityName = "Questionnaires.Data.SectionD";
                break;
            case "SectionE/":
                EntityName = "Questionnaires.Data.SectionE";
                break;
        }
    }

    private async void OnEnglishChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e)
    {
        if (e.Checked)
        {
            UserSettings.Language = "French";
        }
        else
            UserSettings.Language = "English";

        await accountService.UpdateUserLanguageAsync(UserSettings);

        var url = NavigationManager.Uri;
        //NavigationManager.NavigateTo(url);

        await sessionStorage.SetItemAsync<string>("CurrentURL", "");
        await sessionStorage.SetItemAsync<bool>("RequiredNaviBack", true);

        //StateContainer.SetCurrentURL(url);
        //StateContainer.RequiredNaviBack(true);

        await Save(UserSettings.UseJSON);
        NavigationManager.NavigateTo("./children/index");
        await InvokeAsync(() => StateHasChanged());
    }
}
