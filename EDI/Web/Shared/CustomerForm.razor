@inject NavigationManager NavigationManager
@inject ICustomerService customerService
@inject IFormService formService
@inject ServiceContext dbContext;

<EditForm Model="@CustomerModel" OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data" class="form-horizontal">
    <div class="card-body">
        <DataAnnotationsValidator />
        <div class="text-danger"><ValidationSummary /></div>


        <div class="form-group row">
            <label class="col-md-4 col-form-label" for="Name">Customer<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
            <input type="text" @bind-value="CustomerModel.Name" class="col-md-7 form-control" placeholder="Name" />
        </div>
        @if (FormEmail != null)
        {
            @if (FormEmail.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Email">Email<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Email" class="col-md-7 form-control" placeholder="Email" />
                </div>
            }
            else
            {
                @if (FormEmail.IsVisible && FormEmail.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Email">Email: </label>
                        <input type="text" @bind-value="CustomerModel.Email" class="col-md-7 form-control" placeholder="Email" />
                    </div>
                }
                else if (!FormEmail.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Email">Email: </label>
                        <input type="text" @bind-value="CustomerModel.Email" class="col-md-7 form-control" placeholder="Email" disabled />
                    </div>
                }
            }
        }
        @if (FormPhone != null)
        {
            @if (FormPhone.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Phone">Phone<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Phone" class="col-md-7 form-control" placeholder="Phone" />
                </div>
            }
            else
            {
                @if (FormPhone.IsVisible && FormPhone.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Phone">Phone: </label>
                        <input type="text" @bind-value="CustomerModel.Phone" class="col-md-7 form-control" placeholder="Phone" />
                    </div>
                }
                else if (!FormPhone.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Phone">Phone: </label>
                        <input type="text" @bind-value="CustomerModel.Phone" class="col-md-7 form-control" placeholder="Phone" disabled />
                    </div>
                }
            }
        }
        @if (FormContact != null)
        {
            @if (FormContact.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Contact">Contact<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Contact1" class="col-md-7 form-control" placeholder="First Name" />
                </div>
            }
            else
            {
                @if (FormContact.IsVisible && FormContact.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact">Contact: </label>
                        <input type="text" @bind-value="CustomerModel.Contact1" class="col-md-7 form-control" placeholder="First Name" />
                    </div>
                }
                else if (!FormContact.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact">Contact: </label>
                        <input type="text" @bind-value="CustomerModel.Contact1" class="col-md-7 form-control" placeholder="First Name" disabled />
                    </div>
                }
            }
        }
        @if (FormContact2 != null)
        {
            @if (FormContact2.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Contact2"><i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i></label>
                    <input type="text" @bind-value="CustomerModel.Contact2" class="col-md-7 form-control" placeholder="Last Name" />
                </div>
            }
            else
            {
                @if (FormContact2.IsVisible && FormContact2.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact2"></label>
                        <input type="text" @bind-value="CustomerModel.Contact2" class="col-md-7 form-control" placeholder="Last Name" />
                    </div>
                }
                else if (!FormContact2.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Contact2"></label>
                        <input type="text" @bind-value="CustomerModel.Contact2" class="col-md-7 form-control" placeholder="Last Name" disabled />
                    </div>
                }
            }
        }
        @if (FormCurrency != null)
        {
            @if (FormCurrency.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Currency">Currency<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <select class="col-md-7" value="@currencyid" @onchange="@(e =>CurrencyChange(e))">
                        @if (Currencies != null)
                        {
                            @foreach (var option in Currencies)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            }
            else
            {
                @if (FormCurrency.IsVisible && FormCurrency.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Currency">Currency: </label>
                        <select class="col-md-7" value="@currencyid" @onchange="@(e =>CurrencyChange(e))">
                            @if (Currencies != null)
                            {
                                @foreach (var option in Currencies)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (!FormCurrency.IsEnabled)
                {

                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Currency">Currency: </label>
                        <select class="col-md-7" value="@currencyid" disabled>
                            @if (Currencies != null)
                            {
                                @foreach (var option in Currencies)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
            }
        }
        @if (FormAddress1 != null)
        {
            @if (FormAddress1.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Address1">Address line 1<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.BillingAddress1" class="col-md-7 form-control" placeholder="Address 1" />
                </div>
            }
            else
            {
                @if (FormAddress1.IsVisible && FormAddress1.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address1">Address line 1: </label>
                        <input type="text" @bind-value="CustomerModel.BillingAddress1" class="col-md-7 form-control" placeholder="Address 1" />
                    </div>
                }
                else if (!FormAddress1.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address1">Address line 1: </label>
                        <input type="text" @bind-value="CustomerModel.BillingAddress1" class="col-md-7 form-control" placeholder="Address 1" disabled />
                    </div>
                }
            }
        }
        @if (FormAddress2 != null)
        {
            @if (FormAddress2.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Address2">Address line 2<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.BillingAddress2" class="col-md-7 form-control" placeholder="Address 2" />
                </div>
            }
            else
            {
                @if (FormAddress2.IsVisible && FormAddress2.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address2">Address line 2: </label>
                        <input type="text" @bind-value="CustomerModel.BillingAddress2" class="col-md-7 form-control" placeholder="Address 2" />
                    </div>
                }
                else if (!FormAddress2.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Address2">Address line 2: </label>
                        <input type="text" @bind-value="CustomerModel.BillingAddress2" class="col-md-7 form-control" placeholder="Address 2" disabled />
                    </div>
                }
            }
        }
        @if (FormCity != null)
        {
            @if (FormCity.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="City">City<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.BillingCity" class="col-md-7 form-control" placeholder="City" />
                </div>
            }
            else
            {
                @if (FormCity.IsVisible && FormCity.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="City">City: </label>
                        <input type="text" @bind-value="CustomerModel.BillingCity" class="col-md-7 form-control" placeholder="City" />
                    </div>
                }
                else if (!FormCity.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="City">City: </label>
                        <input type="text" @bind-value="CustomerModel.BillingCity" class="col-md-7 form-control" placeholder="City" disabled />
                    </div>
                }
            }
        }
        @if (FormPostal != null)
        {
            @if (FormPostal.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Postal">Postal/Zip code<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.BillingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" />
                </div>
            }
            else
            {
                @if (FormPostal.IsVisible && FormPostal.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Postal">Postal/Zip code: </label>
                        <input type="text" @bind-value="CustomerModel.BillingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" />
                    </div>
                }
                else if (!FormPostal.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Postal">Postal/Zip code: </label>
                        <input type="text" @bind-value="CustomerModel.BillingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" disabled />
                    </div>
                }
            }
        }
        @if (FormCountry != null)
        {
            @if (FormCountry.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Country">Country<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <select class="col-md-7" value="@billingcountryid" @onchange="@(e =>CountryChange(e))">
                        @if (BillingCountries != null)
                        {
                            @foreach (var option in BillingCountries)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            }
            else
            {
                @if (FormCountry.IsVisible && FormCountry.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Country">Country: </label>
                        <select class="col-md-7" value="@billingcountryid" @onchange="@(e =>CountryChange(e))">
                            @if (BillingCountries != null)
                            {
                                @foreach (var option in BillingCountries)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (!FormCountry.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Country">Country: </label>
                        <select class="col-md-7" value="@billingcountryid" disabled>
                            @if (BillingCountries != null)
                            {
                                @foreach (var option in BillingCountries)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
            }
        }
        @if (FormProvince != null)
        {
            @if (FormProvince.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Province">Province<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <select class="col-md-7" value="@billingprovinceid" @onchange="@(e =>ProvinceChange(e))">
                        @if (BillingProvinces != null)
                        {
                            @foreach (var option in BillingProvinces)
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    </select>
                </div>
            }
            else
            {
                @if (FormProvince.IsVisible && FormProvince.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Province">Province: </label>
                        <select class="col-md-7" value="@billingprovinceid" @onchange="@(e =>ProvinceChange(e))">
                            @if (BillingProvinces != null)
                            {
                                @foreach (var option in BillingProvinces)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (!FormProvince.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Province">Province: </label>
                        <select class="col-md-7" value="@billingprovinceid" disabled>
                            @if (BillingProvinces != null)
                            {
                                @foreach (var option in BillingProvinces)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
            }
        }
        @if (FormHasShippingAddress != null)
        {
            @if (FormHasShippingAddress.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="HasShippingAddress">Has a Shipping Address<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="checkbox" value="CustomerModel.HasShippingAddress" @onchange="@(e =>CheckShippingChange(e))" />
                </div>
            }
            else
            {
                @if (FormHasShippingAddress.IsVisible && FormHasShippingAddress.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="HasShippingAddress">Has a Shipping Address: </label>
                        <input type="checkbox" value="CustomerModel.HasShippingAddress" @onchange="@(e =>CheckShippingChange(e))" />
                    </div>
                }
                else if (!FormHasShippingAddress.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="HasShippingAddress">Has a Shipping Address: </label>
                        <input type="checkbox" value="CustomerModel.HasShippingAddress" disabled />
                    </div>
                }
            }
        }

        @if (CustomerModel.HasShippingAddress.HasValue && CustomerModel.HasShippingAddress.Value)
        {
            @if (FormShippingContact != null)
            {
                @if (FormShippingContact.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingContact">Ship to contact<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingContact" class="col-md-7 form-control" placeholder="Shipping Contact" />
                    </div>
                }
                else
                {
                    @if (FormShippingContact.IsVisible && FormShippingContact.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingContact">Ship to contact: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingContact" class="col-md-7 form-control" placeholder="Shipping Contact" />
                        </div>
                    }
                    else if (!FormShippingContact.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingContact">Ship to contact: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingContact" class="col-md-7 form-control" placeholder="Shipping Contact" disabled />
                        </div>
                    }
                }
            }
            @if (FormShippingCountry != null)
            {
                @if (FormShippingCountry.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Country">Country<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <select class="col-md-7" value="@shippingcountryid" @onchange="@(e =>CountryChange(e))">
                            @if (ShippingCountries != null)
                            {
                                @foreach (var option in ShippingCountries)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else
                {
                    @if (FormShippingCountry.IsVisible && FormShippingCountry.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="Country">Country: </label>
                            <select class="col-md-7" value="@shippingcountryid" @onchange="@(e =>CountryChange(e))">
                                @if (ShippingCountries != null)
                                {
                                    @foreach (var option in ShippingCountries)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                    else if (!FormShippingCountry.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="Country">Country: </label>
                            <select class="col-md-7" value="@shippingcountryid" disabled>
                                @if (ShippingCountries != null)
                                {
                                    @foreach (var option in ShippingCountries)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                }
            }
            @if (FormShippingProvince != null)
            {
                @if (FormShippingProvince.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Province">Province<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <select class="col-md-7" value="@shippingprovinceid" @onchange="@(e =>ProvinceChange(e))">
                            @if (ShippingProvinces != null)
                            {
                                @foreach (var option in ShippingProvinces)
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else
                {
                    @if (FormShippingProvince.IsVisible && FormShippingProvince.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="Province">Province: </label>
                            <select class="col-md-7" value="@shippingprovinceid" @onchange="@(e =>ProvinceChange(e))">
                                @if (ShippingProvinces != null)
                                {
                                    @foreach (var option in ShippingProvinces)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                    else if (!FormShippingProvince.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="Province">Province: </label>
                            <select class="col-md-7" value="@shippingprovinceid" disabled>
                                @if (ShippingProvinces != null)
                                {
                                    @foreach (var option in ShippingProvinces)
                                    {
                                        <option value="@option.Value">@option.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                }
            }
            @if (FormShippingAddress1 != null)
            {
                @if (FormShippingAddress1.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingAddress1">Address line 1<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingAddress1" class="col-md-7 form-control" placeholder="Address 1" />
                    </div>
                }
                else
                {
                    @if (FormShippingAddress1.IsVisible && FormShippingAddress1.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingAddress1">Address line 1: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingAddress1" class="col-md-7 form-control" placeholder="Address 1" />
                        </div>
                    }
                    else if (!FormShippingAddress1.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingAddress1">Address line 1: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingAddress1" class="col-md-7 form-control" placeholder="Address 1" disabled />
                        </div>
                    }
                }
            }
            @if (FormShippingAddress2 != null)
            {
                @if (FormShippingAddress2.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingAddress2">Address line 2<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingAddress2" class="col-md-7 form-control" placeholder="Address 2" />
                    </div>
                }
                else
                {
                    @if (FormShippingAddress2.IsVisible && FormShippingAddress2.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingAddress2">Address line 2: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingAddress2" class="col-md-7 form-control" placeholder="Address 2" />
                        </div>
                    }
                    else if (!FormShippingAddress2.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingAddress2">Address line 2: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingAddress2" class="col-md-7 form-control" placeholder="Address 2" disabled />
                        </div>
                    }
                }
            }
            @if (FormShippingCity != null)
            {
                @if (FormShippingCity.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingCity">City<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingCity" class="col-md-7 form-control" placeholder="City" />
                    </div>
                }
                else
                {
                    @if (FormShippingCity.IsVisible && FormShippingCity.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingCity">City: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingCity" class="col-md-7 form-control" placeholder="City" />
                        </div>
                    }
                    else if (!FormShippingCity.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingCity">City: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingCity" class="col-md-7 form-control" placeholder="City" disabled />
                        </div>
                    }
                }
            }
            @if (FormShippingPostal != null)
            {
                @if (FormShippingPostal.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingPostal">Postal/Zip code<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" />
                    </div>
                }
                else
                {
                    @if (FormShippingPostal.IsVisible && FormShippingPostal.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingPostal">Postal/Zip code: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" />
                        </div>
                    }
                    else if (!FormShippingPostal.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingPostal">Postal/Zip code: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingPostal" class="col-md-7 form-control" placeholder="Postal/Zip" disabled />
                        </div>
                    }
                }
            }
            @if (FormShippingPhone != null)
            {
                @if (FormShippingPhone.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="ShippingPhone">Phone<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <input type="text" @bind-value="CustomerModel.ShippingPhone" class="col-md-7 form-control" placeholder="Phone" />
                    </div>
                }
                else
                {
                    @if (FormShippingPhone.IsVisible && FormShippingPhone.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingPhone">Phone: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingPhone" class="col-md-7 form-control" placeholder="Phone" />
                        </div>
                    }
                    else if (!FormShippingPhone.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="ShippingPhone">Phone: </label>
                            <input type="text" @bind-value="CustomerModel.ShippingPhone" class="col-md-7 form-control" placeholder="Phone" disabled />
                        </div>
                    }
                }
            }
            @if (FormDeliveryInstructions != null)
            {
                @if (FormDeliveryInstructions.IsRequired)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="DeliveryInstructions">Delivery Instructions<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                        <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.DeliveryInstructions" />
                    </div>
                }
                else
                {
                    @if (FormDeliveryInstructions.IsVisible && FormDeliveryInstructions.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="DeliveryInstructions">Delivery Instructions: </label>
                            <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.DeliveryInstructions" />
                        </div>
                    }
                    else if (!FormDeliveryInstructions.IsEnabled)
                    {
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="DeliveryInstructions">Delivery Instructions: </label>
                            <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.DeliveryInstructions" disabled />
                        </div>
                    }
                }
            }

        }
        @if (FormAccountNumber != null)
        {
            @if (FormAccountNumber.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="AccountNumber">Account Number<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.AccountNumber" class="col-md-7 form-control" placeholder="Account Number" />
                </div>
            }
            else
            {
                @if (FormAccountNumber.IsVisible && FormAccountNumber.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="AccountNumber">Account Number: </label>
                        <input type="text" @bind-value="CustomerModel.AccountNumber" class="col-md-7 form-control" placeholder="Account Number" />
                    </div>
                }
                else if (!FormAccountNumber.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="AccountNumber">Account Number: </label>
                        <input type="text" @bind-value="CustomerModel.AccountNumber" class="col-md-7 form-control" placeholder="Account Number" disabled />
                    </div>
                }
            }
        }
        @if (FormFax != null)
        {
            @if (FormFax.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Fax">Fax<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Fax" class="col-md-7 form-control" placeholder="Fax" />
                </div>
            }
            else
            {
                @if (FormFax.IsVisible && FormFax.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Fax">Fax: </label>
                        <input type="text" @bind-value="CustomerModel.Fax" class="col-md-7 form-control" placeholder="Fax" />
                    </div>
                }
                else if (!FormFax.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Fax">Fax: </label>
                        <input type="text" @bind-value="CustomerModel.Fax" class="col-md-7 form-control" placeholder="Fax" disabled />
                    </div>
                }
            }
        }
        @if (FormMobile != null)
        {
            @if (FormMobile.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Mobile">Mobile<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Mobile" class="col-md-7 form-control" placeholder="Mobile" />
                </div>
            }
            else
            {
                @if (FormMobile.IsVisible && FormMobile.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Mobile">Mobile: </label>
                        <input type="text" @bind-value="CustomerModel.Mobile" class="col-md-7 form-control" placeholder="Mobile" />
                    </div>
                }
                else if (!FormMobile.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Mobile">Mobile: </label>
                        <input type="text" @bind-value="CustomerModel.Mobile" class="col-md-7 form-control" placeholder="Mobile" disabled />
                    </div>
                }
            }
        }
        @if (FormTollFree != null)
        {
            @if (FormTollFree.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="TollFree">Toll Free<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.TollFree" class="col-md-7 form-control" placeholder="Toll Free" />
                </div>
            }
            else
            {
                @if (FormTollFree.IsVisible && FormTollFree.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="TollFree">Toll Free: </label>
                        <input type="text" @bind-value="CustomerModel.TollFree" class="col-md-7 form-control" placeholder="Toll Free" />
                    </div>
                }
                else if (!FormTollFree.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="TollFree">Toll Free: </label>
                        <input type="text" @bind-value="CustomerModel.TollFree" class="col-md-7 form-control" placeholder="Toll Free" disabled />
                    </div>
                }
            }
        }
        @if (FormWebsite != null)
        {
            @if (FormWebsite.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="Website">Website<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <input type="text" @bind-value="CustomerModel.Website" class="col-md-7 form-control" placeholder="Website" />
                </div>
            }
            else
            {
                @if (FormWebsite.IsVisible && FormWebsite.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Website">Website: </label>
                        <input type="text" @bind-value="CustomerModel.Website" class="col-md-7 form-control" placeholder="Website" />
                    </div>
                }
                else if (!FormWebsite.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="Website">Website: </label>
                        <input type="text" @bind-value="CustomerModel.Website" class="col-md-7 form-control" placeholder="Website" disabled />
                    </div>
                }
            }
        }
        @if (FormInternalNotes != null)
        {
            @if (FormInternalNotes.IsRequired)
            {
                <div class="form-group row">
                    <label class="col-md-4 col-form-label" for="InternalNotes">Internal notes<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                    <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.InternalNotes" />
                </div>
            }
            else
            {
                @if (FormInternalNotes.IsVisible && FormInternalNotes.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="InternalNotes">Internal notes: </label>
                        <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.InternalNotes" />
                    </div>
                }
                else if (!FormInternalNotes.IsEnabled)
                {
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label" for="InternalNotes">Internal notes: </label>
                        <textarea class="col-md-7 col-form-label" rows="8" @bind="CustomerModel.InternalNotes" disabled/>   
                    </div>
                }
            }
        }

    </div>
    <div class="card-footer">
        <button type="submit" class="savebutton"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public CustomerItemViewModel CustomerModel { get; set; }

    [Parameter]
    public EventCallback HandleValidSubmit { get; set; }

    public FormItemViewModel FormEmail { get; set; }
    public FormItemViewModel FormPhone { get; set; }
    public FormItemViewModel FormContact { get; set; }
    public FormItemViewModel FormContact2 { get; set; }
    public FormItemViewModel FormCurrency { get; set; }
    public FormItemViewModel FormAddress1 { get; set; }
    public FormItemViewModel FormAddress2 { get; set; }
    public FormItemViewModel FormCity { get; set; }
    public FormItemViewModel FormPostal { get; set; }
    public FormItemViewModel FormCountry { get; set; }
    public FormItemViewModel FormProvince { get; set; }
    public FormItemViewModel FormHasShippingAddress { get; set; }
    public FormItemViewModel FormShippingContact { get; set; }
    public FormItemViewModel FormShippingCountry { get; set; }
    public FormItemViewModel FormShippingProvince { get; set; }
    public FormItemViewModel FormShippingAddress1 { get; set; }
    public FormItemViewModel FormShippingAddress2 { get; set; }
    public FormItemViewModel FormShippingCity { get; set; }
    public FormItemViewModel FormShippingPostal { get; set; }
    public FormItemViewModel FormShippingPhone { get; set; }
    public FormItemViewModel FormDeliveryInstructions { get; set; }
    public FormItemViewModel FormAccountNumber { get; set; }
    public FormItemViewModel FormFax { get; set; }
    public FormItemViewModel FormMobile { get; set; }
    public FormItemViewModel FormTollFree { get; set; }
    public FormItemViewModel FormWebsite { get; set; }
    public FormItemViewModel FormInternalNotes { get; set; }

    public IEnumerable<SelectListItem> BillingCountries { get; set; }

    public IEnumerable<SelectListItem> BillingProvinces { get; set; }

    public IEnumerable<SelectListItem> ShippingCountries { get; set; }

    public IEnumerable<SelectListItem> ShippingProvinces { get; set; }

    public IEnumerable<SelectListItem> Currencies { get; set; }

    public string currencyid { get; set; }

    public string billingcountryid { get; set; }

    public string billingprovinceid { get; set; }

    public string shippingcountryid { get; set; }

    public string shippingprovinceid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FormEmail = await formService.GetFormItem("CustomerForm", "Email", 1);
        if (FormEmail.Id == 0)
        {
            FormEmail.FormName = "CustomerForm";
            FormEmail.FieldName = "Email";
            FormEmail.Order = 1;
        }

        FormPhone = await formService.GetFormItem("CustomerForm", "Phone", 2);
        if (FormPhone.Id == 0)
        {
            FormPhone.FormName = "CustomerForm";
            FormPhone.FieldName = "Phone";
            FormPhone.Order = 2;
        }

        FormContact = await formService.GetFormItem("CustomerForm", "Contact", 3);
        if (FormContact.Id == 0)
        {
            FormContact.FormName = "CustomerForm";
            FormContact.FieldName = "Contact";
            FormContact.Order = 3;
        }

        FormContact2 = await formService.GetFormItem("CustomerForm", "Contact2", 4);
        if (FormContact2.Id == 0)
        {
            FormContact2.FormName = "CustomerForm";
            FormContact2.FieldName = "Contact2";
            FormContact2.Order = 4;
        }

        FormCurrency = await formService.GetFormItem("CustomerForm", "Currency", 5);
        if (FormCurrency.Id == 0)
        {
            FormCurrency.FormName = "CustomerForm";
            FormCurrency.FieldName = "Currency";
            FormCurrency.Order = 5;
        }

        FormAddress1 = await formService.GetFormItem("CustomerForm", "Address1", 6);
        if (FormAddress1.Id == 0)
        {
            FormAddress1.FormName = "CustomerForm";
            FormAddress1.FieldName = "Address1";
            FormAddress1.Order = 6;
        }

        FormAddress2 = await formService.GetFormItem("CustomerForm", "Address2", 7);
        if (FormAddress2.Id == 0)
        {
            FormAddress2.FormName = "CustomerForm";
            FormAddress2.FieldName = "Address2";
            FormAddress2.Order = 7;
        }

        FormCity = await formService.GetFormItem("CustomerForm", "City", 8);
        if (FormCity.Id == 0)
        {
            FormCity.FormName = "CustomerForm";
            FormCity.FieldName = "City";
            FormCity.Order = 8;
        }

        FormPostal = await formService.GetFormItem("CustomerForm", "Postal", 9);
        if (FormPostal.Id == 0)
        {
            FormPostal.FormName = "CustomerForm";
            FormPostal.FieldName = "Postal";
            FormPostal.Order = 9;
        }

        FormCountry = await formService.GetFormItem("CustomerForm", "Country", 10);
        if (FormCountry.Id == 0)
        {
            FormCountry.FormName = "CustomerForm";
            FormCountry.FieldName = "Country";
            FormCountry.Order = 10;
        }

        FormProvince = await formService.GetFormItem("CustomerForm", "Province", 11);
        if (FormProvince.Id == 0)
        {
            FormProvince.FormName = "CustomerForm";
            FormProvince.FieldName = "Province";
            FormProvince.Order = 11;
        }

        FormHasShippingAddress = await formService.GetFormItem("CustomerForm", "HasShippingAddress", 12);
        if (FormHasShippingAddress.Id == 0)
        {
            FormHasShippingAddress.FormName = "CustomerForm";
            FormHasShippingAddress.FieldName = "HasShippingAddress";
            FormHasShippingAddress.Order = 12;
        }

        FormShippingContact = await formService.GetFormItem("CustomerForm", "ShippingContact", 13);
        if (FormShippingContact.Id == 0)
        {
            FormShippingContact.FormName = "CustomerForm";
            FormShippingContact.FieldName = "ShippingContact";
            FormShippingContact.Order = 13;
        }

        FormShippingCountry = await formService.GetFormItem("CustomerForm", "ShippingCountry", 14);
        if (FormShippingCountry.Id == 0)
        {
            FormShippingCountry.FormName = "CustomerForm";
            FormShippingCountry.FieldName = "ShippingCountry";
            FormShippingCountry.Order = 14;
        }

        FormShippingProvince = await formService.GetFormItem("CustomerForm", "ShippingProvince", 15);
        if (FormShippingProvince.Id == 0)
        {
            FormShippingProvince.FormName = "CustomerForm";
            FormShippingProvince.FieldName = "ShippingProvince";
            FormShippingProvince.Order = 15;
        }

        FormShippingAddress1 = await formService.GetFormItem("CustomerForm", "ShippingAddress1", 16);
        if (FormShippingAddress1.Id == 0)
        {
            FormShippingAddress1.FormName = "CustomerForm";
            FormShippingAddress1.FieldName = "ShippingAddress1";
            FormShippingAddress1.Order = 16;
        }

        FormShippingAddress2 = await formService.GetFormItem("CustomerForm", "ShippingAddress2", 17);
        if (FormShippingAddress2.Id == 0)
        {
            FormShippingAddress2.FormName = "CustomerForm";
            FormShippingAddress2.FieldName = "ShippingAddress2";
            FormShippingAddress2.Order = 17;
        }

        FormShippingCity = await formService.GetFormItem("CustomerForm", "ShippingCity", 18);
        if (FormShippingCity.Id == 0)
        {
            FormShippingCity.FormName = "CustomerForm";
            FormShippingCity.FieldName = "ShippingCity";
            FormShippingCity.Order = 18;
        }

        FormShippingPostal = await formService.GetFormItem("CustomerForm", "ShippingPostal", 19);
        if (FormShippingPostal.Id == 0)
        {
            FormShippingPostal.FormName = "CustomerForm";
            FormShippingPostal.FieldName = "ShippingPostal";
            FormShippingPostal.Order = 19;
        }

        FormShippingPhone = await formService.GetFormItem("CustomerForm", "ShippingPhone", 20);
        if (FormShippingPhone.Id == 0)
        {
            FormShippingPhone.FormName = "CustomerForm";
            FormShippingPhone.FieldName = "ShippingPhone";
            FormShippingPhone.Order = 20;
        }

        FormDeliveryInstructions = await formService.GetFormItem("CustomerForm", "DeliveryInstructions", 21);
        if (FormDeliveryInstructions.Id == 0)
        {
            FormDeliveryInstructions.FormName = "CustomerForm";
            FormDeliveryInstructions.FieldName = "DeliveryInstructions";
            FormDeliveryInstructions.Order = 21;
        }

        FormAccountNumber = await formService.GetFormItem("CustomerForm", "AccountNumber", 22);
        if (FormAccountNumber.Id == 0)
        {
            FormAccountNumber.FormName = "CustomerForm";
            FormAccountNumber.FieldName = "AccountNumber";
            FormAccountNumber.Order = 22;
        }

        FormFax = await formService.GetFormItem("CustomerForm", "Fax", 23);
        if (FormFax.Id == 0)
        {
            FormFax.FormName = "CustomerForm";
            FormFax.FieldName = "Fax";
            FormFax.Order = 23;
        }

        FormMobile = await formService.GetFormItem("CustomerForm", "Mobile", 24);
        if (FormMobile.Id == 0)
        {
            FormMobile.FormName = "CustomerForm";
            FormMobile.FieldName = "Mobile";
            FormMobile.Order = 24;
        }

        FormTollFree = await formService.GetFormItem("CustomerForm", "TollFree", 25);
        if (FormTollFree.Id == 0)
        {
            FormTollFree.FormName = "CustomerForm";
            FormTollFree.FieldName = "TollFree";
            FormTollFree.Order = 25;
        }

        FormWebsite = await formService.GetFormItem("CustomerForm", "Website", 26);
        if (FormWebsite.Id == 0)
        {
            FormWebsite.FormName = "CustomerForm";
            FormWebsite.FieldName = "Website";
            FormWebsite.Order = 26;
        }

        FormInternalNotes = await formService.GetFormItem("CustomerForm", "InternalNotes", 27);
        if (FormInternalNotes.Id == 0)
        {
            FormInternalNotes.FormName = "CustomerForm";
            FormInternalNotes.FieldName = "InternalNotes";
            FormInternalNotes.Order = 27;
        }

        Currencies = await customerService.GetCurrencies();

        if (CustomerModel.CurrencyID.HasValue)
        {
            currencyid = CustomerModel.CurrencyID.Value.ToString();
        }
        else
        {
            var cid = dbContext.Currency.Where(p => p.Name == "CAD - Canadian dollar").Select(p => p.Id).FirstOrDefault();
            currencyid = cid.ToString();
        }

        BillingCountries = await customerService.GetCountries();

        if (CustomerModel.BillingCountryID.HasValue)
        {
            billingcountryid = CustomerModel.BillingCountryID.Value.ToString();
            BillingProvinces = await customerService.GetProvinces(CustomerModel.BillingCountryID.Value);
        }
        else
        {
            //billingcountryid = "0";
            //BillingProvinces = await customerService.GetProvinces(0);

            var cid = dbContext.Country.Where(p => p.Name == "Canada").Select(p => p.Id).FirstOrDefault();
            billingcountryid = cid.ToString();
            CustomerModel.BillingCountryID = cid;
            BillingProvinces = await customerService.GetProvinces(cid);
        }


        if (CustomerModel.BillingProvinceID.HasValue)
        {
            billingprovinceid = CustomerModel.BillingProvinceID.Value.ToString();
        }
        else
        {
            //billingprovinceid = "0";
            var pid = dbContext.Province.Where(p => p.Name == "Ontario").Select(p => p.Id).FirstOrDefault();
            CustomerModel.BillingProvinceID = pid;
            billingprovinceid = pid.ToString();
        }

        ShippingCountries = await customerService.GetCountries();

        if (CustomerModel.ShippingCountryID.HasValue)
        {
            shippingcountryid = CustomerModel.ShippingCountryID.Value.ToString();
            ShippingProvinces = await customerService.GetProvinces(CustomerModel.ShippingCountryID.Value);
        }
        else
        {
            //shippingcountryid = "0";
            //ShippingProvinces = await customerService.GetProvinces(0);

            var cid = dbContext.Country.Where(p => p.Name == "Canada").Select(p => p.Id).FirstOrDefault();
            shippingcountryid = cid.ToString();
            ShippingProvinces = await customerService.GetProvinces(cid);
        }


        if (CustomerModel.ShippingProvinceID.HasValue)
        {
            shippingprovinceid = CustomerModel.ShippingProvinceID.Value.ToString();
        }
        else
        {
            //shippingprovinceid = "0";
            var pid = dbContext.Province.Where(p => p.Name == "Ontario").Select(p => p.Id).FirstOrDefault();
            shippingprovinceid = pid.ToString();
        }
    }

    private void CurrencyChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        CustomerModel.CurrencyID = null;

        if (int.TryParse(selectedString, out int etid))
        {
            CustomerModel.CurrencyID = etid;
        }
    }

    private async Task CountryChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        billingprovinceid = "0";

        BillingProvinces = await customerService.GetProvinces(0);

        CustomerModel.BillingCountryID = null;

        if (int.TryParse(selectedString, out int ctid))
        {
            CustomerModel.BillingCountryID = ctid;
            BillingProvinces = await customerService.GetProvinces(ctid);
        }
    }

    private async Task ShippingCountryChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        shippingprovinceid = "0";

        ShippingProvinces = await customerService.GetProvinces(0);

        CustomerModel.ShippingCountryID = null;

        if (int.TryParse(selectedString, out int ctid))
        {
            CustomerModel.ShippingCountryID = ctid;
            ShippingProvinces = await customerService.GetProvinces(ctid);
        }
    }

    private void ProvinceChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        CustomerModel.BillingProvinceID = null;

        if (int.TryParse(selectedString, out int itid))
        {
            CustomerModel.BillingProvinceID = itid;
        }
    }

    private void ShippingProvinceChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        CustomerModel.ShippingProvinceID = null;

        if (int.TryParse(selectedString, out int itid))
        {
            CustomerModel.ShippingProvinceID = itid;
        }
    }

    private void CheckShippingChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        CustomerModel.HasShippingAddress = null;

        if (bool.TryParse(selectedString, out bool hasshipping))
        {
            CustomerModel.HasShippingAddress = hasshipping;
        }
    }
}
