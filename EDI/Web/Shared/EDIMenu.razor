@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Buttons;
@using EDI.Web.Extensions;
@using EDI.ApplicationCore.Models;
@using Newtonsoft.Json;
@using Serilog;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserSettings UserSettings;
@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@inject IToastService toastService;
@inject IAccountService accountService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<div class="pl-4 navbar navbar-dark">
    <p class="navbar-brand">Questionnaires</p>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>
<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @foreach (var questionnaire in questionnaires)
        {
            string url = string.Format("EDIQuestionnaires/{0}/{1}", questionnaire.QuestionnaireName.Replace(" ", ""), ChildId);
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="@url" Match="NavLinkMatch.All">
                    <span class="@iconCSS" style="color:@color" aria-hidden="true"></span>&nbsp; @questionnaire.QuestionnaireName
                </NavLink>
            </li>

        }
    </ul>
</div>
<div class="flex-column">
    <input id="ShowLabels" type="checkbox" />
    <label for="ShowLabels" title="Radio Labels">Radio Labels</label>
    <br />

    <select name="fontsize" id="fontsize">
        <option value="1em">1</option>
        <option value="1.25em">1.25</option>
        <option value="1.5em">1.5</option>
        <option value="1.75em">1.75</option>
    </select>
    <label for="fontsize" title="Font Size">Font Size</label>
    <br />


    <SfSwitch CssClass="handle-text" OnLabel="French" OffLabel="English" @bind-Checked="@isFrench" ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e) =>OnEnglishChange(e))"></SfSwitch>
    @*<label for="Language" title="English\French">English\French</label>*@
    <br />

    <input id="Validation" type="checkbox" />
    <label for="Validation" title="Show Validation">Validation</label>
    <br />
</div>


@code {
    // old icon <span class="oi oi-list-rich" aria-hidden="true"></span>
    private Boolean isFrench { get; set; }

    private bool IsComplete { get; set; } = false;
    // get this value from the entity field IsComplete on each

    private int ChildId { get; set; }

    private bool isChildQuestionnaire;
    private List<Questionnaire> questionnaires;
    private bool collapseNavMenu = false;
    private bool expandMenu;
    private string iconCSS = "";
    private string color = "";

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        expandMenu = false;
    }

    private void ToggleSubmenu()
    {
        expandMenu = !expandMenu;
    }


    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            if (IsComplete)
            {
                iconCSS = "far fa-check-square fa-lg";
                color = "green";
            }
            else
            {
                iconCSS = "far fa-square fa-lg";
                color = "red";
            }
            if (UserSettings.Language == "English")
                isFrench = false;
            else
                isFrench = true;

            GetChildId();
            //isChildQuestionnaire = dbContext.Questionnaires.Where(c => c.Id == QuestionnaireId).Select(c => c.IsChildQuestionnaire).Single();
            getData();
        }
    }

    private void getData()
    {
        questionnaires = dbContext.Questionnaires.Where(c => c.IsChildQuestionnaire == true).OrderBy(c => c.Sequence).ToList();
    }

    private void GetChildId()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Segments.Count() != 4)
        {
            NavigationManager.NavigateTo("./children/index");
        }
        else
        {
            if (!Int32.TryParse(uri.Segments[3], out int studentId))
            {
                NavigationManager.NavigateTo("./children/index");
            }
            else
            {
                ChildId = studentId;
            }
        }

    }


    private async void OnEnglishChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> e)
    {
        if (e.Checked)
        {
            UserSettings.Language = "French";
        }
        else
            UserSettings.Language = "English";

        await accountService.UpdateUserLanguageAsync(UserSettings);

        var url = NavigationManager.Uri;
        //NavigationManager.NavigateTo(url);

        await sessionStorage.SetItemAsync<string>("CurrentURL", url);
        await sessionStorage.SetItemAsync<bool>("SetEnglishSwitchChangeNaviBack", true);

        //StateContainer.SetCurrentURL(url);
        //StateContainer.SetEnglishSwitchChangeNaviBack(true);

        Save();
        NavigationManager.NavigateTo("./children/index");
        await InvokeAsync(() => StateHasChanged());
    }

    private async void Save()
    {
        var teacherJson = await sessionStorage.GetItemAsync<string>("Teacher");
        //if (StateContainer.TeacherData != null)
        if (teacherJson != null && teacherJson.Length > 0)
        {
            var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
            optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
            using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
            {
                //servicecontext.Update(StateContainer.TeacherData);

                var tempTeacher = JsonConvert.DeserializeObject<Teacher>(teacherJson);

                servicecontext.Update(tempTeacher);
                try
                {
                    await servicecontext.SaveChangesAsync();
                    //StateContainer.SetTeacher(null);
                    await sessionStorage.SetItemAsync<string>("Teacher", "");

                    toastService.ShowSuccess("Data Saved Successfully!");
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    toastService.ShowError(string.Format("{0}:{1}", ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "Error Saving Data"));

                    sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "EDIHeader", "Save");
                }
            }
        }
    }
}