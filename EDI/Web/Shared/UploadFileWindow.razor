@using Syncfusion.Blazor.Inputs
@inject IModalService ModalService


<div class="simple-form" style="width:600px;">
    @if (!string.IsNullOrEmpty(@Message))
    {
        <div class="text-success">@Message</div><br /><br />
    }

    @if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="text-danger">@ErrorMessage</div><br /><br />
    }
    <SfUploader AllowedExtensions=".xlsx" AutoUpload="false" Multiple="false">
        <UploaderEvents ValueChange="OnChange"></UploaderEvents>
    </SfUploader><br />
    <button @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [CascadingParameter] ModalParameters Parameters { get; set; }

    IFileListEntry file;

    private string Message { get; set; }
    private string ErrorMessage { get; set; }

    private string DataName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataName = Parameters.Get<string>("DataName");
    }

    private async void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            if (DataName == "Customers")
            {
                //ErrorViewModel result = await customerService.UploadCustomerData(file);
                ErrorViewModel result = new ErrorViewModel();

                if (string.IsNullOrEmpty(result.errormessage))
                {
                    result.message = "Data uploaded successfully.";
                    ModalService.Close(ModalResult.Ok<ErrorViewModel>(result));
                }
                else
                {
                    ErrorMessage = result.errormessage;
                    StateHasChanged();
                }
            }
            else
            {
                ErrorViewModel result = new ErrorViewModel();

                result.message = "Data uploaded successfully.";
                ModalService.Close(ModalResult.Ok<ErrorViewModel>(result));
            }
        }
    }

    void Cancel()
    {
        ModalService.Cancel();
    }
}
