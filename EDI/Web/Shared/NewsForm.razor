@inject NavigationManager NavigationManager
@inject INewsFeedService newsFeedService
@inject ISharedService sharedService
@inject IAccountService accountService
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@using Syncfusion.Blazor.RichTextEditor

@if (IsViewOnly)
{
    <div class="card-text">@((MarkupString)NewsFeedModel.Text)</div>
    <br />
}
else
{
    <EditForm Model="@NewsFeedModel" OnValidSubmit="@HandleValidSubmit" enctype="multipart/form-data" class="form-horizontal">
        <div class="card-body">
            <DataAnnotationsValidator />
            <div class="text-danger"><ValidationSummary /></div>

            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="Title">Title<i class="fa fa-asterisk fa-1x text-danger" data-toggle="tooltip" data-placement="right" title="Required field."></i>: </label>
                <input type="text" class="col-md-7 col-form-label" @bind="NewsFeedModel.Title" />
            </div>
            <div class="form-group row">
                <div class="col-md-11 col-form-label">
                    <RichTextEditor @ref="rte" BindValue="@NewsFeedModel.Text" />
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="Summary">Summary: </label>
                <textarea class="col-md-7 col-form-label" rows="4" @bind="NewsFeedModel.Summary" />
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="Author">Author: </label>
                <input type="text" class="col-md-3 col-form-label" @bind="NewsFeedModel.Author" />
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="ValidFrom">Valid From: </label>
                <InputDate @bind-Value="NewsFeedModel.ValidFrom" class="col-md-3 form-control" format-value="YYYY-MM-DD" />
            </div>
            <div class="form-group row">
                <label class="col-md-4 col-form-label" for="ValidTo">Valid To: </label>
                <InputDate @bind-Value="NewsFeedModel.ValidTo" class="col-md-3 form-control" format-value="YYYY-MM-DD" />
            </div>
            <ProvincesYears @ref="provinces" ProvinceConfigModel="@ProvinceConfigModel" />
        </div>
        @if (!IsViewOnly)
        {
            <div class="card-footer">
                <button type="submit" class="savebutton"><i class="fa fa-save bg whiteiconcolor"></i> Submit</button>
            </div>
        }
    </EditForm>
}



@code {
    [Parameter]
    public NewsFeedItemViewModel NewsFeedModel { get; set; }

    [Parameter]
    public EventCallback HandleValidSubmit { get; set; }

    [Parameter]
    public bool IsViewOnly { get; set; }

    public IEnumerable<SelectListItem> Coordinates { get; set; }

    public string coordinateid { get; set; }

    public bool isadmin { get; set; }

    public bool iscoordinator { get; set; }

    public bool isteacher { get; set; }

    //Begin RichTextEditorToolbar
    SfRichTextEditor RteObj;

    public static object[] tools = new object[]{
        "Bold", "Italic", "Underline", "StrikeThrough",
        "FontName", "FontSize", "FontColor", "BackgroundColor",
        "LowerCase", "UpperCase", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList",
        "Outdent", "Indent", "|", "CreateTable",
        "CreateNewsFeed", "Image", "|", "ClearFormat",
        "SourceCode", "|", "Undo", "Redo"
    };

    public RichTextEditor rte = new RichTextEditor();
    // End RichText Editor

    public ProvincesYears provinces = new ProvincesYears();
    private BaseModelProvince ProvinceConfigModel { get; set; } = new BaseModelProvince();

    protected override async Task OnInitializedAsync()
    {
        if (!IsViewOnly)
        {
            ProvinceConfigModel.YearID = NewsFeedModel.YearId;

            if (!NewsFeedModel.ValidFrom.HasValue)
            {
                NewsFeedModel.ValidFrom = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            }

            if (!NewsFeedModel.ValidTo.HasValue)
            {
                NewsFeedModel.ValidTo = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            }

            ProvinceConfigModel.Alberta = NewsFeedModel.Alberta;
            ProvinceConfigModel.BritishColumbia = NewsFeedModel.BritishColumbia;
            ProvinceConfigModel.Manitoba = NewsFeedModel.Manitoba;
            ProvinceConfigModel.NewBrunswick = NewsFeedModel.NewBrunswick;
            ProvinceConfigModel.NewfoundlandandLabrador = NewsFeedModel.NewfoundlandandLabrador;
            ProvinceConfigModel.NovaScotia = NewsFeedModel.NovaScotia;
            ProvinceConfigModel.Nunavut = NewsFeedModel.Nunavut;
            ProvinceConfigModel.Ontario = NewsFeedModel.Ontario;
            ProvinceConfigModel.PrinceEdwardIsland = NewsFeedModel.PrinceEdwardIsland;
            ProvinceConfigModel.Quebec = NewsFeedModel.Quebec;
            ProvinceConfigModel.Saskatchewan = NewsFeedModel.Saskatchewan;
            ProvinceConfigModel.YukonTerritory = NewsFeedModel.YukonTerritory;
            ProvinceConfigModel.NorthwestTerritories = NewsFeedModel.NorthwestTerritories;

        }
    }
}
