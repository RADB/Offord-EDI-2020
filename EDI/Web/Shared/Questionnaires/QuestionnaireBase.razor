<!-- https://chrissainty.com/building-custom-input-components-for-blazor-using-inputbase/
    https://blazor-university.com/templating-components-with-renderfragements/
    -->
@using System.Linq.Dynamic.Core;
@using EDI.Web.Shared.Modals;
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject ISharedService sharedService;

@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@implements IDisposable

@code
{
    [CascadingParameter] public IModalService ModalService { get; set; }
    
    [Parameter]
    public QuestionnairesConfiguration Config { get; set; }

    [Parameter]
    public Teacher data { get; set; }

    //public ModalPartViewModel ModalPartModel { get; set; }

    public string QuestionText { get; set; }
    public string HelpTextEnglish { get; set; }
    public bool ReadonlyQuestion { get; set; }

    //public int _optionCount = 0;
    public string _optionLabel;

    protected override async Task OnInitializedAsync()
    {

    }

    public List<LookupSetOption> GetLookupSetOptions(int LookupSetId)
    {
        // convert to loading the object rather than another list
        return dbContext.LookupSetOptions.Where(o => o.LookupSetId == LookupSetId).OrderBy(o => o.Sequence).ToList();
    }

   

    protected async void ShowModal(string ModalTitle, string ModalBody)
    {
        var options = new ModalOptions();
        options.HideHeader = false;
        options.HideCloseButton = false;
        options.UseCustomLayout = true;

        var parameters = new ModalParameters();
        parameters.Add(nameof(CustomBootstrapModal.ModalBody), ModalBody);
        parameters.Add(nameof(CustomBootstrapModal.ModalTitle), ModalTitle);
        var modal = ModalService.Show<CustomBootstrapModal>(ModalTitle,parameters, options);
        var result = await modal.Result;
    }

    public string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    public void GetQuestionText()
    {
        // get the Question Text
        QuestionText = sharedService.GetConfigText(Config);

        // get the Help Text if the question has help
        if (Config.HasHelp)
            HelpTextEnglish = sharedService.GetHelpText(Config);
    }

    public void gotoURL()
    {
        StateContainer.OnChange += StateHasChanged;
        StateContainer.SetCurrentURL(NavigationManager.Uri);
        string url = string.Format("./QuestionnaireConfigurations/edit/{0}/{1}", Config.Id, Config.QuestionnaireId);
        NavigationManager.NavigateTo(url);
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
