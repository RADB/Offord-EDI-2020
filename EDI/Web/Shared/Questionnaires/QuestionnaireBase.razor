<!-- https://chrissainty.com/building-custom-input-components-for-blazor-using-inputbase/
    https://blazor-university.com/templating-components-with-renderfragements/
    -->
@using System.Linq.Dynamic.Core;
@using EDI.Web.Shared.Modals;
@using Newtonsoft.Json;
@using EDI.Web.Extensions;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject ISharedService sharedService;
@inject NavigationManager NavigationManager
@inject IReflectionService reflectionService;
@inject IToastService toastService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@implements IDisposable

@code
{
        [CascadingParameter] public IModalService ModalService { get; set; }

        [Parameter]
        public QuestionnairesConfiguration Config { get; set; }

        [Parameter]
        public Teacher data { get; set; }

    //public ModalPartViewModel ModalPartModel { get; set; }

    public string QuestionText { get; set; }
    public string HelpTextEnglish { get; set; }
    public string ValidationCss { get; set; }
    public bool ReadonlyQuestion { get; set; }
    public bool? Valid { get; set; }
    public byte CompletionPercentage { get; set; }

    //public int _optionCount = 0;
    public string _optionLabel;

    protected override async Task OnInitializedAsync()
    {
        //CompletionCheck(0,0);
        //if (Config.IsRequired)
        //{
        //    UserSettings.QuestionsRequired += 1;
        //    reflectionService.SetFieldValue(data, Config.EntityName, "RequiredQuestions", UserSettings.QuestionsRequired.ToString());
        //}
    }

    public List<LookupSetOption> GetLookupSetOptions(int LookupSetId)
    {
        // convert to loading the object rather than another list
        return dbContext.LookupSetOptions.Where(o => o.LookupSetId == LookupSetId).OrderBy(o => o.Sequence).ToList();
    }

    public int CompletionCheck(decimal Required, decimal Completed)
    {
        int percentComplete;
        try
        {
            percentComplete = (int)(Math.Round((Completed / Required), 0, MidpointRounding.AwayFromZero));
        }
        catch (Exception)
        {

            percentComplete = 0;
        }

        return percentComplete;
    }

    protected async void ShowModal(string ModalTitle, string ModalBody)
    {
        var options = new ModalOptions();
        options.HideHeader = false;
        options.HideCloseButton = false;
        options.UseCustomLayout = true;

        var parameters = new ModalParameters();
        parameters.Add(nameof(CustomBootstrapModal.ModalBody), ModalBody);
        parameters.Add(nameof(CustomBootstrapModal.ModalTitle), ModalTitle);
        var modal = ModalService.Show<CustomBootstrapModal>(ModalTitle, parameters, options);
        var result = await modal.Result;
    }

    public string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    public void GetQuestionText()
    {
        // get the Question Text
        QuestionText = sharedService.GetConfigText(Config);

        // get the Help Text if the question has help
        if (Config.HasHelp)
            HelpTextEnglish = sharedService.GetHelpText(Config);
    }

    public void gotoURL()
    {
        //StateContainer.OnChange += StateHasChanged;
        //UserSettings.SetCurrentURL(NavigationManager.Uri);
        string url = string.Format("./QuestionnaireConfigurations/edit/{0}/{1}", Config.Id, Config.QuestionnaireId);
        NavigationManager.NavigateTo(url);
    }

    public void Dispose()
    {
        //StateContainer.OnChange -= StateHasChanged;
    }

    public async void CompletedQuestion(string currentValue)
    {
        if (!string.IsNullOrEmpty(currentValue))
        {
            // only count answers to required quesions
            _userSettings.QuestionsCompleted++;
            //var comp = await sessionStorage.GetItemAsync<int>("QuestionsCompleted");
            //await sessionStorage.SetItemAsync<int>("QuestionsCompleted", comp++);

            if (_userSettings.Validation)
            {
                ValidationCss = "Valid";
                Valid = true;
            }
        }
        else
        {
            //_userSettings.QuestionsCompleted--;
            if (_userSettings.Validation)
            {

                ValidationCss = "InValid";
                Valid = false;
            }
        }
        reflectionService.SetFieldValue(data, Config.EntityName, "CompletedQuestions", _userSettings.QuestionsCompleted.ToString());
        StateHasChanged();
    }

    public async void Validation(string currentValue, bool addition)
    {
        if (addition)
        {
            // add 1 to the total questions
            _userSettings.QuestionsTotal++;

            if (Config.IsRequired)
            {
                // add 1 to required questions
                _userSettings.QuestionsRequired++;

                if (!string.IsNullOrEmpty(currentValue))
                {
                    // only count answers to required quesions
                    _userSettings.QuestionsCompleted++;

                }
                else
                {

                }
                //reflectionService.SetFieldValue(data, Config.EntityName, "RequiredQuestions", _userSettings.QuestionsRequired.ToString());

                //reflectionService.SetFieldValue(teacherData, config.EntityName, "TotalQuestions", UserSettings.QuestionsTotal.ToString());
                //reflectionService.SetFieldValue(data, Config.EntityName, "CompletedQuestions", _userSettings.QuestionsCompleted.ToString());
                //StateHasChanged();
            }
        }
        if (_userSettings.Validation)
        {
            if (Config.IsRequired)
            {
                if (!string.IsNullOrEmpty(currentValue))
                {
                    ValidationCss = "Valid";
                    Valid = true;
                }
                else
                {
                    ValidationCss = "InValid";
                    Valid = false;
                }
            }
            else
            {
                Valid = null;
            }
        }
    }

    public async void Save(bool useJSON)
    {
        if (useJSON)
        {
            var teacherJson = await sessionStorage.GetItemAsync<string>("Teacher");
            if (teacherJson != null && teacherJson.Length > 0)
            {
                var tempTeacher = JsonConvert.DeserializeObject<Teacher>(teacherJson);

                await SaveDisconnectedTeacher(tempTeacher);

                await sessionStorage.RemoveItemAsync("Teacher");
            }
        }
        else
        {
            if (_userSettings.TeacherData != null)
            {
                await SaveDisconnectedTeacher(_userSettings.TeacherData);

                _userSettings.TeacherData = null;
            }
        }

    }

    protected async Task SaveDisconnectedTeacher(Teacher TeacherData)
    {
        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        {
            // load the disconnected data into the context
            servicecontext.Update(TeacherData);
            try
            {
                await servicecontext.SaveChangesAsync();

                //toastService.ShowSuccess("Data Saved Successfully!");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                toastService.ShowError(string.Format("{0}:{1}", ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "Error Saving Data"));

                sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "EDIHeader", "Save");
            }
        }
    }
}

