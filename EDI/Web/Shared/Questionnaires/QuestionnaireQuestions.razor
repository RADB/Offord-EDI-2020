@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core

<!-- PRINT THE Questions -->
@*<div class="card-body rounded">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body">*@
                    <div class="row">
                        <div class="col-12">
                            <QuestionnaireBuilder configs=@questions teacherData=@teacherData IsReadonly=@IsReadOnly OnValueUpdated="@ValueUpdated"></QuestionnaireBuilder>                            
                        </div>
                    </div>
                @*</div>
            </div>
        </div>
    </div>
</div>*@
@code {
    //@((MarkupString)_Text)
    [Parameter]
    public Teacher teacherData { get; set; }
    //[Parameter]
    // public TeacherProfileItemViewModel teacherModel { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    [Parameter]
    public EventCallback<string> OnValueUpdated { get; set; }

    private List<QuestionnairesConfiguration> questions;

    private string predicate;

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            getData();
        }
    }

    private void getData()
    {
        // need to filter by yearid as well
        predicate = "GroupName ==\"" + GroupName + "\" AND QuestionnaireId == " + QuestionnaireId + " AND " + ProvinceName + " == true AND InputTypeId !=9 AND InputTypeId !=10 AND InputTypeId !=11";
        // get the configuration
        questions = dbContext.QuestionnairesConfigurations.Where(predicate).OrderBy(q => q.Sequence).ToList();
        //Console.WriteLine(questions);
    }

    private async void ValueUpdated(string currentValue)
    {
        // callback to main form on any question change
        await OnValueUpdated.InvokeAsync(currentValue);
    }
}
