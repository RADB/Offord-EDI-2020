@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Inputs
@using static EDI.Web.Data.Enumerations
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;
<div class="row @ValidationCss">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row @ValidationCss">
    <div class="col-1">
        @if (Valid == true)
        {
            <i class="far fa-check-circle" style="font-size:50px;color:darkgreen"></i>
        }
        else if (Valid == false)
        {
            <i class="far fa-times-circle" style="font-size:50px;color:darkred"></i>
        }
    </div>
    <div class="col-9">
        @*<p>DropDownList value is:<strong>@currentValue</strong></p>*@

        <SfNumericTextBox TValue="int?" Readonly="@ReadonlyQuestion" Min=@Config.Min Max=@Config.Max Step=@step Format=@Config.NumberFormat @bind-Value="@currentValue" Placeholder="@Config.Label" @onchange="@onChange" Width="50%">
            @*  <NumericTextBoxEvents TValue="int?" ValueChange="OnChange"></NumericTextBoxEvents>*@
        </SfNumericTextBox>
    </div>

    <div class="col-2">
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Teacher">
            <Authorized>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code
{

    // option set
    private List<LookupSetOption> _LookupSetOptions;

    //private int? currentValue { get; set; }
    private int? currentValue { get; set; }
    private int? step { get; set; }

    protected override async Task OnInitializedAsync()
    {
        step = (int)Config.NumberStep;

        // get the question and help text
        GetQuestionText();

        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;

        // Get the current value of the question - parse will throw null value exception - otherwise use Convert.ToInt32
        try
        {
            currentValue = int.Parse(reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField));
        }
        catch (Exception)
        {

            currentValue = null;
        }


        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }
        Validation(currentValue.ToString());
    }

    //public async void OnChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> e)
    //{
    //    if (e.Value != null)
    //    {
    //        var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
    //        // save the data back to the object
    //        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());

    //        if (_userSettings.UseJSON)
    //        {
    //            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
    //            {
    //                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    //            });
    //            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
    //        }
    //        CompletedQuestion(previousValue,e.Value.ToString());
    //        StateHasChanged();
    //    }
    //}

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
            // save the data back to the object
            reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
            if (_userSettings.UseJSON)
            {
                string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
                await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
            }
            CompletedQuestion(previousValue, e.Value.ToString());
            StateHasChanged();
        }
    }
}







