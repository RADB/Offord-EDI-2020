@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Buttons;
@using static EDI.Web.Data.Enumerations;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;

<div class="row">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row">
    <div class="col-1"></div>
    <div class="col-9">
        @*<p>DropDownList value is:<strong>@currentValue</strong></p>*@
        @*@onchange="@onChange"*@
        <SfDropDownList TValue="string" Readonly="@ReadonlyQuestion" Placeholder="@Config.Label" TItem="LookupSetOption" @bind-Value="@currentValue" DataSource="@_LookupSetOptions" PopupWidth="auto" Width="50%">
            <DropDownListFieldSettings Value="Value" Text="@_userSettings.Language"></DropDownListFieldSettings>
            <DropDownListEvents TValue="string" TItem="LookupSetOption" ValueChange="OnChange"></DropDownListEvents>
        </SfDropDownList>
    </div>

    <div class="col-2">
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-success btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Teacher">
            <Authorized>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code
{

    // option set
    private List<LookupSetOption> _LookupSetOptions;

    private string currentValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the question and help text
        GetQuestionText();
        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;

        // Get the current value of the question
        currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }
    }

    //public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    private async void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, LookupSetOption> e)
    {
        if (e.Value != null)
        {
            // save the data back to the object
            reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
            StateHasChanged();
        }
    }

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            // save the data back to the object
            reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
            StateHasChanged();
        }
    }
}

