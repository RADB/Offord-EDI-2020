@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core
@*<div class="row">
        <h4>@((MarkupString)sharedService.GetConfigText(config))</h4>
    </div>*@
@if (questionHeaders.Count > 0)
{
    @foreach (var config in questionHeaders)
    {
        <div class="card-body rounded">
            <div class="row">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-12">
                                    <h4>@((MarkupString)sharedService.GetConfigText(config))</h4>
                                </div>
                            </div>
                            <QuestionnaireQuestions QuestionnaireId=@QuestionnaireId ProvinceName=@ProvinceName GroupName=@config.GroupName teacherData=@teacherData IsReadOnly=@IsReadOnly OnValueUpdated="@ValueUpdated"></QuestionnaireQuestions>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="card-body rounded">
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-body">
                        @*<div class="row">
                            <div class="col-12">*@
                                @* pass groupname that was passed in*@
                                <QuestionnaireQuestions QuestionnaireId=@QuestionnaireId ProvinceName=@ProvinceName GroupName=@GroupName teacherData=@teacherData IsReadOnly=@IsReadOnly OnValueUpdated="@ValueUpdated"></QuestionnaireQuestions>
                            @*</div>
                        </div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code
{
    [Parameter]
    public Teacher teacherData { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    [Parameter]
    public EventCallback<string> OnValueUpdated { get; set; }

    private List<QuestionnairesConfiguration> questionHeaders;

    private string predicate;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            getData();
        }
    }

    private void getData()
    {
        // need to filter by yearid as well
        predicate = "GroupName ==\"" + GroupName + "\" AND QuestionnaireId == " + QuestionnaireId + " AND " + ProvinceName + " == true AND InputTypeId ==10";
        // get the configuration
        questionHeaders = dbContext.QuestionnairesConfigurations.Where(predicate).OrderBy(q => q.Sequence).ToList();
        //Console.WriteLine(questions);
    }

    private async void ValueUpdated(string currentValue)
    {
        // callback to main form on any question change
        await OnValueUpdated.InvokeAsync(currentValue);
    }
}
