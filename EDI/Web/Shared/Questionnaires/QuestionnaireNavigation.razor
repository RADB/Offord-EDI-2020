@using Microsoft.AspNetCore.Components.Authorization
@using EDI.Web.Extensions;
@using EDI.Web.Data;
@using EDI.Web.Shared.Modals;
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@inject UserSettings UserSettings;
@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@inject IToastService toastService;
@inject IMathService mathService;
@inject IReflectionService reflectionService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<div class="d-flex justify-content-between align-items-center">    
        <div class="col-2">
            <button class="btn btn-info" disabled=@PreviousDisable @onclick="@(() => gotoURL("Previous"))">
                <i class="fas fa-chevron-left"></i> @PreviousPage
            </button>
        </div>
        <div class="col-8 text-center d-inline">
            @*<div class="row">*@
            
            <div class="col-12">
                <button class="btn btn-warning" @onclick="@checkCompleteNess" type="button"><i class="fas fa-search"></i> Check Completeness</button>
                <br />
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated @barColor" style="width:@percentComplete%;">@percentComplete%</div>
                </div>
            </div>
            
            @*</div>*@
        </div>
        <div class="col-2 text-right">
            <button class="btn btn-info" disabled=@NextDisable  hidden=@EHidden @onclick="@(() => gotoURL("Next"))">
                @NextPage <i class="fas fa-chevron-right"></i>
            </button>
            <button class="btn btn-primary" hidden=@LockHidden @onclick="@(() => lockChild())">
                <i class="fas fa-lock"></i> @LockText
            </button>
        </div>    
</div>
@code {
    [Parameter]
    public Teacher teacherData { get; set; }

    [Parameter]
    public bool ShowLockChild { get; set; } = true;

    [CascadingParameter]
    public IModalService ModalService { get; set; }

    [Parameter]
    public EventCallback<string> OnQuestionnaireSave { get; set; }

    private int ChildId { get; set; }
    private bool PreviousDisable { get; set; }
    private bool LockHidden { get; set; }
    private bool EHidden { get; set; }
    private string PreviousPage { get; set; }
    private bool NextDisable { get; set; }
    private string NextPage { get; set; }
    private string LockText { get; set; }
    private string CurrentPage { get; set; }
    private int completed { get; set; }
    private int required { get; set; }
    private int percentComplete { get; set; }
    private string barColor { get; set; }
    private string EntityName { get; set; }
    private List<Questionnaire> questionnaires;
    private bool IsSaving { get; set; } = false;

    protected async void lockChild()
    {
        var modal = ModalService.Show<ConfirmLock>("Confirm Lock");
        var result = await modal.Result;
        ConfirmLockModalClosed(result);

    }

    async void ConfirmLockModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            // show modal confirming locking child (YES NO)
            try
            {
                var currentStatus = teacherData.Children.Single().ChildStatusId;
                if ((Enumerations.ChildStatus)currentStatus != Enumerations.ChildStatus.Locked)
                {
                    checkCompleteNess();
                    //reflectionService.SetFieldValue(teacherData, "Child", "ChildStatusId", ((int)Enumerations.ChildStatus.Locked).ToString());
                    teacherData.Children.Single().ChildStatusId = (int)Enumerations.ChildStatus.Locked;
                    UserSettings.TeacherData = teacherData;
                    await Save(false);
                    StateHasChanged();
                    toastService.ShowSuccess("Student locked successfully.");

                    NavigationManager.NavigateTo("./children/index");
                }

            }
            catch (Exception ex)
            {

            }
        }
    }

    private void checkCompleteNess()
    {
        completed = UserSettings.QuestionsCompleted;
        required = UserSettings.QuestionsRequired;
        percentComplete = mathService.GetPercent(completed, required);

        if (percentComplete > 100)
            percentComplete = 100;

        switch (percentComplete)
        {
            case < 30:
                barColor = "bg-danger";
                break;
            case < 50:
                barColor = "bg-warning";
                break;
            case < 75:
                barColor = "bg-secondary";
                break;
            case < 99:
                barColor = "bg-info";
                break;
            case 100:
                barColor = "bg-success";
                break;
        }
        //StateHasChanged();
    }
    protected async void gotoURL(string Direction)
    {
        // get the URL
        string url = string.Format("EDIQuestionnaires/{0}/{1}", Direction == "Previous" ? PreviousPage : NextPage, ChildId);
        // save the questionnaire if teacher
        if (UserSettings.IsTeacher)
        {
            await Save(UserSettings.UseJSON);
        }
        else
        {
            UserSettings.TeacherData = null;
        }

        // navigate to the new page
        NavigationManager.NavigateTo(url);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            GetChildId();

            SetPreviousNext();
        }
    }

    private void GetChildId()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (uri.Segments.Count() != 4)
        {
            NavigationManager.NavigateTo("./children/index");
        }
        else
        {
            if (!Int32.TryParse(uri.Segments[3], out int studentId))
            {
                NavigationManager.NavigateTo("./children/index");
            }
            else
            {
                ChildId = studentId;
                CurrentPage = uri.Segments[2].ToString();
            }
        }
    }

    private void SetPreviousNext()
    {
        PreviousDisable = false;
        NextDisable = false;
        LockHidden = true;
        EHidden = false;

        switch (CurrentPage)
        {
            case "Demographics/":
                PreviousDisable = true;
                PreviousPage = string.Empty;
                NextPage = "SectionA";
                EntityName = "Questionnaires.Data.Demographics";
                break;

            case "SectionA/":
                PreviousPage = "Demographics";
                NextPage = "SectionB";
                EntityName = "Questionnaires.Data.SectionA";
                break;
            case "SectionB/":
                PreviousPage = "SectionA";
                NextPage = "SectionC";
                EntityName = "Questionnaires.Data.SectionB";
                break;
            case "SectionC/":
                PreviousPage = "SectionB";
                NextPage = "SectionD";
                EntityName = "Questionnaires.Data.SectionC";
                break;
            case "SectionD/":
                PreviousPage = "SectionC";
                NextPage = "SectionE";
                EntityName = "Questionnaires.Data.SectionD";
                break;

            case "SectionE/":
                NextDisable = true;
                PreviousPage = "SectionD";
                NextPage = string.Empty;
                LockText = "Lock Questionnaire";
                EntityName = "Questionnaires.Data.SectionE";
                LockHidden = ShowLockChild ? false : true;
                EHidden = true;
                break;
        }
    }

    private async Task Save(bool useJSON)
    {
        try
        {
            //only save if teacher
            if (UserSettings.IsTeacher)
            {
                if (!IsSaving)
                {
                    IsSaving = true;
                    if (useJSON)
                    {
                        var teacherJson = await sessionStorage.GetItemAsync<string>("Teacher");
                        if (teacherJson != null && teacherJson.Length > 0)
                        {
                            var tempTeacher = JsonConvert.DeserializeObject<Teacher>(teacherJson);

                            await SaveDisconnectedTeacher(tempTeacher);

                            await sessionStorage.RemoveItemAsync("Teacher");
                        }
                    }
                    else
                    {
                        if (UserSettings.TeacherData != null)
                        {
                            await SaveDisconnectedTeacher(UserSettings.TeacherData);

                            // save child data for subsequent status checks
                            UserSettings.ChildData = UserSettings.TeacherData.Children.Single();

                            UserSettings.TeacherData = null;
                        }
                    }
                    await OnQuestionnaireSave.InvokeAsync("Navigation");
                    IsSaving = false;
                }
                else
                {
                    toastService.ShowInfo("Save in progress.", "Please wait");
                    sharedService.WriteLogs("Click happened  before system completed Save operation.", true);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(string.Format("{0}:{1}", "Error Occurred: ", ex.Message));
            sharedService.WriteLogs(ex.Message, false);
        }
    }

    private async Task SaveDisconnectedTeacher(Teacher TeacherData)
    {
        GetChildId();
        //GetEntityName();

        // check completeness of form
        checkCompleteNess();


        bool IsComplete = percentComplete == 100 ? true : false;
        var modifiedTime = DateTime.Now;
        switch (EntityName)
        {
            case "Questionnaires.Data.Demographics":
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataDemographics.Single().ModifiedDate = modifiedTime;
                //UserSettings.DemographicsComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.Demographics.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionA":
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionAs.Single().ModifiedDate = modifiedTime;
                //UserSettings.SectionAComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionA.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionB":
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionBs.Single().ModifiedDate = modifiedTime;
                //UserSettings.SectionBComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionB.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionC":
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().ModifiedDate = modifiedTime;
                //UserSettings.SectionCComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionC.IsComplete", TeacherData.Children.Single().QuestionnairesDataSectionCs.Single().IsComplete);
                break;
            case "Questionnaires.Data.SectionD":
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionDs.Single().ModifiedDate = modifiedTime;
                //UserSettings.SectionDComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionD.IsComplete", IsComplete);
                break;
            case "Questionnaires.Data.SectionE":
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().CompletedQuestions = completed;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().RequiredQuestions = required;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().IsComplete = IsComplete;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().ModifiedBy = UserSettings.UserName;
                TeacherData.Children.Single().QuestionnairesDataSectionEs.Single().ModifiedDate = modifiedTime;
                //UserSettings.SectionEComplete = IsComplete;
                //await sessionStorage.SetItemAsync<bool>("Questionnaires.Data.SectionE.IsComplete", IsComplete);
                break;
        }

        // update new to In progress on save
        var currentStatus = TeacherData.Children.Single().ChildStatusId;
        if ((Enumerations.ChildStatus)currentStatus == Enumerations.ChildStatus.New)
        {
            TeacherData.Children.Single().ChildStatusId = (int)Enumerations.ChildStatus.InProgress;
        }

        TeacherData.Children.Single().ModifiedBy = UserSettings.UserName;
        TeacherData.Children.Single().ModifiedDate = modifiedTime;
        TeacherData.Children.Single().PercentComplete = (byte)percentComplete;

        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
        optionsBuilder.UseSqlServer(ConnectionStrings.ServiceConnection());
        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
        {
            // load the disconnected data into the context
            servicecontext.Update(TeacherData);
            try
            {
                await servicecontext.SaveChangesAsync();

                // update the total percent complete via stored Procedure
                await sharedService.UpdatePercentComplete(ChildId, 0);

                toastService.ShowSuccess("Data Saved Successfully!");
                //StateHasChanged();
            }
            catch (Exception ex)
            {
                toastService.ShowError(string.Format("{0}:{1}", ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "Error Saving Data"));

                sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "EDIHeader", "Save");
            }
        }
    }
    private  void ValueUpdated(string currentValue)
    {
        // callback to main form on any question change
        checkCompleteNess();
        Console.WriteLine(string.Format("Value was updated to {0}", currentValue));
    }



    }
