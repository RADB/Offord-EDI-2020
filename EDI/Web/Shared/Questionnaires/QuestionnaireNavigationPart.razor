@using static EDI.Web.Data.Enumerations
@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;
@using System.Linq.Dynamic.Core
@using Blazored.Modal
@using Blazored.Modal.Services
@using Syncfusion.Blazor.Navigations
@using System.Collections.Specialized;
@using Microsoft.EntityFrameworkCore;
<!-- Prints the tabs -->
<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 95px;margin-left:30px;">
            <SfTab>
                <TabEvents Selected="OnTabSelected" Selecting="OnTabSelecting"></TabEvents>
                <TabItems>
                    <!--loop through the questionnaires-->
                    @foreach (var item in questionnaires)
                    {
                        var _name = sharedService.GetQuestionnaireText(item);                        
                        <TabItem>                            
                            <ChildContent>
                                <TabHeader Text=@_name></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @if (groups != null)
                                {
                                    <div><b>QuestionnaireId</b> = @item.Id</div>

                                    <QuestionnaireGroups groups=@groups teacherData=@teacherData IsReadOnly=@IsReadOnly ProvinceName=@ProvinceName QuestionnaireId=@QuestionnaireId></QuestionnaireGroups>
                                }
                            </ContentTemplate>
                        </TabItem>
                    }
                </TabItems>
            </SfTab>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Teacher teacherData { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    private int SelectedTab = 0;
    private string predicate;

    private List<Questionnaire> questionnaires;
    private List<QuestionnairesConfiguration> groups;

    public class TabObject
    {
        public int Index { get; set; }
        public int Id { get; set; }
    }

    private List<TabObject> ListTab;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            // load the initial set of groups on load
            //getData();

            predicate = "t => t.IsChildQuestionnaire == true && t.YearId ==1";
            questionnaires = dbContext.Questionnaires.Where(predicate).OrderBy(t => t.Sequence).ToList();

            var count = questionnaires.Count();

            ListTab = new List<TabObject>();

            List<int> seqlist = new List<int>();

            foreach (var quest in questionnaires)
            {
                seqlist.Add(quest.Id);
            }

            for (var i = 0; i < count; i++)
            {
                for (var j = 0; j < count; j++)
                {
                    if (i == j)
                    {
                        var tab = new TabObject();
                        tab.Index = i;
                        tab.Id = seqlist[j];
                        ListTab.Add(tab);
                    }
                }
            }
        }
    }


    private void getData()
    {

        // get the group headers - these will all be collapsible
        predicate = "QuestionnaireId == " + QuestionnaireId + " AND InputTypeId == 11 AND " + ProvinceName + " == true";
        // get the configuration
        groups = dbContext.QuestionnairesConfigurations.Where(predicate).OrderBy(q => q.Sequence).ToList();

    }


    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    public void OnTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        for (var i = 0; i < ListTab.Count; i++)
        {
            if (args.SelectedIndex == ListTab[i].Index)
            {
                QuestionnaireId = ListTab[i].Id;
                // return the collection of group headers
                //predicate = "QuestionnaireId == " + QuestionnaireId + " AND InputTypeId == 11 AND " + ProvinceName + " == true";
                //groups = dbContext.QuestionnairesConfigurations.Where(predicate).ToList();                

                getData();
            }
        }
    }

    public void OnTabSelecting(Syncfusion.Blazor.Navigations.SelectingEventArgs args)
    {

    }

}
