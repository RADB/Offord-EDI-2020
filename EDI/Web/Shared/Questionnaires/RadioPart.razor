@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Buttons;
@using Newtonsoft.Json;
@using static EDI.Web.Data.Enumerations;
@using EDI.Web.Shared.Modals;
@inject IToastService toastService;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject IMathService mathService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="row @ValidationCss">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row @ValidationCss">
    <div class="col-1">
        @if (Valid == true)
        {
            <i class="far fa-check-circle" style="font-size:50px;color:darkgreen"></i>
        }
        else if (Valid == false)
        {
            <i class="far fa-times-circle" style="font-size:50px;color:darkred"></i>
        }
    </div>
    <div class="col-9" @ondblclick="(()=>RemoveRadioSelection())">
        @foreach (var option in _LookupSetOptions)
        {
            labelText = _userSettings.IsAdmin == true ? string.Format("{0} - ({1})", sharedService.GetOptionText(option), option.Value.ToString()) : sharedService.GetOptionText(option);
            <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion"  @onchange="@onChange" Name="@Config.EntityField" Label=@labelText Value="@option.Value.ToString()"></SfRadioButton>

            if ((Orientations)Config.OrientationId == Orientations.Vertical && _LookupSetOptions.IndexOf(option) != _LookupSetOptions.Count - 1)
            {
                <br />
            }
        }
    </div>

    <div class="col-2">
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Teacher">
            <Authorized>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code
{

    //private  Task test(args)
    //{
    //    toastService.ShowInfo("Save in progress.", "Please wait");
    //}


    // option set
    private List<LookupSetOption> _LookupSetOptions;
    [Parameter]
    public EventCallback<string> OnQuestionnaireSave { get; set; }

    private string currentValue { get; set; }

    private Boolean RadioLabels { get; set; } = true;

    private string LabelFonts { get; set; }

    private bool? HasNotification { get; set; }

    private int completed { get; set; }
    private int required { get; set; }
    private int percentComplete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the question and help text
        GetQuestionText();
        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;
        IsRequired = Config.IsRequired;
        HasNotification = Config.HasNotification;
        // Get the current value of the question
        currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }
        RadioLabels = _userSettings.RadioLabels.HasValue ? _userSettings.RadioLabels.Value : false;
        LabelFonts = _userSettings.LabelFonts;
        if (String.IsNullOrEmpty(LabelFonts))
            LabelFonts = "1em";


        Validation(currentValue);

        //if(Config.IsRequired)
        //    reflectionService.SetFieldValue(data, Config.EntityName, "RequiredQuestions", e.Value.ToString());
        //string RequiredQuestions = reflectionService.GetFieldValue(data, Config.EntityName, "RequiredQuestions");
        //string CompletedQuestions = reflectionService.GetFieldValue(data, Config.EntityName, "CompletedQuestions");
        //CompletionCheck(reqQuestions, );
    }

    public void RemoveRadioSelection()
    {
        var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
        currentValue = string.Empty;

        //update the interface
        CompletedQuestion(previousValue, currentValue, Config.IsRequired);

        // update previous value
        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, currentValue);
    }

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        // save the data back to the object
        // JsonConvert.SerializeObject(data, Formatting.Indented,

        var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
        if (_userSettings.UseJSON)
        {
            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
        }

        if (HasNotification == true)
        {
            //var predicate = e.Value.ToString() + Config.NotificationCondition;
            if (int.Parse(e.Value.ToString()) > 1)
            {
                // modal confirming lock

                // MESSAGE -
                //Config.Notification or Config.NotificationFrench
                var parameters = new ModalParameters();

                var message = _userSettings.Language == "French" ? Config.NotificationFrench : Config.Notification;

                parameters.Add("Message", message);

                var modal = ModalService.Show<StatusLock>("Confirm Lock", parameters);
                var result = await modal.Result;
                ConfirmLockModalClosed(result);
            }
        }

        CompletedQuestion(previousValue.ToString(), e.Value.ToString(), Config.IsRequired);
        StateHasChanged();

    }


    async void ConfirmLockModalClosed(Blazored.Modal.Services.ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            // show modal confirming locking child (YES NO)
            try
            {
                var currentStatus = data.Children.Single().ChildStatusId;
                if ((EDI.Web.Data.Enumerations.ChildStatus)currentStatus != EDI.Web.Data.Enumerations.ChildStatus.Locked)
                {
                    checkCompleteNess();

                    bool IsComplete = percentComplete == 100 ? true : false;
                    var modifiedTime = DateTime.Now;

                    data.Children.Single().ChildStatusId = (int)EDI.Web.Data.Enumerations.ChildStatus.Locked;
                    data.Children.Single().ModifiedBy = _userSettings.UserName;
                    data.Children.Single().ModifiedDate = modifiedTime;
                    data.Children.Single().PercentComplete = (byte)percentComplete;
                    data.Children.Single().QuestionnairesDataDemographics.Single().CompletedQuestions = completed;
                    data.Children.Single().QuestionnairesDataDemographics.Single().RequiredQuestions = required;
                    data.Children.Single().QuestionnairesDataDemographics.Single().IsComplete = IsComplete;
                    data.Children.Single().QuestionnairesDataDemographics.Single().ModifiedBy = _userSettings.UserName;
                    data.Children.Single().QuestionnairesDataDemographics.Single().ModifiedDate = modifiedTime;

                    try
                    {
                        var optionsBuilder = new DbContextOptionsBuilder<ServiceContext>();
                        optionsBuilder.UseSqlServer(EDI.Web.Extensions.ConnectionStrings.ServiceConnection());
                        using (ServiceContext servicecontext = new ServiceContext(optionsBuilder.Options))
                        {
                            // load the disconnected data into the context
                            servicecontext.Update(data);
                            try
                            {
                                await servicecontext.SaveChangesAsync();

                                NavigationManager.NavigateTo("./children/index", true);

                            }
                            catch (Exception ex)
                            {
                                sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "RadioPart", "ConfirmLockModalClosed-3");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "RadioPart", "ConfirmLockModalClosed-2");
                    }
                }

            }
            catch (Exception ex)
            {
                sharedService.SendException(ex.Message, ex.InnerException == null ? string.Empty : ex.InnerException.Message, "RadioPart", "ConfirmLockModalClosed-1");
            }
        }
    }

    private void checkCompleteNess()
    {
        completed = _userSettings.QuestionsCompleted;
        required = _userSettings.QuestionsRequired;
        percentComplete = mathService.GetPercent(completed, required);

        if (percentComplete > 100)
            percentComplete = 100;

        //StateHasChanged();
    }
}

