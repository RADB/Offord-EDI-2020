@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Buttons;
@using Newtonsoft.Json;
@using static EDI.Web.Data.Enumerations;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings; 
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;


<div class="row">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row">
    <div class="col-1"></div>
    <div class="col-9">
        @foreach (var option in _LookupSetOptions)
        {
            <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion" @onchange="@onChange" Name="@Config.EntityField" Label=@sharedService.GetOptionText(option) Value="@option.Value.ToString()"></SfRadioButton>

            if ((Orientations)Config.OrientationId == Orientations.Vertical && _LookupSetOptions.IndexOf(option) != _LookupSetOptions.Count - 1)
            {
                <br />
            }
        }
    </div>

    <div class="col-2">
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="Teacher">
            <Authorized>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code
{

        // option set
    private List<LookupSetOption> _LookupSetOptions;

    private string currentValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the question and help text
        GetQuestionText();
        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;

        // Get the current value of the question
        currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }
    }

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        // save the data back to the object
        // JsonConvert.SerializeObject(data, Formatting.Indented,


        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
        if (_userSettings.UseJSON)
        {
            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
        }
        StateHasChanged();

    }
}

