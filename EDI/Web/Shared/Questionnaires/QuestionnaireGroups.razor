@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;
@inject UserSettings UserSettings;
@inject ServiceContext dbContext;
@inject ISharedService sharedService;
@using Microsoft.EntityFrameworkCore;
@using System.Linq.Dynamic.Core
@using Syncfusion.Blazor.Navigations


<!-- PRINT THE GROUPS IN ACCORDIONS-->
@*<div class="row">
    <div class="col-md-12">
        <div class="card" style="box-shadow: 0 8px 32px rgba(77,101,117,0.35);border-radius: 12px;border-color: transparent;margin-top: 12px;margin-left:30px;">*@

    @*<SfAccordion ExpandMode="ExpandMode.Multiple" Width="100%">
        <AccordionItems>*@
            @foreach (var config in groups)
            {
                // show text - otherwise show group name in accordion if showgroupname = true
                var aName = sharedService.GetConfigText(config).Length > 0 ? sharedService.GetConfigText(config) : config.ShowGroupName ? config.GroupName : "";
                @*<AccordionItem Expanded="true" CssClass="border border-primary">
                    <HeaderTemplate>*@
                        <div class="container-fluid">
                            @if (aName.Length != 0)
                            { 
                                <div class="row">
                                    <!--<div class="col-6 border border-info"><h4>@sharedService.GetConfigText(config)</h4></div><div class="col-6 text-right border border-warning"><h4>Complete Status</h4></div>-->
                                    <div class="col-6"><h4>@aName</h4></div>
                                </div>
                             }
                        </div>
                    @*</HeaderTemplate>
                    <ContentTemplate>*@
                        @*@if (aName.Length != 0)
                        {
                            <div class="col-6"><h4>@sharedService.GetConfigText(config)</h4></div>
                        }*@
                        <!--<div><b>QuestionnaireId - Groups </b> = @config.GroupName</div>-->

                        <QuestionnaireQuestionHeader QuestionnaireId=@QuestionnaireId ProvinceName=@ProvinceName GroupName=@config.GroupName teacherData=@teacherData IsReadOnly=@IsReadOnly OnValueUpdated="@ValueUpdated"></QuestionnaireQuestionHeader>
                    @*</ContentTemplate>
                </AccordionItem>*@
            }
        @*</AccordionItems>
    </SfAccordion>*@
@*</div>*@

@code {
    //@((MarkupString)_Text)
    [Parameter]
    public Teacher teacherData { get; set; }
    //[Parameter]
    //public TeacherProfileItemViewModel teacherModel { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    [Parameter]
    public List<QuestionnairesConfiguration> groups { get; set; }

    [Parameter]
    public EventCallback<string> OnValueUpdated { get; set; }

    private string predicate;

    private string Translate(string word)
    {
        return sharedService.GetTranslate(word);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!UserSettings.IsAuthenticated)
        {
            NavigationManager.NavigateTo("./login");
        }
        else
        {
            if (groups == null)
            {
                getData();
            }
        }
        //Console.WriteLine("Questionnaire ID = " + QuestionnaireId);
    }

    private void getData()
    {
        // get the group headers - these will all be collapsible
        predicate = "QuestionnaireId == " + QuestionnaireId + " AND InputTypeId == 11 AND " + ProvinceName + " == true";
        // get the configuration
        groups = dbContext.QuestionnairesConfigurations.Where(predicate).OrderBy(q => q.Sequence).ToList();
    }

    private async void ValueUpdated(string currentValue)
    {
        // callback to main form on any question change
        await OnValueUpdated.InvokeAsync(currentValue);
    }
}
