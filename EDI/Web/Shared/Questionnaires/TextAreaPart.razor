@inherits QuestionnaireBase;
@using Syncfusion.Blazor.RichTextEditor;
@using static EDI.Web.Data.Enumerations;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;


<div class="row @ValidationCss">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row @ValidationCss">
    <div class="col-1">
        @if (Valid == true)
        {
            <i class="far fa-check-circle" style="font-size:50px;color:darkgreen"></i>
        }
        else if (Valid == false)
        {
            <i class="far fa-times-circle" style="font-size:50px;color:darkred"></i>
        }
    </div>
    <div class="col-9">
        @*@onchange="@onChange"*@
                <textarea name=@Config.EntityField id=@Config.EntityField rows="4" style="width:100%; max-width: 100%;resize:none;" @onchange="OnChange">@currentValue</textarea>
            </div>

            <div class="col-2">
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                        @if (Config.HasHelp)
                        {
                            <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                        }
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Teacher">
                    <Authorized>
                        @if (Config.HasHelp)
                        {
                            <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> @Translate("Help")</button>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        @code
        {

            // option set
            private List<LookupSetOption> _LookupSetOptions;

            private string currentValue { get; set; }

            protected override async Task OnInitializedAsync()
            {
                // get the question and help text
                GetQuestionText();

                // check to see if question is readonly
                ReadonlyQuestion = Config.IsReadOnly;
                IsRequired = Config.IsRequired;

                // Get the current value of the question
                currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

                if (Config.HasLookupEntity)
                {
                    // get the lookupset options
                    _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
                }
                Validation(currentValue);
            }

            private async void OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
            {
                if (e.Value != null)
                {
                    var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
                    // save the data back to the object
                    reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());

                    if (_userSettings.UseJSON)
                    {
                        string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
                        {
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                        });
                        await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
                    }
                    CompletedQuestion(previousValue, e.Value.ToString(), Config.IsRequired);
                    StateHasChanged();
                }
            }
        }







