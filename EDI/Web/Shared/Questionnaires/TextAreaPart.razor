@inherits QuestionnaireBase;
@using Syncfusion.Blazor.RichTextEditor;
@using static EDI.Web.Data.Enumerations;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;


<div class="row @ValidationCss">
    <h4>@((MarkupString)QuestionText)</h4>
</div>
<div class="row @ValidationCss">
    <div class="col-1">
        @if (Valid == true)
        {
            <i class="far fa-check-circle" style="font-size:50px;color:darkgreen"></i>
        }
        else if (Valid == false)
        {
            <i class="far fa-times-circle" style="font-size:50px;color:darkred"></i>
        }
    </div>
    <div class="col-9">
        @*@onchange="@onChange"*@
                <SfRichTextEditor @ref="RteObj" @bind-Value="@currentValue" Placeholder="Put content here..." UndoRedoSteps="50" UndoRedoTimer="400">
                    <RichTextEditorImageSettings SaveUrl="api/Image" Path=@Path></RichTextEditorImageSettings>
                    <RichTextEditorEvents OnImageUploadSuccess="@onSuccess" ValueChange="@OnChange"> </RichTextEditorEvents>
                    <RichTextEditorToolbarSettings Type="ToolbarType.Expand" Items="@Tools"></RichTextEditorToolbarSettings>
                </SfRichTextEditor>
            </div>

            <div class="col-2">
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                        @if (Config.HasHelp)
                        {
                            <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                        }
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Teacher">
                    <Authorized>
                        @if (Config.HasHelp)
                        {
                            <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        @code
        {

            // option set
            private List<LookupSetOption> _LookupSetOptions;

            private string currentValue { get; set; }

            public string Path { get; set; }

            SfRichTextEditor RteObj;

            public string[] header { get; set; }

            private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
        {
                new ToolbarItemModel() { Command = ToolbarCommand.Bold },
                new ToolbarItemModel() { Command = ToolbarCommand.Italic },
                new ToolbarItemModel() { Command = ToolbarCommand.Underline },
                new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
                new ToolbarItemModel() { Command = ToolbarCommand.FontName },
                new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
                new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.Formats },
                new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
                new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
                new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
                new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
                new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
                new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
                new ToolbarItemModel() { Command = ToolbarCommand.Indent },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
                new ToolbarItemModel() { Command = ToolbarCommand.Image },
                new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
                new ToolbarItemModel() { Command = ToolbarCommand.Print },
                new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
                new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
                new ToolbarItemModel() { Command = ToolbarCommand.Separator },
                new ToolbarItemModel() { Command = ToolbarCommand.Undo },
                new ToolbarItemModel() { Command = ToolbarCommand.Redo }
                };

            private void onSuccess(ImageSuccessEventArgs args)
            {
                var headers = args.Response.Headers.ToString();
                header = headers.Split("name: ");
                header = header[1].Split("\r");
                args.File.Name = header[0];
            }


            protected override async Task OnInitializedAsync()
            {
                // get the question and help text
                GetQuestionText();

                // check to see if question is readonly
                ReadonlyQuestion = Config.IsReadOnly;
                IsRequired = Config.IsRequired;

                // Get the current value of the question
                currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

                // get the path for the images
                Path = NavigationManager.BaseUri + sharedService.GetImagePath() + "/";

                if (Config.HasLookupEntity)
                {
                    // get the lookupset options
                    _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
                }
                Validation(currentValue);
            }

            //public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
            //{
            //    if (e.Value != null)
            //    {
            //        var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
            //        // save the data back to the object
            //        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
            //        CompletedQuestion(previousValue, e.Value.ToString());
            //        StateHasChanged();
            //    }
            //}

            private async void OnChange()
            {
                var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
                // save the data back to the object
                reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, RteObj.Value.ToString());

                if (_userSettings.UseJSON)
                {
                    string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
                    {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    });
                    await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
                }
                CompletedQuestion(previousValue, RteObj.Value.ToString());
                StateHasChanged();
            }
        }







