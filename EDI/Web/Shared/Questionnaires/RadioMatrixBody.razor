@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Buttons;
@using static EDI.Web.Data.Enumerations;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;


<tr>
    @*@if (string.IsNullOrEmpty(LabelFonts))
    {
        <td>
            @((MarkupString)QuestionText)
        </td>
    }
    else
    {*@
        <td style="font-size: @LabelFonts;">
            @((MarkupString)QuestionText)
        </td>
    @*}*@

    @foreach (var option in _LookupSetOptions)
    {
        <td>
            @*@radioTitle = new Dictionary<string, object>(){{ "title", @sharedService.GetOptionText(option)}};*@
            @if (RadioLabels)
            {
                <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion" @onchange="@onChange" Name="@Config.EntityField" Label=@sharedService.GetOptionText(option) Value="@option.Value.ToString()"></SfRadioButton>

            }
            else
            {
                <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion" @onchange="@onChange" Name="@Config.EntityField" Value="@option.Value.ToString()"></SfRadioButton>

            }

        </td>
    }
    <AuthorizeView Roles="Administrator">
        <Authorized>
            <td>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </td>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Teacher">
        <Authorized>

            @if (Config.HasHelp)
            {
                <td>
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                </td>
            }
        </Authorized>
    </AuthorizeView>
</tr>

@*<div class="col-2">
            <AuthorizeView Roles="Administrator">
                <Authorized>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                    @if (Config.HasHelp)
                    {
                        <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                    }
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Roles="Teacher">
                <Authorized>
                    @if (Config.HasHelp)
                    {
                        <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>*@

@code
{
    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    // option set
    private List<LookupSetOption> _LookupSetOptions;

    private string currentValue { get; set; }

    private Dictionary<string, object> radioTitle;

    private Boolean RadioLabels { get; set; } = true;

    private string LabelFonts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // get the question and help text
        GetQuestionText();
        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;

        // Get the current value of the question
        currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }

        RadioLabels = UserSettings.RadioLabels;
        LabelFonts = UserSettings.LabelFonts;
        if (String.IsNullOrEmpty(LabelFonts))
            LabelFonts = "1em";
    }

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        // save the data back to the object
        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
        string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
        {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        });
        await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
        StateHasChanged();
    }
}




