@inherits QuestionnaireBase;
@using Syncfusion.Blazor.Buttons;
@using static EDI.Web.Data.Enumerations;
@using EDI.Web.Extensions;
@inject ISharedService sharedService;
@inject IReflectionService reflectionService;
@inject ServiceContext dbContext;
@inject UserSettings _userSettings;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
@using Newtonsoft.Json;

<tr class="@ValidationCss">
    <td>
        @if (Valid == true)
        {
            <i class="far fa-check-circle" style="font-size:50px;color:darkgreen"></i>
        }
        else if (Valid == false)
        {
            <i class="far fa-times-circle" style="font-size:50px;color:darkred"></i>
        }
    </td>
    <td style="font-size: @_userSettings.LabelFonts;">
        @((MarkupString)QuestionText)
    </td>
    
    @foreach (var option in _LookupSetOptions)
    {
        <td>
            @*@radioTitle = new Dictionary<string, object>(){{ "title", @sharedService.GetOptionText(option)}};*@

            @*<div class="form-check">
                @{
                    bool ischecked = false;

                    @if (@currentValue == @option.Value.ToString())
                    {
                        ischecked = true;
                    }

                    <input class="form-check-input" type="radio" disabled="@ReadonlyQuestion" name="@Config.EntityField" checked="@ischecked" value="@option.Value.ToString()" @onchange="@onChange" data-toggle="tooltip" data-placement="bottom" title="@sharedService.GetOptionText(option)">

                }
                <label class="form-check-label">
                    @if (RadioLabels)
                    {
                        @sharedService.GetOptionText(option)
                    }
                </label>
            </div>*@


            @if (_userSettings.RadioLabels.HasValue && _userSettings.RadioLabels.Value)
                {
                    <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion" @onchange="@onChange" Name="@Config.EntityField" Label=@sharedService.GetOptionText(option) Value="@option.Value.ToString()"></SfRadioButton>
                }
                else
                {
                    <SfRadioButton @bind-Checked="currentValue" Disabled="@ReadonlyQuestion" @onchange="@onChange" Name="@Config.EntityField" Value="@option.Value.ToString()"></SfRadioButton>
                }
        </td>
    }
    <AuthorizeView Roles="Administrator">
        <Authorized>
            <td>
                <button type="button" class="btn btn-primary btn-sm" @onclick="@gotoURL"><i class="icon-settings"></i> Configure</button>
                @if (Config.HasHelp)
                {
                    <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => ShowModal("e-EDI Help", HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                }
            </td>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Teacher">
        <Authorized>

            @if (Config.HasHelp)
            {
                <td>
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowModal("e-EDI Help",HelpTextEnglish))"><i class="icon-question"></i> Help</button>
                </td>
            }
        </Authorized>
    </AuthorizeView>
</tr>

@code
{
    [Parameter]
    public string ProvinceName { get; set; }

    [Parameter]
    public int QuestionnaireId { get; set; }

    [Parameter]
    public string GroupName { get; set; }

    // option set
    private List<LookupSetOption> _LookupSetOptions;

    private string currentValue { get; set; }

    private Dictionary<string, object> radioTitle;

    //private Boolean RadioLabels { get; set; } = true;

    //private string LabelFonts { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
        else
        {

        }
    }
    protected override async Task OnInitializedAsync()
    {
        // get the question and help text
        GetQuestionText();
        // check to see if question is readonly
        ReadonlyQuestion = Config.IsReadOnly;
        IsRequired = Config.IsRequired;

        // Get the current value of the question
        currentValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);

        if (Config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(Config.LookupEntityId.GetValueOrDefault(1));
        }
        Validation(currentValue);
        //RadioLabels = UserSettings.RadioLabels;
        //LabelFonts = UserSettings.LabelFonts;

    }

    public async void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var previousValue = reflectionService.GetFieldValue(data, Config.EntityName, Config.EntityField);
        reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, e.Value.ToString());
        if (_userSettings.UseJSON)
        {
            // save the data back to the object
            string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });
            await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
        }

        CompletedQuestion(previousValue,e.Value.ToString());
        // StateHasChanged();
    }

    //public async void onDoubleClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
    //{

    //    currentValue = "0";
    //    // save the data back to the object
    //    reflectionService.SetFieldValue(data, Config.EntityName, Config.EntityField, string.Empty);
    //    string teacherJson = JsonConvert.SerializeObject(data, Formatting.Indented, new JsonSerializerSettings
    //    {
    //        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    //    });
    //    await sessionStorage.SetItemAsync<string>("Teacher", teacherJson);
    //    Save();
    //    StateHasChanged();

    //    var url = NavigationManager.Uri;
    //    NavigationManager.NavigateTo(url, true);
    //}


}




