@using static EDI.Web.Data.Enumerations
@using Syncfusion.Blazor.Navigations

@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;
@*
    Questionnaire Flow:
        EDI Questionnaires\Section
            QuestionnaireHeader (Type 9)
                Questionnaire Groups (Type 11)
                    Questionnaire Question Headers (Type 10)
                        Questionnaire Questions (All other types)
                            Questionnaire Builder
                                Parts
                                    Questions
*@

@foreach (var config in configs)
{
    Linebreak = true;
    //if (CurrentGroup != config.GroupName)
    //{
    // get the current group
    CurrentGroup = config.GroupName;

    if (config.IsHeader)
    {
        // get the header text
        _Text = sharedService.GetConfigText(config);

        // process the header type
        switch ((InputTypes)config.InputTypeId)
        {
            case InputTypes.Header:
                var _label = "";
                //NavigationManager.Uri.Contains
                if (config.EntityName.Contains("TeacherProfile"))
                    // show the teacher name on the teacher profile
                    _label = teacherData.TeacherName;
                else
                {
                    var _gender = string.Empty;
                    // show the child EDI ID
                    if (teacherData.Children.Single().Gender != null)
                    {
                        _gender = teacherData.Children.Single().Gender.English;
                    }

                    //_label = string.Format("{0} - {1:yyyy-MM-dd} - ({2})", teacherData.Children.Single().Ediid.ToString(), teacherData.Children.Single().Dob, _gender);
                    _label = string.Format("{0} - {1:yyyy-MM-dd}", teacherData.Children.Single().Ediid.ToString(), teacherData.Children.Single().Dob);
                }
                @((MarkupString)string.Format("<div class=\"col\">{0}</div><div class=\"col-5 text-right\">{1}</div>", _Text, _label));
                break;
            case InputTypes.GroupHeader:
                @*<div class="card-body border">
                        <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) craft the Group Header<br />_Text</p>
                    </div>
                        \\**implemented in QuestionnaireHeader
                *@
                Linebreak = false;
                break;
            case InputTypes.QuestionHeader:
                <QuestionnaireQuestionHeader Config=@config data="@teacherData"></QuestionnaireQuestionHeader>
                break;
            case InputTypes.RadioMatrix:
                GetRadioMatrixHeader(config, teacherData);
                <RadioMatrixPart RadioMatrixHeader="@RadioMatrixHeader" Config=@config data="@teacherData"></RadioMatrixPart>
                break;
            default:
                <div class="card-body border">
                    <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) is not a header</p>
                </div>
                break;
        }
    }
    else
    {
        // bind to value from demographic_data

        switch ((InputTypes)config.InputTypeId)
        {
            case InputTypes.RadioButtons:                
                <RadioPart Config="@config" data="@teacherData"></RadioPart>
                break;
            case InputTypes.DatePicker:
                <DatePickerPart Config=@config data="@teacherData"></DatePickerPart>
                break;
            case InputTypes.TextBox:
                <TextPart Config=@config data=@teacherData></TextPart>
                break;
            case InputTypes.SelectBox:
                <SelectPart Config="@config" data="@teacherData"></SelectPart>
                break;
            case InputTypes.RadioMatrix:
                // skip til we figure out how to filter more appropriately in RadioMatrixHeader
                Linebreak = false;
                break;
            case InputTypes.NumberBox:
                <NumberBox Config=@config data="@teacherData"></NumberBox>
                break;
            case InputTypes.NumberBoxDouble:
                <NumberBoxDouble Config=@config data="@teacherData"></NumberBoxDouble>
                break;
            case InputTypes.CheckBox:
                <CheckBoxPart Config=@config data="@teacherData"></CheckBoxPart>
                break;
            case InputTypes.Hidden:
                <HiddenPart Config=@config data="@teacherData"></HiddenPart>
                Linebreak = false;
                break;
            case InputTypes.TextArea:
                <TextAreaPart Config=@config data="@teacherData"></TextAreaPart>
                break;
            default:
                <div class="card-body border">
                    <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) needs to be crafted<br />@sharedService.GetConfigText(config)</p>
                </div>
                break;
        }

        // check to see if last config
        if ((configs.IndexOf(config) != configs.Count - 1) && Linebreak)
        {
            <hr />
        }
    }
}

@code {
    [Parameter]
    public List<QuestionnairesConfiguration> configs { get; set; }

    [Parameter]
    public Teacher teacherData { get; set; }
    //[Parameter]
    //public TeacherProfileItemViewModel teacherModel { get; set; }

    [Parameter]
    public bool IsReadonly { get; set; }

    private string _Text;
    private string CurrentGroup = "";

    private string RadioMatrixHeader = "";

    private string RadioMatrixBody = "";
    private bool Linebreak;

    protected override async Task OnInitializedAsync()
    {
    }

    protected void GetRadioMatrixHeader(QuestionnairesConfiguration config, Teacher data)
    {

        List<LookupSetOption> _LookupSetOptions = null;

        if (config.HasLookupEntity)
        {
            // get the lookupset options
            _LookupSetOptions = GetLookupSetOptions(config.LookupEntityId.GetValueOrDefault(1));
        }
        RadioMatrixHeader = "<tr><th></th>";
        foreach (var option in _LookupSetOptions)
        {
            RadioMatrixHeader += string.Format("{0}{1}{2}", "<th>", sharedService.GetOptionText(option), "</th>");
        }
        RadioMatrixHeader += "</tr>";
    }

    protected List<LookupSetOption> GetLookupSetOptions(int LookupSetId)
    {
        // convert to loading the object rather than another list
        return dbContext.LookupSetOptions.Where(o => o.LookupSetId == LookupSetId).OrderBy(o => o.Sequence).ToList();
    }
}
