@using static EDI.Web.Data.Enumerations
@inject ISharedService sharedService;
@inject ServiceContext dbContext;
@using Syncfusion.Blazor.Navigations
@inject UserSettings UserSettings;
@inject NavigationManager NavigationManager;

@foreach (var config in configs)
{
    //if (CurrentGroup != config.GroupName)
    //{
    // get the current group
    CurrentGroup = config.GroupName;

    if (config.IsHeader)
    {
        // get the header text
        _Text = sharedService.GetConfigText(config);

        // process the header type
        switch ((InputTypes)config.InputTypeId)
        {
            case InputTypes.Header:
                var _label = "";
                if (NavigationManager.Uri.Contains("TeacherProfile"))
                    // show the teacher name on the teacher profile
                    _label = " - " + teacherData.TeacherName;
                else
                {
                    // show the child EDI ID
                    _label = teacherData.Children.Single().Ediid.ToString();
                }
                <div class="card-header">
                    <b>@_Text</b>: @_label
                </div>
                break;
            case InputTypes.GroupHeader:
                <div class="card-body border">
                    <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) craft the Group Header<br />_Text</p>
                </div>
                break;
            case InputTypes.QuestionHeader:
                <div class="card-body border">
                    <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) craft the Question Header<br />_Text</p>
                </div>
                break;
            default:
                <div class="card-body border">
                    <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) is not a header</p>
                </div>
                break;
        }
    }
    else
    {
        // bind to value from demographic_data

        switch ((InputTypes)config.InputTypeId)
        {
            case InputTypes.RadioButtons:                
                @*<RadioButtonsPart Config=@config data=@teacherData teacherModel="@teacherModel" CurrentValue=1></RadioButtonsPart>*@
                <RadioPart Config="@config" data="@teacherData"></RadioPart>
                break;
            case InputTypes.DatePicker:
                <DatePickerPart Config=@config CurrentValue=@(new DateTime(2011, 01, 18))></DatePickerPart>
                break;
            case InputTypes.TextBox:
                <TextPart Config=@config data=@teacherData CurrentValue=""></TextPart>
                break;
            case InputTypes.SelectBox:
                <SelectBoxPart Config=@config CurrentValue="2"></SelectBoxPart>
                break;
            @*case InputTypes.NumberBox:
                <NumberBoxPart Config=@config Min="0" Max="50" Label="" ></NumberBoxPart>
                    break;
                    case InputTypes.CheckBox:
                    <div class="card-body border">
                        <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) needs to be crafted</p>
                    </div>
                    break;
                    default:
                    <div class="card-body border">
                        <p>@Enum.GetName(typeof(InputTypes), config.InputTypeId) needs to be crafted<br />@sharedService.GetConfigText(config)</p>
                    </div>
                    break;*@
        }
    }
}

@code {
    [Parameter]
    public List<QuestionnairesConfiguration> configs { get; set; }

    [Parameter]
    public Teacher teacherData { get; set; }
    [Parameter]
    public TeacherProfileItemViewModel teacherModel { get; set; }

    [Parameter]
    public bool IsReadonly { get; set; }

    private string _Text;
    private string CurrentGroup = "";

    protected override async Task OnInitializedAsync()
    {
    }
}
